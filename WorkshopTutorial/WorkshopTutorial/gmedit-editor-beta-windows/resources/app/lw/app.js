// Generated by Haxe 4.0.0-rc.3+e3df7a448
(function ($hx_exports, $global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = "DateTools";
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len1 = f.length - p;
	r_b += len1 == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len1);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) if(f(x.next())) {
		return true;
	}
	return false;
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.getArgs = function() {
	var out = Object.create(null);
	var search = document.location.search;
	if(search != "") {
		var _g = 0;
		var _g1 = search.substring(1).split("&");
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			var eq = pair.indexOf("=");
			if(eq >= 0) {
				var s = pair.substring(eq + 1);
				var val = decodeURIComponent(s.split("+").join(" "));
				out[pair.substring(0,eq)] = val;
			} else {
				out[pair] = "";
			}
		}
	}
	return out;
};
Main.main = function() {
	Main.moduleArgs = Main.getArgs();
	haxe_Log.trace = function(v,infos) {
		var out = [v];
		if(infos != null) {
			out.unshift(infos.fileName + ":" + infos.lineNumber);
			if(infos.customParams != null) {
				var _g = 0;
				var _g1 = infos.customParams;
				while(_g < _g1.length) {
					var v1 = _g1[_g];
					++_g;
					out.push(v1);
				}
			}
		}
		var console1 = window.console;
		$bind(console1,console1.log).apply(console1,out);
	};
	if(window.require != null) {
		window["Electron_API"] = require("electron");
		window["Electron_FS"] = require("fs");
		var ref = Electron_API.remote.dialog;
		if(ref == null) {
			throw new js__$Boot_HaxeError("Can't find " + "Electron_Dialog");
		}
		window["Electron_Dialog"] = ref;
		var ref1 = Electron_API.ipcRenderer;
		if(ref1 == null) {
			throw new js__$Boot_HaxeError("Can't find " + "Electron_IPC");
		}
		window["Electron_IPC"] = ref1;
		var ref2 = Electron_API.shell;
		if(ref2 == null) {
			throw new js__$Boot_HaxeError("Can't find " + "Electron_Shell");
		}
		window["Electron_Shell"] = ref2;
		var ref3 = Electron_API.remote.Menu;
		if(ref3 == null) {
			throw new js__$Boot_HaxeError("Can't find " + "Electron_Menu");
		}
		window["Electron_Menu"] = ref3;
		var ref4 = Electron_API.remote.MenuItem;
		if(ref4 == null) {
			throw new js__$Boot_HaxeError("Can't find " + "Electron_MenuItem");
		}
		window["Electron_MenuItem"] = ref4;
		var ref5 = Electron_API.remote.app;
		if(ref5 == null) {
			throw new js__$Boot_HaxeError("Can't find " + "Electron_App");
		}
		window["Electron_App"] = ref5;
		var ensure = function(dir) {
			if(!Electron_FS.existsSync(dir)) {
				Electron_FS.mkdirSync(dir);
			}
		};
		var path = Electron_App.getPath("userData") + "/GMEdit";
		electron_FileWrap.userPath = path;
		ensure(path);
		ensure(path + "/session");
		ensure(path + "/snippets");
		ensure(path + "/config");
		ensure(path + "/themes");
		ensure(path + "/plugins");
		ensure(path + "/api");
		ensure(path + "/api/v1");
		ensure(path + "/api/v2");
		ensure(path + "/api/live");
	} else {
		window["Electron_API"] = null;
		var ref6 = electron_FileSystemBrowser;
		if(ref6 == null) {
			throw new js__$Boot_HaxeError("Can't find " + "Electron_FS");
		}
		window["Electron_FS"] = ref6;
		var ref7 = electron_DialogFallback;
		if(ref7 == null) {
			throw new js__$Boot_HaxeError("Can't find " + "Electron_Dialog");
		}
		window["Electron_Dialog"] = ref7;
		window["Electron_IPC"] = null;
		window["Electron_Shell"] = null;
		window["Electron_App"] = null;
		var ref8 = electron_MenuFallback;
		if(ref8 == null) {
			throw new js__$Boot_HaxeError("Can't find " + "Electron_Menu");
		}
		window["Electron_Menu"] = ref8;
		var ref9 = electron_MenuItemFallback;
		if(ref9 == null) {
			throw new js__$Boot_HaxeError("Can't find " + "Electron_MenuItem");
		}
		window["Electron_MenuItem"] = ref9;
	}
	if(Electron_API == null) {
		document.querySelector("#app").classList.add("app-browser");
	}
	Main.modulePath = window.__dirname;
	if(Main.modulePath == null) {
		Main.modulePath = ".";
	}
	ui_Preferences.init();
	file_FileKind.initStatic();
	gml_GmlAPI.init();
	shaders_ShaderAPI.init();
	parsers_GmlEvent.init();
	window.ace_mode_gml_0();
	ace_AceGmlHighlight.init();
	ace_AceMdHighlight.init();
	ace_AceHxHighlight.init();
	shaders_ShaderHighlight.init();
	window.ace_mode_gml_1();
	editors_Editor.init();
	ace_AceSnippets.init();
	ace__$AceWrap_AceWrap_$Impl_$.init();
	ui_CommandPalette.init();
	Main.aceEditor = ace__$AceWrap_AceWrap_$Impl_$._new(document.querySelector("#source"),{ isPrimary : true});
	window.aceEditor = Main.aceEditor;
	ace_AceCtxMenu.initMac(Main.aceEditor);
	editors_EditCode.currentNew = new gml_file_GmlFile("",null,file_kind_misc_KPlain.inst,"").editor;
	ui_KeyboardShortcuts.initGlobal();
	ui_ColorPicker.init();
	ui_GlobalSearch.init();
	ui_GlobalLookup.init();
	ui_Sidebar.init();
	ui_MainMenu.init();
	window.ace_mode_gml_2();
	ace_AceSessionData.init();
	ui_treeview_TreeView.init();
	ui_treeview_TreeViewMenus.init();
	ui_ProjectStyle.init();
	ui_FileDrag.init();
	ui_ChromeTabs.init();
	gml_Project.init();
	Main.aceEditor.statusBar.update();
	var this1 = Main.aceEditor;
	var q = ui_WelcomePage.init(Main.aceEditor);
	this1.setSession(q);
	ui_liveweb_LiveWeb.init();
	plugins_PluginManager.init();
	console.log("hello!");
	return null;
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var _$Xml_XmlType_$Impl_$ = {};
$hxClasses["_Xml.XmlType_Impl_"] = _$Xml_XmlType_$Impl_$;
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		return HxOverrides.iter(_g);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var ace_AceCommands = $hx_exports["AceCommands"] = function() { };
$hxClasses["ace.AceCommands"] = ace_AceCommands;
ace_AceCommands.__name__ = "ace.AceCommands";
ace_AceCommands.add = function(command) {
	Main.aceEditor.commands.addCommand(command);
};
ace_AceCommands.getKeybindString = function(editor,cmdName,kb) {
	var cmd = editor.commands.commands[cmdName];
	if(cmd == null) {
		return null;
	}
	var key = null;
	if(kb == null) {
		kb = cmd.bindKey;
	}
	if(kb == null) {
		var ckb = editor.commands.commandKeyBinding;
		var _g = 0;
		var _g1 = Reflect.fields(ckb);
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			var ckv = ckb[k];
			if(ckv == cmd || ckv == cmdName) {
				key = k;
				break;
			}
		}
	}
	if(!(kb == null || key != null)) {
		if(typeof(kb) == "string") {
			key = kb;
		} else if(electron_FileWrap.isMac) {
			key = kb.mac;
		} else {
			key = kb.win;
		}
	}
	if(key != null) {
		var p = key.indexOf("|");
		if(p >= 0) {
			key = key.substring(0,p);
		}
		var what = new RegExp("(?:^|\\b)(\\w)","g");
		key = key.replace(what,function(_,c) {
			return c.toUpperCase();
		});
	}
	return key;
};
ace_AceCommands.addToPalette = function(cmd) {
	var cmdName = cmd.exec;
	var editor = Main.aceEditor;
	if(typeof(cmdName) != "string") {
		throw new js__$Boot_HaxeError("Expected cmd.exec to be command name");
	}
	if(cmd.key == null) {
		cmd.key = ace_AceCommands.getKeybindString(editor,cmdName);
	}
	cmd.exec = function() {
		editor.execCommand(cmdName);
	};
	ui_CommandPalette.add(cmd);
};
ace_AceCommands.remove = function(command) {
	Main.aceEditor.commands.removeCommand(command);
};
ace_AceCommands.init = function(editor,isPrimary) {
	var commands = editor.commands;
	var show = function(cmdName,text,kb) {
		if(!isPrimary) {
			return;
		}
		var cmd = editor.commands.commands[cmdName];
		if(cmd == null) {
			console.warn("Command " + cmdName + " is amiss");
		}
		var key = ace_AceCommands.getKeybindString(editor,cmdName,kb);
		ui_CommandPalette.add({ name : text, exec : function() {
			editor.execCommand(cmdName);
		}, key : key});
	};
	var add = function(cmd1,showAs) {
		commands.addCommand(cmd1);
		if(showAs != null) {
			show(cmd1.name,showAs);
		}
	};
	var bind = function(key1,cmd2,showAs1) {
		commands.bindKey(key1,cmd2);
		if(showAs1 != null) {
			show(cmd2,showAs1,key1);
		}
	};
	add({ name : "openDeclaration", bindKey : "F1|F12", exec : function(editor1) {
		var pos = editor1.getCursorPosition();
		var tk = editor1.getSession().getTokenAt(pos.row,pos.column);
		ui_OpenDeclaration.proc(editor1.getSession(),pos,tk);
	}});
	add({ name : "findReferences", bindKey : "Shift-F1|Shift-F12", exec : function(editor2) {
		var pos1 = editor2.getCursorPosition();
		var tk1 = editor2.getSession().getTokenAt(pos1.row,pos1.column);
		if(tk1 != null) {
			ui_GlobalSearch.findReferences(tk1.value);
		}
	}});
	add({ name : "saveFile", bindKey : { win : "Ctrl-S", mac : "Command-S"}, exec : function(editor3) {
		var file = editor3.getSession().gmlFile;
		if(file == null) {
			return;
		}
		file.save();
		editor3.getSession().getUndoManager().markClean();
	}});
	add({ name : "startAutocomplete", exec : function(editor4) {
		if(editor4.completer != null) {
			editor4.completer.showPopup(editor4);
		}
	}, bindKey : "Ctrl-Space|Ctrl-Shift-Space|Alt-Space"});
	add({ name : "showKeyboardShortcuts", bindKey : { win : "Ctrl-Alt-h", mac : "Command-Alt-h"}, exec : function(editor5) {
		ace.config.loadModule("ace/ext/keybinding_menu",function(module) {
			module.init(editor5);
			editor5.showKeyboardShortcuts();
		});
	}},"Show keyboard mappings");
	add({ name : "lw_execute", bindKey : { win : "Ctrl-Enter", mac : "Command-Enter|Ctrl-Enter"}, exec : function(editor6) {
		document.getElementById("refresh").click();
	}},"Run game");
	bind({ win : "Ctrl-M", mac : "Command-M"},"foldall","Fold All");
	bind({ win : "Ctrl-U", mac : "Command-U"},"unfoldall","Unfold All");
	bind({ win : "Ctrl-Alt-Up", mac : "Command-Alt-Up"},"movelinesup");
	bind({ win : "Ctrl-Alt-Down", mac : "Command-Alt-Down"},"movelinesdown");
	bind({ win : "Alt-Shift-Up", mac : "Alt-Shift-Up"},"addCursorAbove");
	bind({ win : "Alt-Shift-Down", mac : "Alt-Shift-Down"},"addCursorBelow");
	bind({ win : "Ctrl-K", mac : "Command-K"},"togglecomment");
	bind({ win : "Ctrl-D", mac : "Command-D"},"duplicateSelection");
	bind({ win : "Ctrl-Shift-D", mac : "Command-Shift-D"},"removeline");
	var findRxs = "^#define\\b|^#event\\b|^#moment\\b|^#section\\b";
	var findRx0 = new RegExp("(?:" + findRxs + "|#region\\b|//{|//#region\\b|//#mark\\b)");
	var findFoldImpl = function(editor7,fwd,select) {
		var session = editor7.getSession();
		var row = editor7.selection.lead.row;
		var steps = fwd ? session.getLength() - 1 - row : row;
		var delta = fwd ? 1 : -1;
		var rx = findRx0;
		while(--steps >= 0) {
			row += delta;
			if(session.getFoldAt(row,0) != null) {
				continue;
			}
			if(!rx.test(session.getLine(row))) {
				continue;
			}
			var col = session.getLine(row).length;
			if(select) {
				editor7.selection.selectTo(row,0);
			} else {
				editor7.gotoLine(row + 1,col);
			}
			break;
		}
	};
	add({ name : "gotoNextFoldRegion", bindKey : { win : "Ctrl-Down", mac : "Command-Down"}, exec : function(editor8) {
		findFoldImpl(editor8,true,false);
	}},"Next fold region");
	add({ name : "gotoPreviousFoldRegion", bindKey : { win : "Ctrl-Up", mac : "Command-Up"}, exec : function(editor9) {
		findFoldImpl(editor9,false,false);
	}},"Previous fold region");
	add({ name : "selectNextFoldRegion", bindKey : { win : "Ctrl-Shift-Down", mac : "Command-Shift-Down"}, exec : function(editor10) {
		findFoldImpl(editor10,true,true);
	}});
	add({ name : "selectPreviousFoldRegion", bindKey : { win : "Ctrl-Shift-Up", mac : "Command-Shift-Up"}, exec : function(editor11) {
		findFoldImpl(editor11,false,true);
	}});
	commands.removeCommand("gotoline");
	add({ name : "gotoline", bindKey : { win : "Ctrl-G", mac : "Command-G"}, exec : function(editor12) {
		ace.config.loadModule("ace/ext/searchbox",function(e) {
			ace_AceGotoLine.run(editor12);
		});
	}},"Go to line...");
	show("showSettingsMenu","Code editor preferences");
};
var ace_AceCtxMenu = function() {
	this.menu = new Electron_Menu();
};
$hxClasses["ace.AceCtxMenu"] = ace_AceCtxMenu;
ace_AceCtxMenu.__name__ = "ace.AceCtxMenu";
ace_AceCtxMenu.initMac = function(editor) {
	if(Electron_API == null || !electron_FileWrap.isMac) {
		return;
	}
	var menu = new Electron_Menu();
	electron_MenuFallback.appendOpt(menu,{ label : "Edit", submenu : editor.contextMenu.menu});
	Electron_Menu.setApplicationMenu(menu);
};
ace_AceCtxMenu.prototype = {
	bind: function(editor) {
		var _gthis = this;
		this.editor = editor;
		editor.contextMenu = this;
		var pos;
		var tk;
		var commandAccels = Object.create(null);
		var _g = 0;
		var _g1 = Reflect.fields(editor.commands.commandKeyBinding);
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			var cmd = editor.commands.commandKeyBinding[k];
			k = k.charAt(0).toUpperCase() + k.substring(1);
			var what = /-(\w)/g;
			k = k.replace(what,function(_,c) {
				return "+" + c.toUpperCase();
			});
			commandAccels[cmd.name] = k;
		}
		var cmdItem = function(cmd1,label) {
			var item = new Electron_MenuItem({ accelerator : commandAccels[cmd1], label : label, click : function() {
				editor.execCommand(cmd1);
			}});
			item.aceCommand = cmd1;
			return item;
		};
		var edit = this.editMenu = new Electron_Menu();
		edit.append(cmdItem("duplicateSelection","Duplicate selection"));
		electron_MenuFallback.appendOpt(this.menu,{ type : "submenu", label : "Edit", submenu : edit});
		var search = this.searchMenu = new Electron_Menu();
		search.append(cmdItem("find","Quick find"));
		search.append(cmdItem("replace","Find and replace..."));
		electron_MenuFallback.appendOpt(search,{ label : "Global find and replace...", accelerator : "CommandOrControl+Shift+F", click : function() {
			ui_GlobalSearch.toggle();
		}});
		search.append(cmdItem("gotoline","Goto line..."));
		search.append(cmdItem("gotoPreviousFoldRegion","Goto previous fold"));
		search.append(cmdItem("gotoNextFoldRegion","Goto next fold"));
		electron_MenuFallback.appendOpt(this.menu,{ type : "submenu", label : "Search", submenu : search});
		this.menu.append(new Electron_MenuItem({ type : "separator"}));
		electron_MenuFallback.appendOpt(this.menu,{ label : "Open definition", accelerator : "F1", click : function() {
			ui_OpenDeclaration.proc(editor.getSession(),pos,tk);
		}});
		electron_MenuFallback.appendOpt(this.menu,{ label : "Find references", accelerator : "Shift+F1", click : function() {
			if(tk != null) {
				ui_GlobalSearch.findReferences(tk.value);
			}
		}});
		this.menu.append(new Electron_MenuItem({ type : "separator"}));
		var undo = cmdItem("undo","Undo");
		this.menu.append(undo);
		var redo = cmdItem("redo","Redo");
		this.menu.append(redo);
		if(Electron_API != null) {
			this.menu.append(new Electron_MenuItem({ type : "separator"}));
			electron_MenuFallback.appendOpt(this.menu,{ label : "Cut", accelerator : "CommandOrControl+X", click : function() {
				if(!editor.selection.isEmpty()) {
					Electron_API.clipboard.writeText(editor.getSelectedText());
				}
				editor.execCommand("cut");
			}});
			electron_MenuFallback.appendOpt(this.menu,{ label : "Copy", accelerator : "CommandOrControl+C", click : function() {
				if(!editor.selection.isEmpty()) {
					Electron_API.clipboard.writeText(editor.getSelectedText());
				}
				editor.execCommand("copy");
			}});
			electron_MenuFallback.appendOpt(this.menu,{ label : "Paste", accelerator : "CommandOrControl+V", click : function() {
				var tmp = Electron_API.clipboard.readText();
				editor.execCommand("paste",tmp);
			}});
		}
		this.menu.append(new Electron_MenuItem({ type : "separator"}));
		this.menu.append(cmdItem("selectall","Select all"));
		editor.container.addEventListener("contextmenu",function(ev) {
			pos = editor.getCursorPosition();
			tk = editor.getSession().getTokenAt(pos.row,pos.column);
			var um = editor.getSession().getUndoManager();
			undo.enabled = um.hasUndo();
			redo.enabled = um.hasRedo();
			var _this = _gthis.menu;
			electron_MenuFallback.contextEvent = ev;
			_this.popup(Electron_API != null ? Electron_API.remote.getCurrentWindow() : null,{ async : true});
			return false;
		});
	}
	,__class__: ace_AceCtxMenu
};
var ace_extern_AceHighlight = function() {
	this.editor = editors_EditCode.currentNew;
};
$hxClasses["ace.extern.AceHighlight"] = ace_extern_AceHighlight;
ace_extern_AceHighlight.__name__ = "ace.extern.AceHighlight";
ace_extern_AceHighlight.__super__ = AceHighlightImpl;
ace_extern_AceHighlight.prototype = $extend(AceHighlightImpl.prototype,{
	__class__: ace_extern_AceHighlight
});
var ace_AceGmlHighlight = $hx_exports["AceGmlHighlight"] = function() {
	ace_extern_AceHighlight.call(this);
	this.$rules = ace_AceGmlHighlight.makeRules(editors_EditCode.currentNew);
	this.normalizeRules();
};
$hxClasses["ace.AceGmlHighlight"] = ace_AceGmlHighlight;
ace_AceGmlHighlight.__name__ = "ace.AceGmlHighlight";
ace_AceGmlHighlight.makeRules = function(editor,version) {
	if(version == null) {
		version = gml_GmlAPI.version;
	}
	var fakeMultiline = false;
	var fieldDef = "localfield";
	if(((editor.kind) instanceof file_kind_gml_KGmlSearchResults)) {
		fakeMultiline = true;
	}
	if(((editor.kind) instanceof file_kind_misc_KMarkdown)) {
		fieldDef = "md-pre-gml";
	}
	var rwnext = function(ruleToCopy,newNext) {
		return { token : ruleToCopy.token, regex : ruleToCopy.regex, next : newNext};
	};
	var genIdent = function(mf) {
		var def = mf ? "identifier" : fieldDef;
		return { regex : "[a-zA-Z_][a-zA-Z0-9_]*\\b", onMatch : function(value,state,stack,line,row) {
			var type;
			if(row != null) {
				var scope = editor.session.gmlScopes.get(row);
				if(scope != null) {
					var kind = null;
					var lambdas = editor.lambdas[scope];
					if(lambdas != null) {
						kind = lambdas.kind[value];
					}
					if(kind == null) {
						if(!mf) {
							var locals = editor.locals[scope];
							if(locals != null) {
								kind = locals.kind[value];
							}
						}
						if(kind == null) {
							var imports = editor.imports[scope];
							if(imports != null) {
								kind = imports.kind[value];
							}
						}
					}
					type = kind;
				} else {
					type = null;
				}
			} else {
				type = null;
			}
			if(type == null) {
				type = ((((gml_GmlAPI.gmlKind[value] || gml_GmlAPI.extKind[value]) || gml_GmlAPI.stdKind[value]) || parsers_GmlExtCoroutines.keywordMap[value]) || def);
			}
			return [tools_HighlightTools.rtk(type,value)];
		}};
	};
	var rIdentLocal = genIdent(false);
	var rIdentLocalMF = genIdent(true);
	var genIdentPairFunc = function(mf1) {
		var def1 = mf1 ? "identifier" : fieldDef;
		return function(value1,state1,stack1,line1,row1) {
			var values = this.splitRegex.exec(value1);
			var object = values[1];
			var field = values[5];
			var objType;
			var fdType;
			if(object == "global") {
				objType = "keyword";
				fdType = "globalfield";
			} else {
				objType = null;
				fdType = null;
				var en;
				if(row1 != null) {
					var scope1 = editor.session.gmlScopes.get(row1);
					if(scope1 != null) {
						var imp = editor.imports[scope1];
						var ns;
						if(imp != null) {
							ns = imp.namespaces[object];
							if(ns != null) {
								objType = "namespace";
								fdType = (ns.kind[field] || "identifier");
							} else {
								var e1 = imp.longenEnum[object];
								if(e1 != null) {
									en = gml_GmlAPI.gmlEnums[e1];
									if(en != null) {
										objType = "enum";
										fdType = en.items[field] ? "enumfield" : "enumerror";
									}
								}
							}
						}
						if(objType == null) {
							var kind1 = null;
							var lambdas1 = editor.lambdas[scope1];
							if(lambdas1 != null) {
								kind1 = lambdas1.kind[object];
							}
							if(kind1 == null) {
								if(!mf1) {
									var locals1 = editor.locals[scope1];
									if(locals1 != null) {
										kind1 = locals1.kind[object];
									}
								}
								if(kind1 == null) {
									var imports1 = editor.imports[scope1];
									if(imports1 != null) {
										kind1 = imports1.kind[object];
									}
								}
							}
							objType = kind1;
							if((objType == "local" || objType == "sublocal") && imp != null) {
								var lt = imp.localTypes[object];
								ns = imp.namespaces[lt];
								if(ns != null) {
									fdType = (ns.kind[field] || "typeerror");
								} else {
									en = gml_GmlAPI.gmlEnums[lt];
									if(en != null) {
										fdType = en.items[field] ? "enumfield" : "enumerror";
									} else {
										fdType = ((((gml_GmlAPI.gmlKind[field] || gml_GmlAPI.extKind[field]) || gml_GmlAPI.stdKind[field]) || parsers_GmlExtCoroutines.keywordMap[field]) || "field");
									}
								}
							}
						}
					}
				}
				if(objType == null) {
					en = gml_GmlAPI.gmlEnums[object];
					if(en != null) {
						objType = "enum";
						fdType = en.items[field] ? "enumfield" : "enumerror";
					} else {
						objType = ((((gml_GmlAPI.gmlKind[object] || gml_GmlAPI.extKind[object]) || gml_GmlAPI.stdKind[object]) || parsers_GmlExtCoroutines.keywordMap[object]) || def1);
						fdType = ((((gml_GmlAPI.gmlKind[field] || gml_GmlAPI.extKind[field]) || gml_GmlAPI.stdKind[field]) || parsers_GmlExtCoroutines.keywordMap[field]) || "field");
					}
				} else if(fdType == null) {
					fdType = ((((gml_GmlAPI.gmlKind[field] || gml_GmlAPI.extKind[field]) || gml_GmlAPI.stdKind[field]) || parsers_GmlExtCoroutines.keywordMap[field]) || "field");
				}
			}
			var tokens = [tools_HighlightTools.rtk(objType,object)];
			if(values[2] != "") {
				tokens.push(tools_HighlightTools.rtk("text",values[2]));
			}
			tokens.push(tools_HighlightTools.rtk("punctuation.operator",values[3]));
			if(values[4] != "") {
				tokens.push(tools_HighlightTools.rtk("text",values[4]));
			}
			tokens.push(tools_HighlightTools.rtk(fdType,field));
			return tokens;
		};
	};
	var genIdentPair = function(mf2) {
		return { regex : "([a-zA-Z_][a-zA-Z0-9_]*)(\\s*)(\\.)(\\s*)([a-zA-Z_][a-zA-Z0-9_]*|)", onMatch : genIdentPairFunc(mf2)};
	};
	var rIdentPair = genIdentPair(false);
	var rIdentPairMF = genIdentPair(true);
	var mtField = function(_,field1) {
		return ["punctuation.operator","text",((((gml_GmlAPI.gmlKind[field1] || gml_GmlAPI.extKind[field1]) || gml_GmlAPI.stdKind[field1]) || parsers_GmlExtCoroutines.keywordMap[field1]) || "field")];
	};
	var mtEventHead = function(def2,name,col,kind2,label) {
		var kindToken;
		if(kind2 != null) {
			var kc = kind2.charCodeAt(0);
			if(kc >= 48 && kc <= 57) {
				kindToken = "numeric";
			} else {
				kindToken = ((((gml_GmlAPI.gmlKind[kind2] || gml_GmlAPI.extKind[kind2]) || gml_GmlAPI.stdKind[kind2]) || parsers_GmlExtCoroutines.keywordMap[kind2]) || "identifier");
			}
		} else {
			kindToken = "identifier";
		}
		return ["preproc.event","eventname","punctuation.operator",kindToken,"eventtext"];
	};
	var mtIdent = function(ident) {
		return ((((gml_GmlAPI.gmlKind[ident] || gml_GmlAPI.extKind[ident]) || gml_GmlAPI.stdKind[ident]) || parsers_GmlExtCoroutines.keywordMap[ident]) || fieldDef);
	};
	var rPragma_call = { regex : "(gml_pragma)(\\s*)(\\()(\\s*)" + "(\"global\"|'global')(\\s*)(,)(\\s*)(@?)(\"|')", onMatch : function(value2,state2,stack2,line2) {
		var values1 = this.splitRegex.exec(value2);
		stack2.push(state2);
		this.nextState = values1[10] == "\"" ? "gml.pragma.dq" : "gml.pragma.sq";
		return [tools_HighlightTools.rtk("function",values1[1]),tools_HighlightTools.rtk("text",values1[2]),tools_HighlightTools.rtk("paren.lparen",values1[3]),tools_HighlightTools.rtk("text",values1[4]),tools_HighlightTools.rtk("string",values1[5]),tools_HighlightTools.rtk("text",values1[6]),tools_HighlightTools.rtk("punctuation.operator",values1[7]),tools_HighlightTools.rtk("text",values1[8]),tools_HighlightTools.rtk("punctuation.operator",values1[9]),tools_HighlightTools.rtk("string",values1[10])];
	}, next : function(current,stack3) {
		if(current != "start" || stack3.length > 0) {
			stack3.unshift(this.nextState,current);
		}
		return this.nextState;
	}};
	var rDefine = tools_HighlightTools.rule(["preproc.define","scriptname"],"^(#define[ \t]+)(\\w+)",null);
	var rTarget = tools_HighlightTools.rule(["preproc.target"],"^(#target[ \t]+)",null);
	var rAction = tools_HighlightTools.rule(["preproc.action","actionname"],"^(#action\\b[ \t]*)(\\w*)",null);
	var rKeyEvent = tools_HighlightTools.rule(["preproc.event","eventname","punctuation.operator","eventkeyname","eventtext"],"^(#event[ \t]+)(keyboard|keypress|keyrelease)(\\s*:\\s*)(\\w+)(.*)",null);
	var rEvent = tools_HighlightTools.rule(mtEventHead,"^(#event[ \t]+)(\\w+)(?:(:)(\\w+)?)?((?:\\b.+)?)",null);
	var rMoment = tools_HighlightTools.rule(["preproc.moment","momenttime","momentname"],"^(#moment[ \t]+)(\\d+)(.*)",null);
	var rSection = tools_HighlightTools.rule(["preproc.section","sectionname"],"^(#section[ \t]*)(.*)",null);
	var commentDocLineType = "comment.doc.line";
	var rBase = tools_HighlightTools.rpush(function(s) {
		commentDocLineType = "comment.doc.line.startswith_" + s;
		return commentDocLineType;
	},"///(\\S+)","gml.comment.doc.line");
	var rBase1 = tools_HighlightTools.rpush(function(_1) {
		commentDocLineType = "comment.doc.line";
		return "comment.doc.line";
	},"///","gml.comment.doc.line");
	var rBase2 = [tools_HighlightTools.rule(["comment","comment.preproc.region","comment.regionname"],"(//)(#(?:end)?region[ \t]*)(.*)$",null),tools_HighlightTools.rule("comment.doc.line","///$",null),tools_HighlightTools.rule(function(s1) {
		return "comment.doc.line.startswith_" + s1;
	},"///(\\S+)(?:(?!@\\[).)*$",null),rBase,rBase1,tools_HighlightTools.rule("comment.line","//$",null),tools_HighlightTools.rpush("comment.line","//","gml.comment.line"),fakeMultiline ? tools_HighlightTools.rule(["comment","comment.preproc","comment"],"(/\\*(?://)?\\s*)(#gml)(.*?(?:\\*/|$))",null) : tools_HighlightTools.rpush(["comment","comment.preproc"],"(/\\*(?://)?\\s*)(#gml)","gml.comment.gml"),fakeMultiline ? tools_HighlightTools.rule("comment.doc","/\\*\\*.*?(?:\\*/|$)",null) : tools_HighlightTools.rpush("comment.doc","/\\*\\*","gml.comment.doc"),fakeMultiline ? tools_HighlightTools.rule("comment","/\\*.*?(?:\\*/|$)",null) : tools_HighlightTools.rpush("comment","/\\*","gml.comment"),rDefine,rAction,rKeyEvent,rEvent,rMoment,rTarget,tools_HighlightTools.rpushPairs(["#macro","preproc.macro","\\s+","text","\\w+","configname","\\s*","text",":","punctuation.operator","\\s*","text","\\w+","macroname"],"gml.mfunc"),tools_HighlightTools.rpushPairs(["#macro","preproc.macro","\\s+","text","\\w+","macroname"],"gml.mfunc"),tools_HighlightTools.rule("preproc.macro","#macro\\b",null),tools_HighlightTools.rpushPairs(["#mfunc","preproc.mfunc","\\s+","text","\\w+","macroname","\\s*","text","\\(","paren.lparen"],"gml.mfunc.decl"),tools_HighlightTools.rule(["preproc.mfunc","text","macroname"],"(#mfunc)(\\s+)(\\w+)",null),tools_HighlightTools.rule("preproc.mfunc","#mfunc\\b",null),tools_HighlightTools.rulePairs(["#import\\s+","preproc.import","\"[^\"]*\"|'[^']*'","string.importpath"]),tools_HighlightTools.rpush("preproc.import","#import\\b","gml.import"),tools_HighlightTools.rule("preproc.args","#args\\b",null),tools_HighlightTools.rule(["preproc.hyper","comment.hyper"],"(#hyper\\b)(.*)",null),tools_HighlightTools.rule(["preproc.lambda","text","scriptname"],"(#(?:lambda|lamdef)\\b)([ \t]*)(\\w*)",null),tools_HighlightTools.rule("preproc.gmcr","#gmcr\\b",null)];
	if(version == 2) {
		rBase2.push(tools_HighlightTools.rule(["preproc.region","regionname"],"(#region[ \t]*)(.*)",null));
		rBase2.push(tools_HighlightTools.rule(["preproc.region","regionname"],"(#endregion[ \t]*)(.*)",null));
	}
	rBase2.push(rSection);
	if(version == 2) {
		rBase2.push(tools_HighlightTools.rpush("string","@\"","gml.string.dq"));
		rBase2.push(tools_HighlightTools.rpush("string","@'","gml.string.sq"));
		rBase2.push(tools_HighlightTools.rpush("string","\"","gml.string.esc"));
	} else {
		rBase2.push(tools_HighlightTools.rpush("string","\"","gml.string.dq"));
		rBase2.push(tools_HighlightTools.rpush("string","'","gml.string.sq"));
	}
	rBase2.push(tools_HighlightTools.rpush("string","`","gml.string.tpl"));
	var rBase3 = tools_HighlightTools.rule(function(goto,_2,label1) {
		if(parsers_GmlExtCoroutines.enabled) {
			return ["keyword","text","flowlabel"];
		} else {
			return [mtIdent(goto),"text",mtIdent(label1)];
		}
	},"(goto|label)(\\s+)(\\w+)",null);
	rBase2 = rBase2.concat([tools_HighlightTools.rule("numeric","(?:\\$|0x)[0-9a-fA-F]+\\b",null),tools_HighlightTools.rule("numeric","[+-]?\\d+(?:\\.\\d*)?\\b",null),tools_HighlightTools.rule("constant.boolean","(?:true|false)\\b",null),tools_HighlightTools.rpush(["keyword","text","enum"],"(enum)(\\s+)(\\w+)","gml.enum"),rBase3,rPragma_call,rIdentPair,rIdentLocal,tools_HighlightTools.rule(mtField,"(\\.)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)",null),tools_HighlightTools.rule(mtIdent,"[a-zA-Z_][a-zA-Z0-9_]*\\b",null),tools_HighlightTools.rule("operator","==",null),tools_HighlightTools.rule("set.operator","=|\\+=|\\-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=",null),tools_HighlightTools.rule("operator","!|%|&|@|\\*|\\-\\-|\\-|\\+\\+|\\+|~|!=|<=|>=|<>|<|>|!|&&|\\|\\|",null),tools_HighlightTools.rule("punctuation.operator","\\?|:|,|;|\\.",null),tools_HighlightTools.rule("curly.paren.lparen","\\{",null),tools_HighlightTools.rule("curly.paren.rparen","\\}",null),tools_HighlightTools.rule("square.paren.lparen","\\[",null),tools_HighlightTools.rule("square.paren.rparen","\\]",null),tools_HighlightTools.rule("paren.lparen","\\(",null),tools_HighlightTools.rule("paren.rparen","\\)",null),tools_HighlightTools.rdef("text")]);
	var rEnum = [tools_HighlightTools.rpush(["enumfield","text","set.operator"],"(\\w+)(\\s*)(=)","gml.enumvalue"),tools_HighlightTools.rule(["enumfield","text","punctuation.operator"],"(\\w+)(\\s*)(,)",null),tools_HighlightTools.rule("comment","//.*$",null),tools_HighlightTools.rule(["enumfield","text"],"(\\w+)(\\s*)$",null),tools_HighlightTools.rule(["enumfield","text","curly.paren.rparen"],"(\\w+)(\\s*)(\\})","pop"),tools_HighlightTools.rule("curly.paren.rparen","\\}","pop")].concat(rBase2);
	if(fakeMultiline) {
		rEnum.unshift(tools_HighlightTools.rule("text","$","pop"));
	}
	var rEnumValue = tools_HighlightTools.rule("curly.paren.rparen","\\}",function(currentState,stack4) {
		stack4.shift();
		stack4.shift();
		if(stack4.length > 0) {
			return stack4.shift();
		} else {
			return "start";
		}
	});
	var rEnumValue1 = [tools_HighlightTools.rule("punctuation.operator",",","pop"),rEnumValue].concat(rBase2);
	var rCommentPop = [rwnext(rDefine,"pop"),rwnext(rAction,"pop"),rwnext(rSection,"pop"),rwnext(rMoment,"pop"),rwnext(rKeyEvent,"pop"),rwnext(rEvent,"pop"),rwnext(rTarget,"pop")];
	var rComment = [tools_HighlightTools.rule("comment.link","@\\[" + "[^\\[]*" + "\\]")];
	var rPragma_sq = [tools_HighlightTools.rule("string","'","pop")].concat(rBase2);
	var rPragma_dq = [tools_HighlightTools.rule("string","\"","pop")].concat(rBase2);
	var rString_sq = [tools_HighlightTools.rule("string",".*?[']","pop"),tools_HighlightTools.rule("string",".+",null)];
	var rString_dq = [tools_HighlightTools.rule("string",".*?[\"]","pop"),tools_HighlightTools.rule("string",".+",null)];
	var rString_tpl = [tools_HighlightTools.rpush(["string","curly.paren.lparen"],"(\\$)(\\{)","gml.tpl"),tools_HighlightTools.rule("string","[`]","pop"),tools_HighlightTools.rdef("string")];
	if(fakeMultiline) {
		var eol = tools_HighlightTools.rule("string",".*?$","pop");
		rPragma_sq.unshift(eol);
		rPragma_dq.unshift(eol);
		rString_sq.splice(1,0,eol);
		rString_dq.splice(1,0,eol);
		rString_tpl.splice(1,0,eol);
	}
	var rMFunc_decl = [tools_HighlightTools.rule("identifier","(?:[a-zA-Z_]\\w*|\\.\\.\\.)",null),tools_HighlightTools.rule("punctuation.operator",",",null),tools_HighlightTools.rule("text","$","pop"),tools_HighlightTools.rule("paren.rparen","\\)","gml.mfunc")];
	var rMFuncEOL_pop = function(current1,stack5) {
		stack5.shift();
		return (stack5.shift() || "start");
	};
	var rMFuncEOL = null;
	rMFuncEOL = { regex : "$", onMatch : function(value3,currentState1,stack6,line3) {
		var rMFuncEOL1 = line3.endsWith("\\") ? null : rMFuncEOL_pop;
		rMFuncEOL.next = rMFuncEOL1;
		return "text";
	}};
	var rMFunc = [rMFuncEOL,tools_HighlightTools.rule(["operator","constant"],parsers_GmlExtMFunc.magicRegex)].concat(rBase2);
	tools_NativeArray.replaceOne(rMFunc,rIdentLocal,rIdentLocalMF);
	tools_NativeArray.replaceOne(rMFunc,rIdentPair,rIdentPairMF);
	var rules = [tools_HighlightTools.rule("keyword","(in|as)\\b"),tools_HighlightTools.rule("impfield","@\\w+"),tools_HighlightTools.rule("text","[ \t]*$","pop")].concat(rBase2);
	var rules1 = [tools_HighlightTools.rule("string.escape","\\\\(?:" + "x[0-9a-fA-F]{2}|" + "u[0-9a-fA-F]{4}|" + ".)"),{ token : "string", regex : "\\\\$", consumeLineEnd : true},tools_HighlightTools.rule("string","\"|$","pop"),tools_HighlightTools.rdef("string")];
	var rules2 = [tools_HighlightTools.rpush("curly.paren.lparen","\\{","gml.tpl"),tools_HighlightTools.rule("curly.paren.rparen","\\}","pop")].concat(rBase2);
	var rules3 = rComment.concat([tools_HighlightTools.rule("comment.line","$","pop"),tools_HighlightTools.rdef("comment.line")]);
	var rules4 = rComment.concat([tools_HighlightTools.rule(function(_3) {
		return commentDocLineType;
	},".*$","pop"),tools_HighlightTools.rdef("comment.doc.line")]);
	var rules5 = tools_HighlightTools.rule("comment",".*?\\*/","pop");
	var rules6 = tools_HighlightTools.rule("comment",".+",null);
	var rules7 = rComment.concat(rCommentPop).concat([rules5,rules6]);
	var rules8 = tools_HighlightTools.rule("comment.doc",".*?\\*/","pop");
	var rules9 = tools_HighlightTools.rule("comment.doc",".+",null);
	return { "start" : rBase2, "gml.enum" : rEnum, "gml.enumvalue" : rEnumValue1, "gml.pragma.sq" : rPragma_sq, "gml.pragma.dq" : rPragma_dq, "gml.import" : rules, "gml.string.esc" : rules1, "gml.string.sq" : rString_sq, "gml.string.dq" : rString_dq, "gml.string.tpl" : rString_tpl, "gml.tpl" : rules2, "gml.mfunc.decl" : rMFunc_decl, "gml.mfunc" : rMFunc, "gml.comment.line" : rules3, "gml.comment.doc.line" : rules4, "gml.comment" : rules7, "gml.comment.doc" : rComment.concat(rCommentPop).concat([rules8,rules9]), "gml.comment.gml" : rCommentPop.concat([tools_HighlightTools.rule("comment",".*?\\*/","pop")]).concat(rBase2)};
};
ace_AceGmlHighlight.define = function($require,exports,module) {
	var oop = $require("../lib/oop");
	var TextHighlightRules = $require("./text_highlight_rules").TextHighlightRules;
	oop.inherits(ace_AceGmlHighlight,TextHighlightRules);
	exports.GmlHighlightRules = ace_AceGmlHighlight;
};
ace_AceGmlHighlight.init = function() {
	ace.define("ace/mode/gml_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/doc_comment_highlight_rules","ace/mode/text_highlight_rules"],ace_AceGmlHighlight.define);
};
ace_AceGmlHighlight.__super__ = ace_extern_AceHighlight;
ace_AceGmlHighlight.prototype = $extend(ace_extern_AceHighlight.prototype,{
	__class__: ace_AceGmlHighlight
});
var ace_AceGotoLine = function(editor) {
	var _gthis = this;
	this.editor = editor;
	var div = document.createElement("div");
	div.innerHTML = "<div class=\"ace_search right\">" + "<span action=\"hide\" class=\"ace_searchbtn_close\"></span>" + "<div class=\"ace_search_form\">" + "<input class=\"ace_search_field\" placeholder=\"Go to line, place, or place:line\" spellcheck=\"false\"></input>" + "</div>" + "</div>";
	this.element = div.firstElementChild;
	this.input = this.element.querySelector(".ace_search_field");
	this.closeButton = this.element.querySelector(".ace_searchbtn_close");
	editor.renderer.scroller.appendChild(this.element);
	var event = ace.require("ace/lib/event");
	event.addListener(this.element,"mousedown",function(e) {
		window.setTimeout(function() {
			_gthis.input.focus();
		});
		e.stopPropagation();
	});
	event.addListener(this.element,"click",function(e1) {
		if(e1.target == _gthis.closeButton) {
			_gthis.hide();
		}
		e1.stopPropagation();
	});
	var keyUtil = ace.require("ace/lib/keys");
	event.addCommandKeyListener(this.element,function(e2,hashId,keyCode) {
		var keyString = keyUtil.keyCodeToString(keyCode);
		var command = _gthis.keyHandler.findKeyCommand(hashId,keyString);
		if(command != null && command.exec != null) {
			command.exec(_gthis);
			event.stopEvent(e2);
		}
	});
	ace_AceGotoLine.HashHandler = ace.require("ace/keyboard/hash_handler").HashHandler;
	this.keyHandler = new ace_AceGotoLine.HashHandler();
	this.keyHandler.bindKeys({ "Esc" : function(q) {
		window.setTimeout(function() {
			q.hide();
		});
	}, "Return" : function(q1) {
		var val = q1.input.value;
		var row = Std.parseInt(q1.input.value);
		var valColon = val.indexOf(":");
		if(row == null || valColon >= 0) {
			var nav;
			if(valColon >= 0) {
				nav = { };
				var def = val.substring(0,valColon);
				if(def != "") {
					nav.def = def;
				}
				var ctx = val.substring(valColon + 1);
				row = Std.parseInt(ctx);
				if(row != null) {
					nav.pos = { row : row - 1, column : 0};
				} else {
					valColon = ctx.indexOf(":");
					if(valColon >= 0) {
						nav.ctx = ctx.substring(0,valColon);
						row = Std.parseInt(ctx.substring(valColon + 1));
						if(row != null) {
							nav.pos = { row : row - 1, column : 0};
						}
					} else {
						nav.ctx = ctx;
					}
				}
			} else {
				nav = { def : val};
			}
			if(!gml_file_GmlFile.current.navigate(nav)) {
				return;
			}
		} else {
			--row;
			if(window.gmlResetOnDefine) {
				var ctr = q1.editor.statusBar.contextRow;
				if(ctr >= 0) {
					row += ctr + 1;
				}
			}
			editor.gotoLine(row + 1,0);
		}
		window.setTimeout(function() {
			q1.hide();
		});
	}});
};
$hxClasses["ace.AceGotoLine"] = ace_AceGotoLine;
ace_AceGotoLine.__name__ = "ace.AceGotoLine";
ace_AceGotoLine.run = function(editor) {
	if(ace_AceGotoLine.inst == null) {
		ace_AceGotoLine.inst = new ace_AceGotoLine(editor);
	}
	ace_AceGotoLine.inst.show();
};
ace_AceGotoLine.prototype = {
	hide: function() {
		this.element.style.display = "none";
		this.editor.keyBinding.removeKeyboardHandler(this.keyHandler);
		this.editor.focus();
	}
	,show: function() {
		this.element.style.display = "";
		this.input.value = "";
		this.input.focus();
		this.input.select();
		this.editor.keyBinding.addKeyboardHandler(this.keyHandler);
	}
	,__class__: ace_AceGotoLine
};
var ace_AceHxHighlight = $hx_exports["AceHxHighlight"] = function() {
	ace_extern_AceHighlight.call(this);
	this.$rules = ace_AceHxHighlight.makeRules(this);
	this.normalizeRules();
};
$hxClasses["ace.AceHxHighlight"] = ace_AceHxHighlight;
ace_AceHxHighlight.__name__ = "ace.AceHxHighlight";
ace_AceHxHighlight.makeRules = function(hl) {
	var kwmapper = hl.createKeywordMapper({ "keyword" : "package|import|using" + "|class|enum|abstract|typedef|interface|extends|implements" + "|inline|extern|override|private|public|static" + "|function|var|new|super|this|trace" + "|if|else|for|in|while|do|switch|case|default|break|continue" + "|return|try|throw|catch|cast|untyped", "constant.boolean" : "true|false", "constant" : "null"},"identifier");
	var base = [tools_HighlightTools.rule("comment.line.doc","///.*$",null),tools_HighlightTools.rule("comment.line","//.*$",null),tools_HighlightTools.rpush("comment.doc","/\\*\\*","hx.comment.doc"),tools_HighlightTools.rpush("comment","/\\*","hx.comment"),tools_HighlightTools.rule("numeric","0[xX][0-9a-fA-F]+\\b",null),tools_HighlightTools.rule("numeric","[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b",null),tools_HighlightTools.rule("string.regexp","[/](?:(?:\\[(?:\\\\]|[^\\]])+\\])|(?:\\\\/|[^\\]/]))*[/]\\w*\\s*(?=[).,;]|$)"),tools_HighlightTools.rule("string","[\"](?:(?:\\\\.)|(?:[^\"\\\\]))*?(?:[\"]|$)"),tools_HighlightTools.rule(kwmapper,"\\w+",null),tools_HighlightTools.rpush("string","'","hx.string"),tools_HighlightTools.rule("set.operator","=|\\+=|\\-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=",null),tools_HighlightTools.rule("operator","!|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|==|!=|<=|>=|<|>|!|&&|\\|\\|",null),tools_HighlightTools.rule("punctuation.operator","\\?|:|,|;|\\.",null),tools_HighlightTools.rule("curly.paren.lparen","\\{",null),tools_HighlightTools.rule("curly.paren.rparen","\\}",null),tools_HighlightTools.rule("square.paren.lparen","\\[",null),tools_HighlightTools.rule("square.paren.rparen","\\]",null),tools_HighlightTools.rule("paren.lparen","\\(",null),tools_HighlightTools.rule("paren.rparen","\\)",null),tools_HighlightTools.rule("text","\\s+",null)];
	return { "start" : base, "hx.comment.doc" : [tools_HighlightTools.rule("comment.meta","@(?:" + "author|param|return|throws|see|link|since" + ")"),tools_HighlightTools.rule("comment.doc","\\*/","pop"),tools_HighlightTools.rdef("comment.doc")], "hx.comment" : [tools_HighlightTools.rule("comment","\\*/","pop"),tools_HighlightTools.rdef("comment")], "hx.string" : [tools_HighlightTools.rpush(["string","curly.paren.lparen"],"(\\$)(\\{)","hx.string.code"),tools_HighlightTools.rule("string.escape","\\\\(?:" + "x[0-9a-fA-F]{2}|" + "u[0-9a-fA-F]{4}|" + ".)"),tools_HighlightTools.rule("string","'","pop"),tools_HighlightTools.rdef("string")], "hx.string.code" : [tools_HighlightTools.rpush("curly.paren.lparen","\\{","hx.string.code"),tools_HighlightTools.rule("curly.paren.rparen","\\}","pop")].concat(base)};
};
ace_AceHxHighlight.define = function($require,exports,module) {
	var oop = $require("../lib/oop");
	var TextHighlightRules = $require("./text_highlight_rules").TextHighlightRules;
	oop.inherits(ace_AceHxHighlight,TextHighlightRules);
	exports.HaxeHighlightRules = ace_AceHxHighlight;
};
ace_AceHxHighlight.init = function() {
	ace.define("ace/mode/haxe_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/doc_comment_highlight_rules","ace/mode/text_highlight_rules"],ace_AceHxHighlight.define);
};
ace_AceHxHighlight.__super__ = ace_extern_AceHighlight;
ace_AceHxHighlight.prototype = $extend(ace_extern_AceHighlight.prototype,{
	__class__: ace_AceHxHighlight
});
var ace_AceMdHighlight = $hx_exports["AceMdHighlight"] = function() {
	var _gthis = this;
	ace_extern_AceHighlight.call(this);
	var editor = editors_EditCode.currentNew;
	var dmd = ((editor.kind) instanceof file_kind_misc_KMarkdown) && editor.kind.isDocMd;
	var rEsc = tools_HighlightTools.rule("md-escape","\\\\(?:.|$)",null);
	var rBase = [];
	var rText = tools_HighlightTools.rule("text","\\s+",null);
	if(dmd) {
		rBase.push(tools_HighlightTools.rpush("md-section-start","#\\[","md.section"));
		rBase.push(tools_HighlightTools.rpush("md-italic","\\b_\\B","md.italic"));
		rBase.push(tools_HighlightTools.rpush("md-bold","\\*","md.bold"));
	} else {
		var tmp = tools_HighlightTools.rulePairs(["^\\s#+\\s*","md-section-prefix",".*$","md-section"]);
		rBase.push(tmp);
		rBase.push(tools_HighlightTools.rpush("md-italic","\\b(?:__|\\*\\*)\\B","md.italic"));
		rBase.push(tools_HighlightTools.rpush("md-bold","\\b(?:_|\\*)\\B","md.bold"));
	}
	rBase.push(tools_HighlightTools.rpush("md-url-start","\\[","md.url"));
	if(dmd) {
		var tmp1 = tools_HighlightTools.rpush(function(_) {
			if(gml_GmlAPI.version == 0) {
				var v = 2;
				if(gml_GmlAPI.version != v) {
					gml_GmlAPI.version = v;
					gml_GmlAPI.init();
				}
				gml_GmlAPI.init();
			}
			return "md-pre-start";
		},"```(?:\\B|gml\\b)","md.gml");
		rBase.push(tmp1);
		rBase.push(tools_HighlightTools.rpush(["md-pre-start","md-url"],"(```\\w*md\\b\\s*)(\\w*)","md.md"));
		rBase.push(tools_HighlightTools.rpush(["md-expr-start","curly.paren.lparen"],"(\\$)(\\{)","md.expr"));
	} else {
		rBase.push(tools_HighlightTools.rpush("md-pre-start","```gml\\b","md.gml"));
	}
	rBase.push(tools_HighlightTools.rpush("md-pre-start","```(?:haxe\\b|exec\\b)","md.hx"));
	rBase.push(tools_HighlightTools.rpush("md-pre-start","```glsl\\b","md.glsl"));
	rBase.push(tools_HighlightTools.rpush("md-pre-start","```hlsl\\b","md.hlsl"));
	rBase.push(tools_HighlightTools.rpush("md-pre-start","```","md.pre"));
	rBase.push(tools_HighlightTools.rpush("md-tt","`","md.tt"));
	var rcct = function(r,d) {
		r = r.concat(rBase);
		r.push(d);
		r.unshift(rEsc);
		return r;
	};
	this.$rules = { };
	this.$rules["start"] = rcct([],rText);
	if(dmd) {
		this.$rules["md.section"] = [tools_HighlightTools.rpush("md-section-start","\\[","md.section"),tools_HighlightTools.rule(["md-section-end","md-href-start"],"(\\])(\\()","md.href"),tools_HighlightTools.rule("md-section-end","(?:\\]|$)","pop"),tools_HighlightTools.rdef("md-section")];
		this.$rules["md.italic"] = rcct([tools_HighlightTools.rule("md-italic","(?:\\B_\\b|$)","pop")],tools_HighlightTools.rdef("md-italic"));
		this.$rules["md.bold"] = rcct([rEsc,tools_HighlightTools.rule("md-bold","(?:\\*|$)","pop")],tools_HighlightTools.rdef("md-bold"));
	} else {
		this.$rules["md.italic"] = rcct([tools_HighlightTools.rule("md-italic","(?:__|\\*\\*)\\b","pop")],tools_HighlightTools.rdef("md-italic"));
		this.$rules["md.bold"] = rcct([rEsc,tools_HighlightTools.rule("md-bold","(?:_|\\*)\\b","pop")],tools_HighlightTools.rdef("md-bold"));
	}
	this.$rules["md.url"] = [rEsc,tools_HighlightTools.rule(["md-url-end","md-href-start"],"(\\])(\\()","md.href"),tools_HighlightTools.rule("md-url-end","(?:\\]|$)","pop"),tools_HighlightTools.rdef("md-url")];
	this.$rules["md.href"] = [rEsc,tools_HighlightTools.rule("md-href-end","(?:\\)|$)","pop"),tools_HighlightTools.rdef("md-href")];
	this.$rules["md.tt"] = [rEsc,tools_HighlightTools.rule("md-tt","(?:`|$)","pop"),tools_HighlightTools.rdef("md-tt")];
	var addBlock = function(substart,def,subset) {
		var start = subset["start"].slice(0);
		start.unshift(tools_HighlightTools.rule("md-pre-end","```","pop"));
		start.pop();
		start.push(tools_HighlightTools.rdef(def));
		var _g = 0;
		var _g1 = Reflect.fields(subset);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != "start") {
				_gthis.$rules[key] = subset[key];
			}
		}
		_gthis.$rules[substart] = start;
	};
	var rHaxe = ace_AceHxHighlight.makeRules(this);
	addBlock("md.gml","md-pre-gml",ace_AceGmlHighlight.makeRules(editor));
	addBlock("md.hx","md-pre-hx",rHaxe);
	addBlock("md.glsl","md-pre-glsl",shaders_ShaderHighlight.makeRules(this,1));
	addBlock("md.hlsl","md-pre-hlsl",shaders_ShaderHighlight.makeRules(this,2));
	if(dmd) {
		this.$rules["md.expr"] = [tools_HighlightTools.rpush("curly.paren.lparen","\\{","md.expr"),tools_HighlightTools.rule("curly.paren.rparen","\\}","pop")].concat(rHaxe["start"]).concat([rText]);
	}
	if(dmd) {
		this.$rules["md.md"] = rcct([tools_HighlightTools.rule("md-pre-end","```","pop")],rText);
	}
	this.$rules["md.pre"] = [rEsc,tools_HighlightTools.rule("md-pre-end","```","pop"),tools_HighlightTools.rdef("md-pre")];
	this.normalizeRules();
};
$hxClasses["ace.AceMdHighlight"] = ace_AceMdHighlight;
ace_AceMdHighlight.__name__ = "ace.AceMdHighlight";
ace_AceMdHighlight.define = function($require,exports,module) {
	var oop = $require("../lib/oop");
	var TextHighlightRules = $require("./text_highlight_rules").TextHighlightRules;
	oop.inherits(ace_AceMdHighlight,TextHighlightRules);
	exports.MarkdownHighlightRules = ace_AceMdHighlight;
};
ace_AceMdHighlight.init = function() {
	ace.define("ace/mode/markdown_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/doc_comment_highlight_rules","ace/mode/text_highlight_rules"],ace_AceMdHighlight.define);
};
ace_AceMdHighlight.__super__ = ace_extern_AceHighlight;
ace_AceMdHighlight.prototype = $extend(ace_extern_AceHighlight.prototype,{
	__class__: ace_AceMdHighlight
});
var ace_AceSessionData = function() { };
$hxClasses["ace.AceSessionData"] = ace_AceSessionData;
ace_AceSessionData.__name__ = "ace.AceSessionData";
ace_AceSessionData.get = function(edit) {
	var session = edit.session;
	var foldLines = [];
	var getFoldsRec = null;
	getFoldsRec = function(out,fold,ofs) {
		var row = ofs + fold.start.row;
		var children = fold.subFolds;
		var i = children.length;
		while(--i >= 0) getFoldsRec(out,children[i],row);
		out.push(row);
	};
	var _g = 0;
	var _g1 = session.getAllFolds();
	while(_g < _g1.length) getFoldsRec(foldLines,_g1[_g++],0);
	return { selection : session.selection.toJSON(), scrollLeft : session.getScrollLeft(), scrollTop : session.getScrollTop(), foldLines : foldLines};
};
ace_AceSessionData.set = function(edit,data) {
	var session = edit.session;
	session.selection.fromJSON(data.selection);
	var _g = 0;
	var _g1 = data.foldLines;
	while(_g < _g1.length) {
		var row = _g1[_g++];
		try {
			session.$toggleFoldWidget(row,{ });
		} catch( _ ) {
		}
	}
	session.setScrollLeft(data.scrollLeft);
	session.setScrollTop(data.scrollTop);
};
ace_AceSessionData.restore = function(edit) {
	var text = window.localStorage.getItem("session:" + edit.file.path);
	if(text == null) {
		return false;
	}
	var data = null;
	try {
		data = JSON.parse(text);
	} catch( _ ) {
		return false;
	}
	if(data == null) {
		return false;
	}
	ace_AceSessionData.set(edit,data);
	return true;
};
ace_AceSessionData.init = function() {
	var ls = window.localStorage;
	var renList = [];
	var remList = [];
	var remTime = new Date().getTime() - 86400000 * ui_Preferences.current.fileSessionTime;
	var _g = 0;
	var _g1 = ls.length;
	while(_g < _g1) {
		var k = ls.key(_g++);
		if(k.startsWith("@session:")) {
			if(k.indexOf("\\") >= 0) {
				renList.push(k);
			} else if(parseFloat(ls.getItem(k)) < remTime) {
				remList.push(k);
				remList.push(k.substring(1));
			}
		}
	}
	var _g2 = 0;
	while(_g2 < remList.length) ls.removeItem(remList[_g2++]);
	var _g3 = 0;
	while(_g3 < renList.length) {
		var renKey = renList[_g3];
		++_g3;
		var renKey1 = renKey.substring(1);
		var v0 = ls.getItem(renKey);
		var v1 = ls.getItem(renKey1);
		ls.removeItem(renKey);
		ls.removeItem(renKey1);
		ls.setItem(StringTools.replace(renKey,"\\","/"),v0);
		ls.setItem(StringTools.replace(renKey1,"\\","/"),v1);
	}
};
var ace_AceSnippets = function() { };
$hxClasses["ace.AceSnippets"] = ace_AceSnippets;
ace_AceSnippets.__name__ = "ace.AceSnippets";
ace_AceSnippets.getText = function(mode) {
	if(Electron_FS.existsSync != null) {
		try {
			return Electron_FS.readFileSync(electron_FileWrap.userPath + "/snippets/" + mode + ".snippets","utf8");
		} catch( _ ) {
		}
	}
	var r = window.localStorage.getItem("ace/snippets/" + mode);
	if(r != null) {
		return r;
	} else {
		return "";
	}
};
ace_AceSnippets.setText = function(mode,text) {
	if(Electron_FS.existsSync != null) {
		Electron_FS.writeFileSync(electron_FileWrap.userPath + "/snippets/" + mode + ".snippets",text);
	} else {
		window.localStorage.setItem("ace/snippets/" + mode,text);
	}
	ace_AceSnippets.reload(mode,text);
};
ace_AceSnippets.reload = function(mode,text) {
	var file = ace_AceSnippets.map[mode];
	if(file != null) {
		try {
			if(text == null) {
				text = ace_AceSnippets.getText(mode);
			}
			file.snippetText = text;
			file.snippets = ace_AceSnippets.manager.parseSnippetFile(text);
			Reflect.deleteField(ace_AceSnippets.manager.snippetMap,mode);
			Reflect.deleteField(ace_AceSnippets.manager.snippetNameMap,mode);
			ace_AceSnippets.manager.register(file.snippets,file.scope);
			return true;
		} catch( x ) {
			console.error("Couldn't refresh snippets:",((x) instanceof js__$Boot_HaxeError) ? x.val : x);
		}
	}
	return false;
};
ace_AceSnippets.init = function() {
	ace_AceSnippets.langTools = ace.require("ace/ext/language_tools");
	ace_AceSnippets.manager = ace.require("ace/snippets").snippetManager;
	var mode = "text";
	ace.define("ace/snippets/" + mode,["require","exports","module"],function($require,exports,module) {
		var file = exports;
		ace_AceSnippets.map[mode] = file;
		file.snippetText = ace_AceSnippets.getText(mode);
		file.scope = mode;
	});
	var mode1 = "gml";
	ace.define("ace/snippets/" + mode1,["require","exports","module"],function(require1,exports1,module1) {
		var file1 = exports1;
		ace_AceSnippets.map[mode1] = file1;
		file1.snippetText = ace_AceSnippets.getText(mode1);
		file1.scope = mode1;
	});
	var mode2 = "gml_search";
	ace.define("ace/snippets/" + mode2,["require","exports","module"],function(require2,exports2,module2) {
		var file2 = exports2;
		ace_AceSnippets.map[mode2] = file2;
		file2.snippetText = ace_AceSnippets.getText(mode2);
		file2.scope = mode2;
	});
	var mode3 = "shader";
	ace.define("ace/snippets/" + mode3,["require","exports","module"],function(require3,exports3,module3) {
		var file3 = exports3;
		ace_AceSnippets.map[mode3] = file3;
		file3.snippetText = ace_AceSnippets.getText(mode3);
		file3.scope = mode3;
	});
	ace_AceSnippets.completer = ace_AceSnippets.langTools.snippetCompleter;
};
var ace_AceStatusBar = function() {
	this.ignoreUntil = window.performance.now();
	this.contextName = null;
	this.contextRow = 0;
	this.statusBar = document.createElement("div");
	this.statusBar.className = "ace_status-bar";
	this.statusSpan = document.createElement("span");
	this.statusSpan.className = "ace_status-hint";
	this.statusSpan.innerHTML = "\r\n\t\t\t<span class=\"status\" style=\"display:none\">?</span>\r\n\t\t\t<span class=\"recording\" style=\"display:none\">REC</span>\r\n\t\t\t<span class=\"select\" style=\"display:none\">(:)</span>\r\n\t\t\t<span class=\"row-label\">Ln:</span>\r\n\t\t\t<span class=\"row\">1</span>\r\n\t\t\t<span class=\"col-label\">Col:</span>\r\n\t\t\t<span class=\"col\">1</span>\r\n\t\t\t<span class=\"ranges\" style=\"display:none\"></span>\r\n\t\t\t<span class=\"context-pre\" style=\"display:none\"></span>\r\n\t\t\t<span class=\"context\" style=\"display:none\"><span class=\"context-txt\"></span></span>\r\n\t\t";
	this.statusBar.appendChild(this.statusSpan);
	this.statusHint = document.createElement("span");
	this.statusHint.className = "ace_status-comp";
	this.statusBar.appendChild(this.statusHint);
};
$hxClasses["ace.AceStatusBar"] = ace_AceStatusBar;
ace_AceStatusBar.__name__ = "ace.AceStatusBar";
ace_AceStatusBar.getDocData = function(ctx) {
	var doc = null;
	var tk = ctx.tk;
	var iter = ctx.iter;
	switch(tk.type) {
	case "asset.script":case "macro.function":
		var d = gml_GmlAPI.gmlDoc;
		ctx.docs = d;
		return d != null;
	case "extfunction":
		var d1 = gml_GmlAPI.extDoc;
		ctx.docs = d1;
		return d1 != null;
	case "function":
		var d2 = gml_GmlAPI.stdDoc;
		ctx.docs = d2;
		return d2 != null;
	case "glsl.function":
		var d3 = shaders_ShaderAPI.glslDoc;
		ctx.docs = d3;
		return d3 != null;
	case "hlsl.function":
		var d4 = shaders_ShaderAPI.hlslDoc;
		ctx.docs = d4;
		return d4 != null;
	case "lambda.function":
		var d5 = ctx.lambdas.docs;
		ctx.docs = d5;
		return d5 != null;
	case "macro":
		var m = gml_GmlAPI.gmlMacros[tk.value];
		if(m != null) {
			var mx = m.expr;
			doc = ((gml_GmlAPI.gmlDoc[mx] || gml_GmlAPI.extDoc[mx]) || gml_GmlAPI.stdDoc[mx]);
			if(doc != null) {
				ctx.doc = doc;
				return true;
			}
		}
		return false;
	case "namespace":
		var ns = ctx.imports.namespaces[tk.value];
		tk = iter.stepBackward();
		if(tk != null && tk.type == "text") {
			tk = iter.stepBackward();
			iter.stepForward();
			iter.stepForward();
		} else {
			iter.stepForward();
		}
		if(tk != null && tk.value == "new") {
			doc = ns.docs["create"];
		}
		ctx.doc = doc;
		ctx.tk = tk;
		return doc != null;
	default:
		return false;
	}
};
ace_AceStatusBar.procDocImport = function(ctx) {
	var tk = ctx.tk;
	var doc = ctx.docs[tk.value];
	var iter = ctx.iter;
	var imports = ctx.imports;
	var argStart = 0;
	if(imports != null) {
		var name = tk.value;
		tk = iter.stepBackward();
		if(tk != null && tk.value == ".") {
			iter.stepBackward();
			tk = iter.getCurrentToken();
			if(tk.type == "namespace") {
				name = tk.value + "." + name;
				doc = (imports.docs[name] || doc);
			} else if(tk.type == "local" && Object.prototype.hasOwnProperty.call(imports.localTypes,tk.value)) {
				var ns = imports.namespaces[imports.localTypes[tk.value]];
				if(ns != null) {
					var td = ns.docs[name];
					if(td != null) {
						doc = td;
						argStart = 1;
					}
				}
			} else {
				iter.stepForward();
			}
		} else {
			doc = (imports.docs[name] || doc);
			tk = iter.stepForward();
		}
	}
	ctx.tk = tk;
	ctx.doc = doc;
	return argStart;
};
ace_AceStatusBar.prototype = {
	bind: function(editor) {
		this.editor = editor;
		editor.statusBar = this;
		var dcUpdate = ace.require("ace/lib/lang").delayedCall($bind(this,this.update)).schedule.bind(null,this.delayTime);
		editor.on("changeStatus",dcUpdate);
		editor.on("changeSelection",dcUpdate);
		editor.on("keyboardActivity",dcUpdate);
		editor.container.parentElement.appendChild(this.statusBar);
	}
	,updateComp: function(editor,row,col,imports,lambdas) {
		this.statusHint.innerHTML = "";
		var iter = new AceTokenIterator(editor.getSession(),row,col);
		var sctx = { iter : iter, imports : imports, lambdas : lambdas, docs : null, doc : null, tk : null};
		var ctk = iter.getCurrentToken();
		var parEmpty = false;
		var minDepth = 0;
		var depth = 0;
		var fkw = gml_GmlAPI.kwFlow;
		if(ctk != null && ctk.type == "paren.lparen") {
			ctk = iter.stepForward();
			if(ctk != null) {
				switch(ctk.type) {
				case "keyword":
					if(fkw[ctk.value]) {
						ctk = iter.stepBackward();
					}
					break;
				case "paren.rparen":
					depth = -1;
					parEmpty = true;
					break;
				case "preproc.macro":
					ctk = iter.stepBackward();
					break;
				case "punctuation.operator":
					if(ctk.value == ";") {
						ctk = iter.stepBackward();
					}
					break;
				}
			} else {
				ctk = ace_AceStatusBar.emptyToken;
			}
		}
		var tk = ctk;
		var docs = null;
		var doc = null;
		_hx_loop1: while(tk != null) {
			switch(tk.type) {
			case "keyword":
				if(fkw[tk.value]) {
					break _hx_loop1;
				}
				break;
			case "macroname":
				break _hx_loop1;
			case "paren.lparen":
				depth -= tk.value.length;
				if(depth < minDepth) {
					minDepth = depth;
					tk = iter.stepBackward();
					if(tk != null) {
						sctx.tk = tk;
						if(ace_AceStatusBar.getDocData(sctx)) {
							tk = sctx.tk;
							docs = sctx.docs;
							doc = sctx.doc;
							break _hx_loop1;
						} else {
							tk = sctx.tk;
						}
					}
				}
				break;
			case "paren.rparen":
				depth += tk.value.length;
				break;
			case "preproc.macro":
				break _hx_loop1;
			case "punctuation.operator":
				if(tk.value == ";") {
					break _hx_loop1;
				}
				break;
			case "set.operator":
				break _hx_loop1;
			}
			tk = iter.stepBackward();
		}
		if(docs == null && doc == null) {
			return;
		}
		var argStart = 0;
		if(doc == null) {
			sctx.tk = tk;
			argStart = ace_AceStatusBar.procDocImport(sctx);
			doc = sctx.doc;
			tk = sctx.tk;
		}
		depth = -1;
		var argCurr = 0;
		while(tk != null) {
			switch(tk.type) {
			case "paren.lparen":case "square.paren.lparen":
				depth += tk.value.length;
				break;
			case "punctuation.operator":
				if(tk.value == "," && depth == 0) {
					++argCurr;
				}
				break;
			case "paren.rparen":case "square.paren.rparen":
				depth -= tk.value.length;
				break;
			}
			if(tk == ctk) {
				break;
			}
			tk = iter.stepForward();
		}
		argCurr += argStart;
		if((tk == null ? ctk != ace_AceStatusBar.emptyToken : tk != ctk) || depth < 0 && !parEmpty) {
			return;
		}
		if(doc != null) {
			var args = doc.args;
			var argc = args.length;
			var out = document.createElement("span");
			out.className = "hint";
			out.appendChild(document.createTextNode(doc.pre));
			var currArg = null;
			var _g = 0;
			while(_g < argc) {
				var i = _g++;
				if(i > 0) {
					out.appendChild(document.createTextNode(", "));
				}
				var span = document.createElement("span");
				span.classList.add("argument");
				if(i == argCurr || i == argc - 1 && argCurr >= i) {
					span.classList.add("current");
					currArg = span;
				}
				span.appendChild(document.createTextNode(args[i]));
				out.appendChild(span);
			}
			out.appendChild(document.createTextNode(doc.post));
			this.statusHint.appendChild(out);
			if(currArg != null) {
				this.statusHint.scrollLeft = currArg.offsetLeft + currArg.offsetWidth / 2 - this.statusHint.offsetWidth / 2 | 0;
			}
			this.statusHint.title = out.innerText;
			this.statusHint.classList.remove("active");
		} else {
			this.statusHint.title = "";
		}
		this.statusHint.onclick = null;
	}
	,setText: function(s) {
		this.statusHint.innerHTML = "";
		this.statusHint.appendChild(document.createTextNode(s));
		this.statusHint.title = s;
		this.statusHint.onclick = null;
		this.statusHint.classList.remove("active");
	}
	,update: function() {
		if(window.performance.now() < this.ignoreUntil) {
			return;
		}
		var file = this.editor.getSession().gmlFile;
		var codeEditor = file != null ? file.codeEditor : null;
		var sel = this.editor.selection;
		var pos = sel.lead;
		var showRow = pos.row;
		var checkRx = gml_GmlAPI.scopeResetRx;
		var startRow = showRow + 1;
		var session = this.editor.getSession();
		var resetOnDefine = window.gmlResetOnDefine;
		var scope = "";
		while(--startRow >= 0) {
			var checkResult = checkRx.exec(session.getLine(startRow));
			if(checkResult != null) {
				scope = checkResult[1];
				if(resetOnDefine) {
					showRow -= startRow + 1;
				}
				break;
			}
		}
		if(file != null && file != ui_WelcomePage.file) {
			file.set_changed(!session.getUndoManager().isClean());
		}
		var ctr = this.statusSpan;
		var set = function(q,v) {
			var el = ctr.querySelector(q);
			if(v != null && v != "") {
				el.style.display = "";
				el.innerText = v;
			} else {
				el.style.display = "none";
			}
		};
		set(".status",this.editor.keyBinding.getStatusText(this.editor));
		set(".recording",this.editor.commands.recording ? "REC" : null);
		if(!sel.isEmpty()) {
			var r = this.editor.getSelectionRange();
			set(".select","(" + (r.end.row - r.start.row) + ":" + (r.end.column - r.start.column) + ")");
		} else {
			set(".select",null);
		}
		set(".row",showRow < 0 ? "#" : "" + (showRow + 1));
		set(".col","" + (pos.column + 1));
		set(".ranges",sel.rangeCount > 0 ? "[" + sel.rangeCount + "]" : null);
		var ctxCtr = ctr.querySelector(".context");
		var ctxPre = ctr.querySelector(".context-pre");
		if(scope != "") {
			ctxCtr.style.display = "";
			ctxPre.style.display = "";
			var ctxTxt = ctr.querySelector(".context-txt");
			ctxTxt.innerText = scope;
			ctxTxt.title = scope;
			this.contextRow = startRow;
			this.contextName = scope;
		} else {
			ctxCtr.style.display = "none";
			ctxPre.style.display = "none";
			this.contextRow = -1;
			this.contextName = null;
		}
		var locals = codeEditor != null ? codeEditor.locals[scope] : null;
		this.editor.gmlCompleters.localCompleter.items = locals != null ? locals.comp : ace_AceWrapCompleter.noItems;
		var imports = codeEditor != null ? codeEditor.imports[scope] : null;
		this.editor.gmlCompleters.importCompleter.items = imports != null ? imports.comp : ace_AceWrapCompleter.noItems;
		var lambdas = codeEditor != null ? codeEditor.lambdas[scope] : null;
		this.editor.gmlCompleters.lambdaCompleter.items = lambdas != null ? lambdas.comp : ace_AceWrapCompleter.noItems;
		this.updateComp(this.editor,pos.row,pos.column,imports,lambdas);
	}
	,__class__: ace_AceStatusBar
};
var ace_AceTools = function() { };
$hxClasses["ace.AceTools"] = ace_AceTools;
ace_AceTools.__name__ = "ace.AceTools";
ace_AceTools.createEditor = function(element,options) {
	return ace__$AceWrap_AceWrap_$Impl_$._new(element,options);
};
ace_AceTools.createSession = function(context,mode) {
	var session = new AceEditSession(context,mode);
	session.gmlScopes = new gml_GmlScopes(session);
	session.setUndoManager(new AceUndoManager());
	session.setOption("newLineMode","windows");
	session.setOption("tabSize",ui_Preferences.current.tabSize);
	session.setOption("useSoftTabs",ui_Preferences.current.tabSpaces);
	session.setOption("wrap",Main.aceEditor.getOption("wrap"));
	return session;
};
ace_AceTools.bindSession = function(session,editor) {
	session.gmlEditor = editor;
	session.gmlFile = editor.file;
};
ace_AceTools.cloneSession = function(session) {
	var copy = ace_AceTools.createSession(session.doc,session.$mode);
	copy.setOption("useSoftTabs",session.getOption("useSoftTabs"));
	ace_AceTools.bindSession(copy,session.gmlEditor);
	return copy;
};
var ace_AceTooltips = function() { };
$hxClasses["ace.AceTooltips"] = ace_AceTooltips;
ace_AceTooltips.__name__ = "ace.AceTooltips";
ace_AceTooltips.resetCache = function() {
	ace_AceTooltips.spriteThumbs = Object.create(null);
};
ace_AceTooltips.update = function(session,pos,token) {
	var t = token.type;
	var v = token.value;
	var r = null;
	var doc = null;
	if(ace_AceStatusBar.canDocData[t]) {
		var scope = session.gmlScopes.get(pos.row);
		var codeEditor = gml_file_GmlFile.current.codeEditor;
		var ctx = { iter : new AceTokenIterator(session,pos.row,pos.column), tk : token, doc : null, docs : null, imports : codeEditor.imports[scope], lambdas : codeEditor.lambdas[scope]};
		if(ace_AceStatusBar.getDocData(ctx)) {
			doc = ctx.doc;
			if(doc == null) {
				ace_AceStatusBar.procDocImport(ctx);
				doc = ctx.doc;
			}
		}
	}
	if(doc == null) {
		switch(t) {
		case "asset.sprite":
			r = "sprite:" + v;
			if(ace_AceTooltips.text != r) {
				ace_AceTooltips.text = r;
				var th;
				if(Object.prototype.hasOwnProperty.call(ace_AceTooltips.spriteThumbs,v)) {
					th = ace_AceTooltips.spriteThumbs[v];
				} else {
					th = gml_Project.current.getSpriteURL(v);
					th = "<img src=\"" + th.replace(tools_NativeString.escapeProp_1,"\\$1") + "\" style=\"max-width:64px;max-height:64px\">";
					ace_AceTooltips.spriteThumbs[v] = th;
				}
				ace_AceTooltips.ttip.setHtml(th);
			}
			return;
		case "curly.paren.lparen":
			var iter = new AceTokenIterator(session,pos.row,pos.column);
			var depth = 1;
			var tk = iter.stepForward();
			_hx_loop1: while(tk != null) {
				switch(tk.type) {
				case "curly.paren.lparen":
					++depth;
					break;
				case "curly.paren.rparen":
					if(--depth <= 0) {
						var row = iter.getCurrentTokenPosition().row;
						r = "Spans until line " + (row + 1);
						var rowText = session.getLine(row);
						while(rowText != null && rowText.trim().length <= 1) rowText = session.getLine(++row);
						if(rowText != null) {
							r += ": " + rowText;
						}
						break _hx_loop1;
					}
					break;
				}
				tk = iter.stepForward();
			}
			break;
		case "curly.paren.rparen":
			var iter1 = new AceTokenIterator(session,pos.row,pos.column);
			var depth1 = 1;
			var tk1 = iter1.stepBackward();
			_hx_loop3: while(tk1 != null) {
				switch(tk1.type) {
				case "curly.paren.lparen":
					if(--depth1 <= 0) {
						var row1 = iter1.getCurrentTokenPosition().row;
						r = "Closes line " + (row1 + 1) + ": ";
						var rowText1 = session.getLine(row1);
						while(row1 > 0 && rowText1.trim().length <= 1) rowText1 = session.getLine(--row1);
						r += rowText1;
						break _hx_loop3;
					}
					break;
				case "curly.paren.rparen":
					++depth1;
					break;
				}
				tk1 = iter1.stepBackward();
			}
			break;
		case "enumfield":
			var iter2 = new AceTokenIterator(session,pos.row,pos.column);
			var et = null;
			var tk2 = iter2.stepBackward();
			if(tk2 != null && tk2.type == "text") {
				tk2 = iter2.stepBackward();
			}
			if(tk2 != null && tk2.value == ".") {
				tk2 = iter2.stepBackward();
				if(tk2 != null && tk2.type == "text") {
					tk2 = iter2.stepBackward();
				}
				if(tk2 != null) {
					switch(tk2.type) {
					case "enum":
						et = gml_GmlAPI.gmlEnums[tk2.value];
						break;
					case "local":case "sublocal":
						break;
					}
				}
			} else {
				while(tk2 != null) {
					if(tk2.type == "enum") {
						et = gml_GmlAPI.gmlEnums[tk2.value];
						break;
					}
					tk2 = iter2.stepBackward();
				}
			}
			if(et != null) {
				var ef = et.compMap[v];
				if(ef != null) {
					r = ef.doc;
				}
			}
			break;
		case "extmacro":
			var comp = gml_GmlAPI.extCompMap[v];
			if(comp != null) {
				r = comp.doc;
			}
			break;
		case "macro":
			var mc = gml_GmlAPI.gmlMacros[v];
			if(mc != null) {
				r = mc.expr;
			}
			break;
		default:
		}
	}
	if(doc != null) {
		r = doc.getAcText();
	}
	if(t == "globalvar") {
		r = r == null ? "[globalvar]" : "[globalvar] " + r;
	}
	if(r == "") {
		r = null;
	}
	if(ace_AceTooltips.text != r) {
		ace_AceTooltips.text = r;
		if(r != null) {
			ace_AceTooltips.ttip.setText(r);
		}
	}
};
ace_AceTooltips.bind = function(editor) {
	var token = null;
	ace_AceTooltips.ttip = new AceTooltip(editor.container);
	var visible = false;
	var timeout = null;
	var sync = function(pos,x,y) {
		var line = editor.getSession().getLine(pos.row);
		var tk = line == null || pos.column >= line.length ? null : editor.getSession().getTokenAt(pos.row,pos.column);
		if(tk != null) {
			if(tk != token) {
				token = tk;
				ace_AceTooltips.update(editor.getSession(),pos,tk);
			}
			if(ace_AceTooltips.text != null) {
				ace_AceTooltips.ttip.setPosition(x,y + 16);
				if(!visible) {
					visible = true;
					ace_AceTooltips.ttip.show();
				}
			} else if(visible) {
				visible = false;
				ace_AceTooltips.ttip.hide();
			}
		} else if(visible) {
			visible = false;
			ace_AceTooltips.ttip.hide();
		}
	};
	editor.container.querySelector(".ace_content").addEventListener("mouseout",function(ev) {
		if(visible) {
			visible = false;
			ace_AceTooltips.ttip.hide();
		}
		if(timeout != null) {
			window.clearTimeout(timeout);
			timeout = null;
		}
	});
	editor.on("mousedown",function(_) {
		if(visible) {
			visible = false;
			ace_AceTooltips.ttip.hide();
		}
	});
	editor.on("mousemove",function(ev1) {
		var pc = ui_Preferences.current;
		if(pc.tooltipKind == 0) {
			return;
		}
		var t = pc.tooltipDelay;
		var pos1 = ev1.getDocumentPosition();
		if(t > 0) {
			if(timeout != null) {
				window.clearTimeout(timeout);
				timeout = null;
			}
			timeout = window.setTimeout(function() {
				timeout = null;
				sync(pos1,ev1.x,ev1.y);
			},t);
		} else {
			sync(pos1,ev1.x,ev1.y);
		}
	});
};
var ace__$AceWrap_AceWrap_$Impl_$ = {};
$hxClasses["ace._AceWrap.AceWrap_Impl_"] = ace__$AceWrap_AceWrap_$Impl_$;
ace__$AceWrap_AceWrap_$Impl_$.__name__ = "ace._AceWrap.AceWrap_Impl_";
ace__$AceWrap_AceWrap_$Impl_$._new = function(el,o) {
	var this1 = ace.edit(el);
	this1.$blockScrolling = Infinity;
	this1.getFontFamily = function() {
		return this1.getOption("fontFamily");
	};
	this1.setFontFamily = function(v) {
		this1.setOption("fontFamily",v);
	};
	if(o == null) {
		o = { };
	}
	if(o.statusBar != false) {
		new ace_AceStatusBar().bind(this1);
	}
	if(o.completers != false) {
		new ace_AceWrapCommonCompleters().bind(this1);
	}
	if(o.commands != false) {
		ace_AceCommands.init(this1,o.isPrimary);
	}
	if(o.contextMenu != false) {
		new ace_AceCtxMenu().bind(this1);
	}
	if(o.inputHelpers != false) {
		ui_KeyboardShortcuts.initEditor(this1);
	}
	if(o.tooltips != false) {
		ace_AceTooltips.bind(this1);
	}
	if(o.preferences != false) {
		ui_Preferences.bindEditor(this1);
	}
	if(o.scrollMode != false) {
		new ui_ScrollMode().bind(this1);
	}
	return this1;
};
ace__$AceWrap_AceWrap_$Impl_$.init = function() {
	var window1 = window;
	ace.editWrap = function(q) {
		return ace__$AceWrap_AceWrap_$Impl_$._new(q);
	};
	window1.AceEditSession = ace.require("ace/edit_session").EditSession;
	window1.AceUndoManager = ace.require("ace/undomanager").UndoManager;
	window1.AceTokenIterator = ace.require("ace/token_iterator").TokenIterator;
	var ns_autocomplete = ace.require("ace/autocomplete");
	window1.AceAutocomplete = ns_autocomplete.Autocomplete;
	window1.AceFilteredList = ns_autocomplete.FilteredList;
	ace_extern__$AceFilteredList_AceFilteredListImpl.init(window1.AceFilteredList.prototype);
	window1.AceRange = ace.require("ace/range").Range;
	window1.AceTooltip = ace.require("ace/tooltip").Tooltip;
	window1.AceOOP = ace.require("ace/lib/oop");
};
var ace_AceWrapCommonCompleters = function() {
	var gmlModes = Object.create(null);
	gmlModes["ace/mode/gml"] = true;
	gmlModes["ace/mode/gml_search"] = true;
	var gmlf = function(session) {
		var k = (session.$modeId || session.getOption("mode"));
		return gmlModes[k];
	};
	var excl = ["comment","comment.doc","comment.line","comment.doc.line","string","string.quasi","string.importpath","scriptname","eventname","eventkeyname","eventtext","sectionname","momenttime","momentname","macroname","namespace","globalfield","enumfield","enumerror"];
	this.stdCompleter = new ace_AceWrapCompleter(gml_GmlAPI.stdComp,excl,true,gmlf);
	this.extCompleter = new ace_AceWrapCompleter(gml_GmlAPI.extComp,excl,true,gmlf);
	this.gmlCompleter = new ace_AceWrapCompleter(gml_GmlAPI.gmlComp,excl,true,gmlf);
	this.eventCompleter = new ace_AceWrapCompleter(parsers_GmlEvent.comp,["eventname"],false,gmlf);
	this.keynameCompleter = new ace_AceWrapCompleter(parsers_GmlKeycode.comp,["eventkeyname"],false,gmlf);
	this.importCompleter = new ace_AceWrapCompleter([],excl,true,gmlf);
	this.localCompleter = new ace_AceWrapCompleter([],excl,true,gmlf);
	this.lambdaCompleter = new ace_AceWrapCompleter([],excl,true,gmlf);
	this.globalFullCompleter = new ace_AceWrapCompleter(gml_GmlAPI.gmlGlobalFullComp,excl,true,function(q) {
		var k1 = (q.$modeId || q.getOption("mode"));
		if(gmlModes[k1]) {
			return ui_Preferences.current.compMatchMode == 3;
		} else {
			return false;
		}
	});
	this.globalCompleter = new ace_AceWrapCompleter(gml_GmlAPI.gmlGlobalFieldComp,["globalfield"],false,gmlf);
	this.globalCompleter.minLength = 0;
	this.globalCompleter.dotKind = 1;
	this.instCompleter = new ace_AceWrapCompleter(gml_GmlAPI.gmlInstFieldComp,excl,true,gmlf);
	this.namespaceCompleter = new ace_AceWrapCompleter([],excl,true,gmlf);
	this.namespaceCompleter.minLength = 0;
	this.namespaceCompleter.dotKind = 2;
	this.namespaceTypeCompleter = new ace_AceWrapCompleter([],excl,true,gmlf);
	this.namespaceTypeCompleter.minLength = 0;
	this.namespaceTypeCompleter.colKind = 1;
	this.enumTypeCompleter = new ace_AceWrapCompleter([],excl,true,gmlf);
	this.enumTypeCompleter.minLength = 0;
	this.enumTypeCompleter.colKind = 2;
	this.localTypeCompleter = new ace_AceWrapCompleter([],excl,true,gmlf);
	this.localTypeCompleter.minLength = 0;
	this.localTypeCompleter.dotKind = 4;
	this.enumCompleter = new ace_AceWrapCompleter([],["enumfield"],false,gmlf);
	this.enumCompleter.minLength = 0;
	this.enumCompleter.dotKind = 3;
	this.glslCompleter = new ace_AceWrapCompleter(shaders_ShaderAPI.glslComp,excl,true,function(q1) {
		if((q1.$modeId || q1.getOption("mode")) == "ace/mode/shader" && q1.gmlFile != null) {
			return ((q1.gmlFile.kind) instanceof file_kind_misc_KGLSL);
		} else {
			return false;
		}
	});
	this.hlslCompleter = new ace_AceWrapCompleter(shaders_ShaderAPI.glslComp,excl,true,function(q2) {
		if((q2.$modeId || q2.getOption("mode")) == "ace/mode/shader" && q2.gmlFile != null) {
			return ((q2.gmlFile.kind) instanceof file_kind_misc_KHLSL);
		} else {
			return false;
		}
	});
	this.snippetCompleter = ace_AceSnippets.completer;
};
$hxClasses["ace.AceWrapCommonCompleters"] = ace_AceWrapCommonCompleters;
ace_AceWrapCommonCompleters.__name__ = "ace.AceWrapCommonCompleters";
ace_AceWrapCommonCompleters.prototype = {
	bind: function(editor) {
		editor.gmlCompleters = this;
		editor.setOptions({ enableLiveAutocompletion : [this.localCompleter,this.importCompleter,this.lambdaCompleter,this.stdCompleter,this.extCompleter,this.gmlCompleter,this.eventCompleter,this.keynameCompleter,this.globalFullCompleter,this.globalCompleter,this.instCompleter,this.namespaceCompleter,this.namespaceTypeCompleter,this.enumTypeCompleter,this.localTypeCompleter,this.enumCompleter,this.glslCompleter,this.hlslCompleter,this.snippetCompleter], enableSnippets : true});
		var onDot = function(e) {
			var lead = editor.getSession().selection.lead;
			var token = new AceTokenIterator(editor.getSession(),lead.row,lead.column).stepBackward();
			if(token == null) {
				return;
			}
			var open;
			switch(token.type) {
			case "enum":case "namespace":
				open = true;
				break;
			case "local":
				var scope = editor.getSession().gmlScopes.get(lead.row);
				var imp = editor.getSession().gmlEditor.imports[scope];
				open = imp != null && imp.localTypes[token.value] != null;
				break;
			default:
				open = token.value == "global";
			}
			if(open) {
				if(editor.completer == null) {
					editor.completer = new AceAutocomplete();
				}
				editor.completer.autoInsert = false;
				editor.completer.showPopup(editor);
			}
		};
		var onColon = function(e1) {
			var lead1 = editor.getSession().selection.lead;
			if(ace_AceWrapCompleter.checkColon(new AceTokenIterator(editor.getSession(),lead1.row,lead1.column))) {
				if(editor.completer == null) {
					editor.completer = new AceAutocomplete();
				}
				editor.completer.autoInsert = false;
				editor.completer.showPopup(editor);
			}
		};
		editor.commands.on("afterExec",function(e2) {
			if(e2.command.name == "insertstring") {
				switch(e2.args) {
				case ".":
					onDot(e2);
					break;
				case ":":
					onColon(e2);
					break;
				}
			}
		});
	}
	,__class__: ace_AceWrapCommonCompleters
};
var ace_extern_AceAutoCompleter = function() { };
$hxClasses["ace.extern.AceAutoCompleter"] = ace_extern_AceAutoCompleter;
ace_extern_AceAutoCompleter.__name__ = "ace.extern.AceAutoCompleter";
var ace_AceWrapCompleter = function(items,filters,not,modeFilter) {
	this.colKind = 0;
	this.dotKind = 0;
	this.minLength = -4;
	items.sort(function(a,b) {
		if(a.name < b.name) {
			return -1;
		} else {
			return 1;
		}
	});
	this.items = items;
	this.tokenFilter = tools__$Dictionary_Dictionary_$Impl_$.fromKeys(filters,true);
	this.tokenFilterComment = this.tokenFilter["comment"];
	this.tokenFilterNot = not;
	this.modeFilter = modeFilter;
};
$hxClasses["ace.AceWrapCompleter"] = ace_AceWrapCompleter;
ace_AceWrapCompleter.__name__ = "ace.AceWrapCompleter";
ace_AceWrapCompleter.__interfaces__ = [ace_extern_AceAutoCompleter];
ace_AceWrapCompleter.checkColon = function(iter) {
	var token = iter.stepBackward();
	if(token != null && token.type == "text") {
		token = iter.stepBackward();
	}
	if(token == null) {
		return false;
	}
	switch(token.type) {
	case "local":case "localfield":case "sublocal":
		break;
	default:
		return false;
	}
	token = iter.stepBackward();
	if(token != null && token.type == "text") {
		token = iter.stepBackward();
	}
	if(token == null) {
		return false;
	}
	switch(token.value) {
	case "(":
		token = iter.stepBackward();
		if(token != null && token.type == "text") {
			token = iter.stepBackward();
		}
		if(token == null) {
			return false;
		}
		switch(token.type) {
		case "preproc.lambda":case "scriptname":
			break;
		default:
			return false;
		}
		break;
	case "#args":case ",":case "var":
		break;
	default:
		return false;
	}
	return true;
};
ace_AceWrapCompleter.prototype = {
	getCompletions: function(editor,session,pos,prefix,callback) {
		var _gthis = this;
		var ml = this.minLength;
		if(ml == -4) {
			ml = ui_Preferences.current.compMatchMode == 3 ? 1 : 2;
		}
		if(prefix.length < ml || !this.modeFilter(session)) {
			callback(null,ace_AceWrapCompleter.noItems);
			return;
		}
		if(editor.completer != null) {
			editor.completer.exactMatch = ui_Preferences.current.compExactMatch;
		}
		var tk = session.getTokenAt(pos.row,pos.column);
		if(this.colKind != 0) {
			if(tk.type == "punctuation.operator" && tk.value.includes(":")) {
				_hx_loop1: while(true) {
					if(ace_AceWrapCompleter.checkColon(new AceTokenIterator(session,pos.row,pos.column))) {
						switch(this.colKind) {
						case 1:
							var scope = session.gmlScopes.get(pos.row);
							if(scope == null) {
								break _hx_loop1;
							}
							var imp = gml_file_GmlFile.current.codeEditor.imports[scope];
							if(imp == null) {
								break _hx_loop1;
							}
							callback(null,imp.namespaceComp);
							break;
						case 2:
							callback(null,gml_GmlAPI.gmlEnumTypeComp);
							break;
						default:
							break _hx_loop1;
						}
					}
					return;
				}
			}
			callback(null,ace_AceWrapCompleter.noItems);
			return;
		} else if(this.dotKind != 0 && tk.type == "punctuation.operator" && tk.value.includes(".")) {
			tk = new AceTokenIterator(session,pos.row,pos.column).stepBackward();
			switch(this.dotKind) {
			case 1:
				callback(null,tk.value == "global" ? _gthis.items : ace_AceWrapCompleter.noItems);
				break;
			case 2:
				if(tk.type == "namespace") {
					var scope1 = session.gmlScopes.get(pos.row);
					if(scope1 != null) {
						var imp1 = gml_file_GmlFile.current.codeEditor.imports[scope1];
						if(imp1 != null) {
							var ns = imp1.namespaces[tk.value];
							if(ns != null) {
								callback(null,ns.comp);
								return;
							}
						}
					}
				}
				callback(null,ace_AceWrapCompleter.noItems);
				break;
			case 3:
				if(tk.type == "enum") {
					var name = tk.value;
					var scope2 = session.gmlScopes.get(pos.row);
					if(scope2 != null) {
						var imp2 = gml_file_GmlFile.current.codeEditor.imports[scope2];
						if(imp2 != null) {
							var s = imp2.longenEnum[name];
							if(s != null) {
								name = s;
							}
						}
					}
					var en = gml_GmlAPI.gmlEnums[name];
					if(en != null) {
						callback(null,en.fieldComp);
						return;
					}
				}
				callback(null,ace_AceWrapCompleter.noItems);
				break;
			case 4:
				if(tk.type == "local") {
					var scope3 = session.gmlScopes.get(pos.row);
					if(scope3 != null) {
						var imp3 = gml_file_GmlFile.current.codeEditor.imports[scope3];
						if(imp3 != null) {
							var t = imp3.localTypes[tk.value];
							if(t != null) {
								var ns1 = imp3.namespaces[t];
								if(ns1 != null) {
									callback(null,ns1.comp);
									return;
								} else {
									var en1 = gml_GmlAPI.gmlEnums[t];
									if(en1 != null) {
										callback(null,en1.fieldComp);
										return;
									}
								}
							}
						}
					}
				}
				callback(null,ace_AceWrapCompleter.noItems);
				break;
			default:
			}
			return;
		}
		var tkf = Object.prototype.hasOwnProperty.call(this.tokenFilter,tk.type);
		if(!tkf && this.tokenFilterComment && tk.type.startsWith("comment")) {
			tkf = true;
		}
		callback(null,tkf != this.tokenFilterNot ? _gthis.items : ace_AceWrapCompleter.noItems);
	}
	,getDocTooltip: function(item) {
		return item.doc;
	}
	,__class__: ace_AceWrapCompleter
};
var ace_extern__$AceFilteredList_AceFilteredListImpl = function() { };
$hxClasses["ace.extern._AceFilteredList.AceFilteredListImpl"] = ace_extern__$AceFilteredList_AceFilteredListImpl;
ace_extern__$AceFilteredList_AceFilteredListImpl.__name__ = "ace.extern._AceFilteredList.AceFilteredListImpl";
ace_extern__$AceFilteredList_AceFilteredListImpl.init = function(flProto) {
	var orig = flProto.filterCompletions;
	flProto.filterCompletions = function(items,needle) {
		var mode = ui_Preferences.current.compMatchMode;
		var _this = this;
		switch(mode) {
		case 1:
			var results = [];
			_this.shouldSort = true;
			var lower = needle.toLowerCase();
			var length = needle.length;
			var _g = 0;
			var _g1 = items;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				var caption = ((item.caption || item.value) || item.snippet);
				if(caption == null) {
					continue;
				}
				var pos = caption.toLowerCase().indexOf(lower);
				if(pos < 0) {
					continue;
				}
				item.exactMatch = pos == 0;
				item.matchMask = (1 << length) - 1;
				item["$score"] = (item.score || 0) - pos;
				results.push(item);
			}
			return results;
		case 0:case 2:
			_this.exactMatch = mode == 0;
			_this.shouldSort = mode == 2;
			return orig.call(this,items,needle);
		case 3:
			var results1 = [];
			_this.shouldSort = false;
			var length1 = needle.length;
			var nc = needle.charCodeAt(0);
			var nu = nc < 97 || nc > 122;
			var _g2 = 0;
			var _g11 = items;
			while(_g2 < _g11.length) {
				var item1 = _g11[_g2];
				++_g2;
				var caption1 = ((item1.caption || item1.value) || item1.snippet);
				if(caption1 == null) {
					continue;
				}
				var c1 = -1;
				var c0;
				var np = 0;
				var c1u;
				var i = 0;
				_hx_loop3: while(i < caption1.length) {
					c0 = c1;
					c1 = caption1.charCodeAt(i);
					++i;
					var proc_SectionStart_break;
					switch(c0) {
					case -1:case 46:case 95:
						c1u = c1 >= 65 && c1 <= 90;
						nc = needle.charCodeAt(np);
						if(c1u) {
							if(nc >= 97 && nc <= 122) {
								nc += -32;
							}
						} else if(nc >= 65 && nc <= 90) {
							nc -= -32;
						}
						if(nc != c1 || ++np >= length1) {
							proc_SectionStart_break = true;
						} else {
							proc_SectionStart_break = false;
							while(np < length1) {
								nc = needle.charCodeAt(np);
								c1 = caption1.charCodeAt(i);
								++i;
								if(nu) {
									if(nc < 97 || nc > 122) {
										break;
									}
									if(c1 >= 65 && c1 <= 90) {
										nc += -32;
									}
								} else {
									if(nc < 65 || nc > 90) {
										break;
									}
									if(c1 >= 97 && c1 <= 122) {
										nc += 32;
									}
								}
								if(c1 != nc) {
									proc_SectionStart_break = true;
									break;
								}
								++np;
							}
						}
						if(proc_SectionStart_break) {
							break _hx_loop3;
						}
						break;
					default:
						if(c0 >= 97 && c0 <= 122 && (c1 >= 65 && c1 <= 90)) {
							c1u = true;
							nc = needle.charCodeAt(np);
							if(nc >= 97 && nc <= 122) {
								nc += -32;
							}
							if(nc != c1 || ++np >= length1) {
								proc_SectionStart_break = true;
							} else {
								proc_SectionStart_break = false;
								while(np < length1) {
									nc = needle.charCodeAt(np);
									c1 = caption1.charCodeAt(i);
									++i;
									if(nu) {
										if(nc < 97 || nc > 122) {
											break;
										}
										if(c1 >= 65 && c1 <= 90) {
											nc += -32;
										}
									} else {
										if(nc < 65 || nc > 90) {
											break;
										}
										if(c1 >= 97 && c1 <= 122) {
											nc += 32;
										}
									}
									if(c1 != nc) {
										proc_SectionStart_break = true;
										break;
									}
									++np;
								}
							}
							if(proc_SectionStart_break) {
								break _hx_loop3;
							}
						}
					}
				}
				if(np < length1) {
					continue;
				}
				item1.matchMask = (1 << length1) - 1;
				item1.exactMatch = false;
				item1["$score"] = (item1.score || 0);
				results1.push(item1);
			}
			return results1;
		}
	};
};
var ace_extern__$AceRange_AceRange_$Impl_$ = {};
$hxClasses["ace.extern._AceRange.AceRange_Impl_"] = ace_extern__$AceRange_AceRange_$Impl_$;
ace_extern__$AceRange_AceRange_$Impl_$.__name__ = "ace.extern._AceRange.AceRange_Impl_";
ace_extern__$AceRange_AceRange_$Impl_$._new = function(col1,row1,col2,row2) {
	return new AceRange(row1,col1,row2,col2);
};
ace_extern__$AceRange_AceRange_$Impl_$.fromPos = function(pos) {
	return ace_extern__$AceRange_AceRange_$Impl_$._new(pos.column,pos.row,pos.column,pos.row);
};
var editors_Editor = function(file) {
	this.file = file;
};
$hxClasses["editors.Editor"] = editors_Editor;
editors_Editor.__name__ = "editors.Editor";
editors_Editor.init = function() {
	editors_EditCode.container = document.getElementById("ace_container");
	editors_Editor.container = editors_EditCode.container.parentElement;
};
editors_Editor.prototype = {
	destroy: function() {
	}
	,ready: function() {
	}
	,stateLoad: function() {
	}
	,focusGain: function(prev) {
		if(prev.element != this.element) {
			editors_Editor.container.appendChild(this.element);
		}
	}
	,focusLost: function(next) {
		if(next.element != this.element) {
			editors_Editor.container.removeChild(this.element);
		}
	}
	,load: function(data) {
	}
	,save: function() {
		return false;
	}
	,checkChanges: function() {
	}
	,__class__: editors_Editor
};
var editors_EditCode = function(file1,modePath) {
	this.lambdas = Object.create(null);
	this.lambdaMap = Object.create(null);
	this.lambdaList = [];
	this.imports = gml_GmlImports.defaultMap;
	this.locals = gml_GmlLocals.defaultMap;
	editors_Editor.call(this,file1);
	this.kind = js_Boot.__cast(file1.kind , file_kind_KCode);
	this.modePath = modePath;
	this.element = editors_EditCode.container;
};
$hxClasses["editors.EditCode"] = editors_EditCode;
editors_EditCode.__name__ = "editors.EditCode";
editors_EditCode.__super__ = editors_Editor;
editors_EditCode.prototype = $extend(editors_Editor.prototype,{
	ready: function() {
		if(gml_GmlAPI.version == -1) {
			parsers_GmlSeeker.runSync(this.file.path,this.file.code,null,this.file.kind);
		}
		var _prev = editors_EditCode.currentNew;
		editors_EditCode.currentNew = this;
		this.session = ace_AceTools.createSession(this.file.code,{ path : this.modePath, version : gml_GmlAPI.version});
		ace_AceTools.bindSession(this.session,this);
		if(gml_Project.current != null && gml_Project.current.properties.indentWithTabs != null) {
			this.session.setOption("useSoftTabs",!gml_Project.current.properties.indentWithTabs);
		} else if(ui_Preferences.current.detectTab) {
			if(this.file.code.includes("\n\t")) {
				this.session.setOption("useSoftTabs",false);
			} else if(this.file.code.includes("\n  ")) {
				this.session.setOption("useSoftTabs",true);
			} else {
				this.session.setOption("useSoftTabs",ui_Preferences.current.tabSpaces);
			}
		} else {
			this.session.setOption("useSoftTabs",ui_Preferences.current.tabSpaces);
		}
		if(gml_Project.current != null && gml_Project.current.properties.indentSize != null) {
			this.session.setOption("tabSize",gml_Project.current.properties.indentSize | 0);
		}
		ui_Preferences.hookSetOption(this.session);
		if(this.modePath == "ace/mode/javascript") {
			this.session.setOption("useWorker",false);
		}
		editors_EditCode.currentNew = _prev;
		var data = this.file.path != null ? parsers_GmlSeekData.map[this.file.path] : null;
		if(data != null) {
			this.locals = data.locals;
			if(data.imports != null) {
				this.imports = data.imports;
			}
		}
	}
	,stateLoad: function() {
		if(this.file.path != null) {
			ace_AceSessionData.restore(this);
		}
	}
	,focusGain: function(prev) {
		editors_Editor.prototype.focusGain.call(this,prev);
		Main.aceEditor.setSession(this.session);
	}
	,setLoadError: function(text) {
		this.file.code = text;
		this.file.path = null;
		this.file.kind = file_kind_misc_KExtern.inst;
		return text;
	}
	,load: function(data) {
		var src = this.kind.loadCode(this,data);
		src = this.kind.preproc(this,src);
		this.file.code = src;
	}
	,postpImport: function(val) {
		var _gthis = this;
		var val_preImport = val;
		var path = this.file.path;
		val = parsers_GmlExtImport.post(val,path);
		if(val == null) {
			window.alert(parsers_GmlExtImport.errorText);
			return null;
		}
		var data = path != null ? parsers_GmlSeekData.map[path] : null;
		var sessionChanged = false;
		var hadImports = data != null && data.imports != null;
		if(hadImports || parsers_GmlExtImport.post_numImports > 0) {
			var next = parsers_GmlExtImport.pre(val,path);
			if(data != null && data.imports != null) {
				this.imports = data.imports;
			} else {
				this.imports = gml_GmlImports.defaultMap;
			}
			if(next != val_preImport) {
				var sd = ace_AceSessionData.get(this);
				var session = this.session;
				session.doc.setValue(next);
				ace_AceSessionData.set(this,sd);
				sessionChanged = true;
				window.setTimeout(function() {
					var undoManager = session.getUndoManager();
					if(!ui_Preferences.current.allowImportUndo) {
						session.setUndoManager(undoManager);
						undoManager.reset();
					}
					undoManager.markClean();
					_gthis.file.set_changed(false);
				});
			} else if(!hadImports) {
				val = parsers_GmlExtImport.post(val_preImport,path);
				if(val == null) {
					window.alert(parsers_GmlExtImport.errorText);
					return null;
				}
			}
		}
		return { val : val, sessionChanged : sessionChanged};
	}
	,setSaveError: function(text) {
		window.alert(text);
	}
	,save: function() {
		var code = this.session.getValue();
		gml_file_GmlFileBackup.save(this.file,code);
		code = this.kind.postproc(this,code);
		if(code == null) {
			return false;
		}
		if(!this.kind.saveCode(this,code)) {
			return false;
		}
		this.file.savePost(code);
		return true;
	}
	,checkChanges: function() {
		var _gthis = this;
		return;
	}
	,__class__: editors_EditCode
});
var editors_EditSprite = function(file) {
	this.recenter = true;
	this.playbackDelta = 1;
	this.interval = null;
	this.frameElements = [];
	this.frameURLs = [];
	this.currentFrame = 0;
	this.frameCount = 0;
	var _gthis = this;
	editors_Editor.call(this,file);
	this.element = document.createElement("div");
	this.element.classList.add("resinfo");
	this.element.classList.add("sprite");
	this.element.tabIndex = 0;
	this.element.addEventListener("keydown",function(e) {
		if(document.activeElement.nodeName == "INPUT") {
			return;
		}
		if(_gthis.frameCount > 1) {
			switch(e.key) {
			case " ":
				_gthis.animToggle.click();
				break;
			case "ArrowLeft":
				_gthis.adjustCurrentFrame(-1).scrollIntoView();
				break;
			case "ArrowRight":
				_gthis.adjustCurrentFrame(1).scrollIntoView();
				break;
			}
		}
	});
};
$hxClasses["editors.EditSprite"] = editors_EditSprite;
editors_EditSprite.__name__ = "editors.EditSprite";
editors_EditSprite.__super__ = editors_Editor;
editors_EditSprite.prototype = $extend(editors_Editor.prototype,{
	destroy: function() {
		editors_Editor.prototype.destroy.call(this);
		if(this.interval != null) {
			window.clearInterval(this.interval);
			this.interval = null;
		}
	}
	,checkRecenter: function() {
		if(!this.recenter) {
			return;
		}
		this.panner.recenter();
		this.recenter = false;
	}
	,focusGain: function(prev) {
		editors_Editor.prototype.focusGain.call(this,prev);
		this.checkRecenter();
	}
	,getData1: function(data) {
		var d = new editors_EditSpriteData();
		var pj = gml_Project.current;
		var q = electron_FileWrap.readGmxFileSync(this.file.path);
		d.xorig = q.findFloat("xorig");
		d.yorig = q.findFloat("yorigin");
		d.width = q.findFloat("width");
		d.height = q.findFloat("height");
		var _g = 0;
		var _g1 = q.find("frames").findAll("frame");
		while(_g < _g1.length) d.frames.push(pj.getImageURL("sprites/" + _g1[_g++].text));
		return d;
	}
	,getData2: function(q) {
		var d = new editors_EditSpriteData();
		d.xorig = q.xorig;
		d.yorig = q.yorig;
		d.width = q.width;
		d.height = q.height;
		d.playbackLegacy = q.playbackSpeedType != 0;
		d.playbackSpeed = q.playbackSpeed;
		var dir = haxe_io_Path.directory(this.file.path);
		var isAbs = haxe_io_Path.isAbsolute(dir);
		var pj = gml_Project.current;
		var _g = 0;
		var _g1 = q.frames;
		while(_g < _g1.length) {
			var frel = haxe_io_Path.join([dir,_g1[_g++].id + ".png"]);
			d.frames.push(isAbs ? "file:///" + frel : pj.getImageURL(frel));
		}
		return d;
	}
	,setCurrentFrameElement: function(i,frame) {
		if(frame == null) {
			frame = this.frameElements[i];
		}
		if(this.currentFrameElement == frame) {
			return frame;
		}
		this.currentFrameElement.classList.remove("current");
		frame.classList.add("current");
		this.currentFrameElement = frame;
		this.image.src = this.frameURLs[i];
		return frame;
	}
	,adjustCurrentFrame: function(delta) {
		if(this.frameCount <= 1) {
			return null;
		}
		this.currentFrame = (this.currentFrame + delta) % this.frameCount;
		if(this.currentFrame < 0) {
			this.currentFrame += this.frameCount;
		}
		return this.setCurrentFrameElement(this.currentFrame);
	}
	,load: function(data) {
		var _gthis = this;
		var d = ((this.file.kind) instanceof file_kind_yy_KYySprite) ? this.getData2(data) : this.getData1(data);
		tools_HtmlTools.clearInner(this.element);
		var ctr = document.createElement("div");
		ctr.classList.add("sprite-info");
		var info = document.createElement("div");
		info.classList.add("sprite-info-text");
		info.appendChild(document.createTextNode(d.width + "x" + d.height + "; " + d.xorig + "," + d.yorig));
		info.appendChild(document.createElement("br"));
		info.appendChild(document.createTextNode(d.frames.length + " frame" + (d.frames.length != 1 ? "s" : "")));
		if(d.frames.length > 1) {
			info.appendChild(document.createElement("br"));
			var toggle;
			var mult;
			var fps;
			toggle = document.createElement("input");
			toggle.type = "checkbox";
			toggle.title = "Toggle playback";
			this.animToggle = toggle;
			info.appendChild(toggle);
			mult = document.createElement("input");
			mult.style.width = "2em";
			mult.value = "1";
			mult.title = "Playback speed multiplier";
			info.appendChild(mult);
			fps = document.createElement("input");
			if(d.playbackLegacy) {
				info.appendChild(document.createTextNode("x"));
				fps.style.width = "2em";
				var tmp = gml_Project.current.getFrameRate();
				fps.value = "" + tmp;
				fps.title = "Target framerate";
				info.appendChild(fps);
			} else {
				info.appendChild(document.createTextNode("x"));
				fps.value = "1";
			}
			var nextFrame = function() {
				_gthis.adjustCurrentFrame(_gthis.playbackDelta);
			};
			var syncInterval = function(_) {
				if(_gthis.interval != null) {
					window.clearInterval(_gthis.interval);
				}
				if(toggle.checked) {
					var tx = parseFloat(mult.value);
					if(isNaN(tx)) {
						tx = 0;
						mult.classList.add("error");
					} else {
						mult.classList.remove("error");
					}
					var tf = 1.;
					if(d.playbackLegacy) {
						tf = parseFloat(fps.value);
						if(isNaN(tf)) {
							tf = 0;
							fps.classList.add("error");
						} else {
							fps.classList.remove("error");
						}
					}
					if(tx == 0 || tf == 0 || d.playbackSpeed == 0) {
						_gthis.interval = null;
					} else {
						var s = d.playbackSpeed * tx * tf;
						if(s < 0) {
							_gthis.playbackDelta = -1;
							s = -s;
						} else {
							_gthis.playbackDelta = 1;
						}
						_gthis.interval = window.setInterval(nextFrame,1000 / s | 0);
					}
				} else {
					_gthis.interval = null;
				}
			};
			var mult_val = mult.value;
			var fps_val = fps.value;
			var toggle_val = toggle.checked;
			var autosync_can = true;
			var autosync_1 = function() {
				autosync_can = true;
				syncInterval(null);
			};
			var autosync = function() {
				if(mult.value == mult_val && fps.value == fps_val && toggle.checked == toggle_val) {
					return;
				}
				mult_val = mult.value;
				fps_val = fps.value;
				toggle_val = toggle.checked;
				if(autosync_can) {
					autosync_can = false;
					window.setTimeout(autosync_1,50);
				}
			};
			toggle.onchange = autosync;
			mult.onchange = autosync;
			mult.onkeydown = autosync;
			mult.onkeyup = autosync;
			fps.onchange = autosync;
			fps.onkeydown = autosync;
			fps.onkeyup = autosync;
		}
		var frames = document.createElement("div");
		frames.classList.add("frames");
		this.frameCount = d.frames.length;
		this.frameElements = [];
		this.frameURLs = [];
		var _g = 0;
		var _g1 = d.frames;
		while(_g < _g1.length) {
			var url = _g1[_g];
			++_g;
			var frame = [document.createElement("div")];
			var index = [this.frameElements.length];
			if(index[0] == 0) {
				this.currentFrameElement = frame[0];
				frame[0].classList.add("current");
			}
			frame[0].title = "" + index[0];
			this.frameElements.push(frame[0]);
			this.frameURLs.push(url);
			frame[0].classList.add("frame");
			if(d.width > 48 || d.height > 48) {
				frame[0].style.backgroundSize = "contain";
			}
			url = StringTools.replace(url," ","%20");
			frame[0].style.backgroundImage = "url(" + url + ")";
			if(d.width <= 24 && d.height <= 24) {
				frame[0].style.backgroundSize = "" + d.width * 2 + "px " + d.height * 2 + "px";
				frame[0].classList.add("zoomed");
			}
			frame[0].onclick = (function(index1,frame1) {
				return function(_1) {
					_gthis.currentFrame = index1[0];
					_gthis.setCurrentFrameElement(index1[0],frame1[0]);
				};
			})(index,frame);
			frames.appendChild(frame[0]);
		}
		ctr.appendChild(info);
		ctr.appendChild(frames);
		this.element.appendChild(ctr);
		var pan = document.createElement("div");
		pan.style.flex = "1";
		var img = document.createElement("img");
		this.image = img;
		this.recenter = true;
		img.onload = function(_2) {
			img.onload = null;
			_gthis.checkRecenter();
		};
		img.src = d.frames[0];
		pan.appendChild(img);
		this.panner = new editors_Panner(pan,img);
		this.element.appendChild(pan);
	}
	,__class__: editors_EditSprite
});
var editors_EditSpriteData = function() {
	this.playbackLegacy = true;
	this.playbackSpeed = 1.;
	this.frames = [];
};
$hxClasses["editors.EditSpriteData"] = editors_EditSpriteData;
editors_EditSpriteData.__name__ = "editors.EditSpriteData";
editors_EditSpriteData.prototype = {
	__class__: editors_EditSpriteData
};
var editors_Panner = function(el,img) {
	this.mouseDown = false;
	this.mouseY = 0;
	this.mouseX = 0;
	this.zoomed = null;
	this.mult = 1;
	this.ctr = el;
	this.ctr.classList.add("panner");
	this.image = img;
	this.pan = { x : 0, y : 0, z : 0};
	el.addEventListener("mousedown",$bind(this,this.onmousedown));
	el.addEventListener("mousewheel",$bind(this,this.onmousewheel));
	el.addEventListener("DOMMouseScroll",$bind(this,this.onmousewheel));
	this.ctr.tabIndex = 0;
};
$hxClasses["editors.Panner"] = editors_Panner;
editors_Panner.__name__ = "editors.Panner";
editors_Panner.prototype = {
	update: function() {
		var pz = this.mult >= 1;
		if(pz != this.zoomed) {
			this.zoomed = pz;
			if(pz) {
				this.ctr.classList.add("zoomed");
			} else {
				this.ctr.classList.remove("zoomed");
			}
		}
		this.ctr.setAttribute("data-zoom",Math.round(this.mult * 100) + "%");
		this.image.style.transform = "matrix(" + this.mult + ",0,0," + this.mult + "," + -this.pan.x + "," + -this.pan.y + ")";
	}
	,forceUpdate: function() {
		this.mult = Math.pow(2,this.pan.z);
		this.zoomed = null;
		this.update();
	}
	,zoomTo: function(zx,zy,d) {
		var prev = this.mult;
		this.pan.z += d;
		this.mult = Math.pow(2,this.pan.z);
		var f = this.mult / prev;
		this.pan.x = (zx + this.pan.x) * f - zx;
		this.pan.y = (zy + this.pan.y) * f - zy;
		this.update();
	}
	,onmousemove: function(e) {
		var ox = this.mouseX;
		this.mouseX = e.pageX;
		var oy = this.mouseY;
		this.mouseY = e.pageY;
		if(this.mouseDown) {
			this.pan.x -= this.mouseX - ox;
			this.pan.y -= this.mouseY - oy;
			this.update();
		}
	}
	,onmousedown: function(e) {
		this.ctr.focus();
		this.onmousemove(e);
		if(e.which != 3) {
			this.ctr.focus();
			e.preventDefault();
			this.mouseDown = true;
		}
		window.document.addEventListener("mouseup",$bind(this,this.onmouseup));
		window.document.addEventListener("mousemove",$bind(this,this.onmousemove));
	}
	,onmouseup: function(e) {
		this.onmousemove(e);
		this.mouseDown = false;
		window.document.removeEventListener("mouseup",$bind(this,this.onmouseup));
		window.document.removeEventListener("mousemove",$bind(this,this.onmousemove));
	}
	,onmousewheel: function(e) {
		var d = Reflect.field(e,"wheelDelta");
		if(d == null) {
			d = -e.detail;
		}
		d = (d < 0 ? -1 : d > 0 ? 1 : 0) * 0.5;
		this.zoomTo(e.offsetX,e.offsetY,d);
	}
	,recenter: function() {
		var cw = this.ctr.offsetWidth;
		var ch = this.ctr.offsetHeight;
		if(cw <= 0 || ch <= 0) {
			return;
		}
		var qw = this.image.width;
		var qh = this.image.height;
		if(qw <= 0 || qh <= 0) {
			return;
		}
		var z = 0;
		while(qw < cw && qh < ch) if(qw * 2 < cw && qh * 2 < ch) {
			qw *= 2;
			qh *= 2;
			++z;
		} else {
			break;
		}
		while(qw > cw || qh > ch) {
			qw /= 2;
			qh /= 2;
			--z;
		}
		this.pan.z = z;
		this.pan.x = -((cw - qw) / 2 | 0);
		this.pan.y = -((ch - qh) / 2 | 0);
		this.forceUpdate();
	}
	,__class__: editors_Panner
};
var electron_DialogFallback = function() { };
$hxClasses["electron.DialogFallback"] = electron_DialogFallback;
electron_DialogFallback.__name__ = "electron.DialogFallback";
electron_DialogFallback.showOpenDialogWrap = function(options,func) {
	if(Electron_API != null) {
		Electron_Dialog.showOpenDialog(options,function(paths) {
			var files = [];
			if(paths != null) {
				var _g = 0;
				while(_g < paths.length) {
					var path = paths[_g];
					++_g;
					var raw = Electron_FS.readFileSync(path);
					var ua = Uint8Array.from(raw);
					var abuf = ua.buffer;
					files.push(new File(abuf,{ name : path}));
				}
			}
			func(files);
		});
		return;
	}
	if(electron_DialogFallback.form == null) {
		electron_DialogFallback.initDialog();
	}
	if(options.filters != null) {
		var accept = [];
		var _g1 = 0;
		var _g11 = options.filters;
		while(_g1 < _g11.length) {
			var filter = _g11[_g1];
			++_g1;
			var _g2 = 0;
			var _g12 = filter.extensions;
			while(_g2 < _g12.length) {
				var ext = _g12[_g2];
				++_g2;
				accept.push("." + ext);
			}
		}
		electron_DialogFallback.input.accept = accept.join(",");
	} else {
		electron_DialogFallback.input.accept = null;
	}
	electron_DialogFallback.form.reset();
	electron_DialogFallback.input.onchange = function(_) {
		if(electron_DialogFallback.input.files.length > 0) {
			func(electron_DialogFallback.input.files);
		}
	};
	electron_DialogFallback.input.click();
};
electron_DialogFallback.initDialog = function() {
	electron_DialogFallback.form = document.createElement("form");
	electron_DialogFallback.input = document.createElement("input");
	electron_DialogFallback.input.type = "file";
	electron_DialogFallback.form.appendChild(electron_DialogFallback.input);
	electron_DialogFallback.form.style.display = "none";
	document.body.appendChild(electron_DialogFallback.form);
};
electron_DialogFallback.showPrompt = function(text,def,fn) {
	if(electron_DialogFallback.promptCtr == null) {
		electron_DialogFallback.initPrompt();
	}
	electron_DialogFallback.promptFunc = fn;
	tools_HtmlTools.setInnerText(electron_DialogFallback.promptSpan,text);
	electron_DialogFallback.promptInput.value = def;
	electron_DialogFallback.promptFunc = fn;
	electron_DialogFallback.promptCtr.style.display = "";
	electron_DialogFallback.promptInput.focus();
	electron_DialogFallback.promptInput.select();
};
electron_DialogFallback.initPrompt = function() {
	var proc = function(ok) {
		var fn = electron_DialogFallback.promptFunc;
		electron_DialogFallback.promptFunc = null;
		electron_DialogFallback.promptCtr.style.display = "none";
		fn(ok ? electron_DialogFallback.promptInput.value : null);
	};
	electron_DialogFallback.promptCtr = document.createElement("div");
	electron_DialogFallback.promptCtr.id = "lw_prompt";
	electron_DialogFallback.promptCtr.className = "lw_modal";
	electron_DialogFallback.promptCtr.style.display = "none";
	document.body.appendChild(electron_DialogFallback.promptCtr);
	var overlay = document.createElement("div");
	overlay.className = "overlay";
	overlay.addEventListener("click",function(_) {
		proc(false);
	});
	electron_DialogFallback.promptCtr.appendChild(overlay);
	var promptw = document.createElement("div");
	promptw.className = "window";
	electron_DialogFallback.promptCtr.appendChild(promptw);
	electron_DialogFallback.promptSpan = document.createElement("span");
	promptw.appendChild(electron_DialogFallback.promptSpan);
	promptw.appendChild(document.createElement("br"));
	electron_DialogFallback.promptInput = document.createElement("input");
	electron_DialogFallback.promptInput.type = "text";
	electron_DialogFallback.promptInput.addEventListener("keydown",function(e) {
		switch(e.keyCode) {
		case 13:
			proc(true);
			break;
		case 27:
			proc(false);
			break;
		}
	});
	promptw.appendChild(electron_DialogFallback.promptInput);
	var buttons = document.createElement("div");
	buttons.className = "buttons";
	promptw.appendChild(buttons);
	var z = true;
	var bt = document.createElement("input");
	bt.type = "button";
	bt.addEventListener("click",function(_1) {
		proc(z);
	});
	bt.value = z ? "OK" : "Cancel";
	if(!z) {
		buttons.appendChild(document.createTextNode(" "));
	}
	buttons.appendChild(bt);
	var z1 = false;
	var bt1 = document.createElement("input");
	bt1.type = "button";
	bt1.addEventListener("click",function(_2) {
		proc(z1);
	});
	bt1.value = z1 ? "OK" : "Cancel";
	if(!z1) {
		buttons.appendChild(document.createTextNode(" "));
	}
	buttons.appendChild(bt1);
};
var electron_FileSystemBrowser = function() { };
$hxClasses["electron.FileSystemBrowser"] = electron_FileSystemBrowser;
electron_FileSystemBrowser.__name__ = "electron.FileSystemBrowser";
electron_FileSystemBrowser.readFile = function(path,enc,callback) {
	var http = new haxe_http_HttpJs(path);
	http.onError = function(msg) {
		callback(new Error(msg),null);
	};
	http.onData = function(data) {
		callback(null,data);
	};
	http.request();
};
var electron_FileWrap = function() { };
$hxClasses["electron.FileWrap"] = electron_FileWrap;
electron_FileWrap.__name__ = "electron.FileWrap";
electron_FileWrap.existsSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		return Electron_FS.existsSync(path);
	} else {
		return gml_Project.current.existsSync(path);
	}
};
electron_FileWrap.unlinkSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_FS.unlinkSync(path);
	} else {
		gml_Project.current.unlinkSync(path);
	}
};
electron_FileWrap.readTextFile = function(path,fn) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_FS.readFile(path,"utf8",fn);
		return;
	} else {
		gml_Project.current.readTextFile(path,fn);
		return;
	}
};
electron_FileWrap.readTextFileSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		return Electron_FS.readFileSync(path,"utf8");
	} else {
		return gml_Project.current.readTextFileSync(path);
	}
};
electron_FileWrap.writeTextFileSync = function(path,text) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_FS.writeFileSync(path,text);
	} else {
		gml_Project.current.writeTextFileSync(path,text);
	}
};
electron_FileWrap.readJsonFileSync = function(path,c) {
	if(haxe_io_Path.isAbsolute(path)) {
		return JSON.parse(Electron_FS.readFileSync(path,"utf8"));
	} else {
		return gml_Project.current.readJsonFileSync(path);
	}
};
electron_FileWrap.readGmxFileSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		return gmx_SfGmx.parse(Electron_FS.readFileSync(path,"utf8"));
	} else {
		return gml_Project.current.readGmxFileSync(path);
	}
};
electron_FileWrap.mkdirSync = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_FS.mkdirSync(path);
	} else {
		gml_Project.current.mkdirSync(path);
	}
};
electron_FileWrap.openExternal = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_IPC.send("shell-open",path);
	} else {
		gml_Project.current.openExternal(path);
	}
};
electron_FileWrap.showItemInFolder = function(path) {
	if(haxe_io_Path.isAbsolute(path)) {
		Electron_IPC.send("shell-show",path);
	} else {
		gml_Project.current.showItemInFolder(path);
	}
};
electron_FileWrap.readConfigSync = function(cat,name) {
	var text = null;
	if(Electron_FS.existsSync != null) {
		var full = electron_FileWrap.userPath + "/" + cat + "/" + name + ".json";
		if(Electron_FS.existsSync(full)) {
			try {
				text = Electron_FS.readFileSync(full,"utf8");
			} catch( _ ) {
			}
		}
	}
	if(text == null) {
		text = window.localStorage.getItem(name);
	}
	if(text == null) {
		return null;
	}
	try {
		return JSON.parse(text);
	} catch( _1 ) {
		return null;
	}
};
electron_FileWrap.writeConfigSync = function(cat,name,obj) {
	var text = JSON.stringify(obj,null,"\t");
	if(Electron_FS.existsSync != null) {
		Electron_FS.writeFileSync(electron_FileWrap.userPath + "/" + cat + "/" + name + ".json",text);
	} else {
		window.localStorage.setItem(name,text);
	}
};
var electron_MenuFallback = function() {
	this.items = [];
	this.element = document.createElement("ul");
	this.element.classList.add("popout-menu");
};
$hxClasses["electron.MenuFallback"] = electron_MenuFallback;
electron_MenuFallback.__name__ = "electron.MenuFallback";
electron_MenuFallback.appendOpt = function(menu,opt) {
	var item = new Electron_MenuItem(opt);
	menu.append(item);
	return item;
};
electron_MenuFallback.prototype = {
	clear: function() {
		this.items.length = 0;
		tools_HtmlTools.clearInner(this.element);
	}
	,append: function(item) {
		item.parent = this;
		this.items.push(item);
		this.element.appendChild(item.element);
	}
	,insert: function(pos,item) {
		item.parent = this;
		this.items.splice(pos,0,item);
	}
	,outerClick: function(e) {
		var el = e.target;
		while(el != null) {
			if(el == this.element) {
				return;
			}
			el = el.parentElement;
		}
		this.hide();
	}
	,hide: function() {
		document.removeEventListener("mousedown",$bind(this,this.outerClick));
		if(this.element.parentElement != null) {
			this.element.parentElement.removeChild(this.element);
		}
	}
	,popup: function(wnd,opt) {
		if(electron_MenuFallback.contextEvent != null) {
			this.element.style.left = electron_MenuFallback.contextEvent.pageX + "px";
			this.element.style.top = electron_MenuFallback.contextEvent.pageY + "px";
		}
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) _g1[_g++].update();
		document.addEventListener("mousedown",$bind(this,this.outerClick));
		document.body.appendChild(this.element);
	}
	,__class__: electron_MenuFallback
};
var electron_MenuItemFallback = function(opt) {
	this.parent = null;
	var _gthis = this;
	this.enabled = opt.enabled != false;
	this.visible = opt.visible != false;
	this.checked = opt.checked;
	this.label = opt.label;
	this.click = opt.click;
	this.element = document.createElement("li");
	this.element.classList.add("popout-menu-" + (opt.type != null ? opt.type : "normal"));
	if(opt.label != null) {
		this.currLabel = opt.label;
		this.labelEl = document.createElement("span");
		this.labelEl.appendChild(document.createTextNode(opt.label));
		this.element.appendChild(this.labelEl);
	}
	if(this.click != null) {
		this.element.addEventListener("click",function(e) {
			if(!_gthis.enabled) {
				return;
			}
			if(_gthis.parent != null) {
				_gthis.parent.hide();
			}
			if(_gthis.click != null) {
				_gthis.click();
			}
		});
	}
	if(opt.submenu != null) {
		var submenu;
		if(((opt.submenu) instanceof Array) && opt.submenu.__enum__ == null) {
			var opts = opt.submenu;
			submenu = new electron_MenuFallback();
			var _g = 0;
			while(_g < opts.length) submenu.append(new electron_MenuItemFallback(opts[_g++]));
		} else {
			submenu = opt.submenu;
		}
		this.element.appendChild(submenu.element);
	}
};
$hxClasses["electron.MenuItemFallback"] = electron_MenuItemFallback;
electron_MenuItemFallback.__name__ = "electron.MenuItemFallback";
electron_MenuItemFallback.prototype = {
	update: function() {
		this.element.style.display = this.visible ? "" : "none";
		if(this.label != this.currLabel) {
			this.currLabel = this.label;
			tools_HtmlTools.setInnerText(this.labelEl,this.label);
		}
		tools_HtmlTools.setAttributeFlag(this.element,"disabled",!this.enabled);
		if(this.checked != null) {
			tools_HtmlTools.setAttributeFlag(this.element,"checked",this.checked);
		}
	}
	,__class__: electron_MenuItemFallback
};
var electron_WindowsAccentColors = function() { };
$hxClasses["electron.WindowsAccentColors"] = electron_WindowsAccentColors;
electron_WindowsAccentColors.__name__ = "electron.WindowsAccentColors";
electron_WindowsAccentColors.init = function() {
	if(electron_WindowsAccentColors.ready) {
		return;
	}
	electron_WindowsAccentColors.ready = true;
	try {
		if(Electron_API == null) {
			return;
		}
		if(window.process.platform != "win32") {
			return;
		}
		var remote = Electron_API.remote;
		var path = require("path");
		var appPath = remote.app.getAppPath();
		var jsPath = path.resolve(appPath,"./misc/WindowsAccentColors.js");
		electron_WindowsAccentColors.impl = require(jsPath);
	} catch( x ) {
		console.log("Error initializing accent colors: ",((x) instanceof js__$Boot_HaxeError) ? x.val : x);
	}
};
electron_WindowsAccentColors.updateFocus = function(active) {
	if(electron_WindowsAccentColors.impl == null) {
		return;
	}
	var html = document.documentElement;
	var style = html.style;
	var pre = active ? "active" : "inactive";
	html.setAttribute("titlebar-foreground-is-light",html.getAttribute(pre + "-titlebar-foreground-is-light"));
	style.setProperty("--titlebar-background-color",style.getPropertyValue("--" + pre + "-titlebar-background-color"));
	style.setProperty("--titlebar-foreground-color",style.getPropertyValue("--" + pre + "-titlebar-foreground-color"));
};
electron_WindowsAccentColors.update = function() {
	if(electron_WindowsAccentColors.impl == null) {
		electron_WindowsAccentColors.init();
	} else {
		electron_WindowsAccentColors.impl.reload();
	}
	if(electron_WindowsAccentColors.impl == null) {
		return;
	}
	if(!electron_WindowsAccentColors.impl.isDetectable) {
		return;
	}
	var fc0 = electron_WindowsAccentColors.impl.inactiveTitlebarTextColor;
	var fc1 = electron_WindowsAccentColors.impl.titlebarTextColor;
	var html = document.documentElement;
	html.setAttribute("hasAccentColors","");
	html.setAttribute("active-titlebar-foreground-is-light","" + Std.string(fc1 == "#ffffff"));
	html.setAttribute("inactive-titlebar-foreground-is-light","" + Std.string(fc0 == "#ffffff"));
	var style = html.style;
	style.setProperty("--active-titlebar-background-color",electron_WindowsAccentColors.impl.titlebarColor);
	style.setProperty("--active-titlebar-foreground-color",fc1);
	style.setProperty("--inactive-titlebar-background-color",electron_WindowsAccentColors.impl.inactiveTitlebarColor);
	style.setProperty("--inactive-titlebar-foreground-color",fc0);
	electron_WindowsAccentColors.updateFocus(document.documentElement.hasAttribute("hasFocus"));
};
var file_FileKind = function() {
	this.checkSelfForChanges = true;
};
$hxClasses["file.FileKind"] = file_FileKind;
file_FileKind.__name__ = "file.FileKind";
file_FileKind.register = function(fileExt,file1) {
	var arr = file_FileKind.map[fileExt];
	if(arr == null) {
		arr = [];
		file_FileKind.map[fileExt] = arr;
	}
	arr.unshift(file1);
};
file_FileKind.initStatic = function() {
	file_FileKind.register("gml",file_kind_gml_KGmlScript.inst);
	file_FileKind.register("txt",file_kind_misc_KPlain.inst);
	file_FileKind.register("shader",file_kind_misc_KGLSL.inst);
	file_FileKind.register("vsh",file_kind_misc_KGLSL.inst);
	file_FileKind.register("fsh",file_kind_misc_KGLSL.inst);
	file_FileKind.register("gmx",file_kind_KGmx.inst);
	file_kind_KGmx.register("object",file_kind_gmx_KGmxEvents.inst);
	file_kind_KGmx.register("timeline",file_kind_gmx_KGmxMoments.inst);
	file_kind_KGmx.register("project",new file_kind_gmx_KGmxMacros(false));
	file_kind_KGmx.register("config",new file_kind_gmx_KGmxMacros(true));
	file_kind_KGmx.register("sprite",file_kind_gmx_KGmxSprite.inst);
	file_FileKind.register("yy",file_kind_KYy.inst);
	file_kind_KYy.register("GMObject",file_kind_yy_KYyEvents.inst);
	file_kind_KYy.register("GMShader",file_kind_yy_KYyShader.inst);
	file_kind_KYy.register("GMTimeline",file_kind_yy_KYyMoments.inst);
	file_kind_KYy.register("GMScript",file_kind_gml_KGmlScript.inst);
	file_kind_KYy.register("GMSprite",file_kind_yy_KYySprite.inst);
	file_FileKind.register("md",new file_kind_misc_KMarkdown(false));
	file_FileKind.register("dmd",new file_kind_misc_KMarkdown(true));
	file_FileKind.register("js",file_kind_misc_KJavaScript.inst);
	file_FileKind.register("json",file_kind_misc_KJavaScript.inst);
};
file_FileKind.prototype = {
	getName: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,getTabContext: function(file1,data) {
		if(file1.path != null) {
			return file1.path;
		}
		return file1.name;
	}
	,create: function(name,path,data,nav) {
		var file1 = new gml_file_GmlFile(name,path,this,data);
		gml_file_GmlFile.openTab(file1);
		if(file1.codeEditor != null) {
			window.setTimeout(function() {
				Main.aceEditor.focus();
				if(nav != null) {
					file1.navigate(nav);
				}
			});
		}
		return file1;
	}
	,init: function(file1,data) {
	}
	,detect: function(path,data) {
		return { kind : this, data : data};
	}
	,checkForChanges: function(editor) {
		var file1 = editor.file;
		var path = file1.path;
		if(this.checkSelfForChanges) {
			if(path == null || !haxe_io_Path.isAbsolute(path)) {
				return 0;
			}
			if(!Electron_FS.existsSync(path)) {
				return -1;
			}
		}
		var changed = false;
		if(this.checkSelfForChanges) {
			try {
				var time1 = Electron_FS.statSync(path).mtime.getTime();
				if(time1 > file1.time) {
					file1.time = time1;
					changed = true;
				}
			} catch( e ) {
				console.error("Error checking " + path + ": ",((e) instanceof js__$Boot_HaxeError) ? e.val : e);
			}
		}
		var _g = 0;
		var _g1 = file1.extraFiles;
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			try {
				var ppath = pair.path;
				if(!haxe_io_Path.isAbsolute(ppath) || !Electron_FS.existsSync(ppath)) {
					continue;
				}
				var time11 = Electron_FS.statSync(ppath).mtime.getTime();
				if(time11 > pair.time) {
					pair.time = time11;
					changed = true;
				}
			} catch( e1 ) {
				console.error("Error checking " + pair.path + ": ",((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1);
			}
		}
		if(changed) {
			return 1;
		} else {
			return 0;
		}
	}
	,navigate: function(editor,nav) {
		return false;
	}
	,__class__: file_FileKind
};
var file_kind_KCode = function() {
	this.indexOnSave = false;
	this.modePath = "ace/mode/text";
	file_FileKind.call(this);
};
$hxClasses["file.kind.KCode"] = file_kind_KCode;
file_kind_KCode.__name__ = "file.kind.KCode";
file_kind_KCode.__super__ = file_FileKind;
file_kind_KCode.prototype = $extend(file_FileKind.prototype,{
	init: function(file1,data) {
		file1.codeEditor = new editors_EditCode(file1,this.modePath);
		file1.editor = file1.codeEditor;
	}
	,loadCode: function(editor,data) {
		if(data != null) {
			return data;
		} else {
			return electron_FileWrap.readTextFileSync(editor.file.path);
		}
	}
	,saveCode: function(editor,code) {
		electron_FileWrap.writeTextFileSync(editor.file.path,code);
		return true;
	}
	,preproc: function(editor,code) {
		return code;
	}
	,postproc: function(editor,code) {
		return code;
	}
	,__class__: file_kind_KCode
});
var file_kind_KGml = function() {
	this.canSyntaxCheck = true;
	this.canDefineComp = false;
	this.canMFunc = true;
	this.canHyper = true;
	this.canLambda = true;
	this.canImport = true;
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/gml";
	this.indexOnSave = true;
};
$hxClasses["file.kind.KGml"] = file_kind_KGml;
file_kind_KGml.__name__ = "file.kind.KGml";
file_kind_KGml.__super__ = file_kind_KCode;
file_kind_KGml.prototype = $extend(file_kind_KCode.prototype,{
	preproc: function(editor,code) {
		var onDisk = editor.file.path != null;
		if(this.canMFunc) {
			code = parsers_GmlExtMFunc.pre(editor,code);
		}
		if(onDisk && this.canLambda) {
			code = parsers_GmlExtLambda.pre(editor,code);
		}
		if(onDisk && this.canImport) {
			code = parsers_GmlExtImport.pre(code,editor.file.path);
		}
		if(this.canHyper) {
			code = parsers_GmlExtHyper.pre(code);
		}
		return code;
	}
	,postproc: function(editor,code) {
		this.saveSessionChanged = false;
		var onDisk = editor.file.path != null;
		if(this.canHyper) {
			code = parsers_GmlExtHyper.post(code);
		}
		if(onDisk && this.canImport) {
			var pair = editor.postpImport(code);
			if(pair == null) {
				return null;
			}
			code = pair.val;
			if(pair.sessionChanged) {
				this.saveSessionChanged = true;
			}
		}
		if(onDisk && this.canLambda) {
			code = parsers_GmlExtLambda.post(editor,code);
			if(code == null) {
				window.alert("Can't process #lambda:\n" + parsers_GmlExtLambda.errorText);
				return null;
			}
		}
		if(this.canMFunc) {
			code = parsers_GmlExtMFunc.post(editor,code);
			if(code == null) {
				window.alert("Can't process #mfunc:\n" + parsers_GmlExtMFunc.errorText);
				return null;
			}
		}
		return code;
	}
	,navigate: function(editor,nav) {
		var session = editor.session;
		var len = session.getLength();
		var found = false;
		var row = 0;
		var col = 0;
		var i;
		var s;
		if(nav.def != null) {
			var rxDef = new RegExp("^(#define|#event|#moment|#target)[ \t]" + nav.def.replace(tools_NativeString.escapeRx_1,"\\$1") + "\\b");
			i = 0;
			while(i < len) {
				s = session.getLine(i);
				if(rxDef.test(s)) {
					row = i;
					col = s.length;
					found = true;
					break;
				} else {
					++i;
				}
			}
		}
		var ctx = nav.ctx;
		if(ctx != null) {
			var rxCtx = new RegExp(ctx.replace(tools_NativeString.escapeRx_1,"\\$1"));
			var rxEof = new RegExp("^(#define|#event|#moment|#target)");
			i = row;
			if(nav.ctxAfter && nav.pos != null) {
				i += nav.pos.row;
			}
			var start = found ? i : -1;
			while(i < len) {
				s = session.getLine(i);
				if(i != start && rxEof.test(s)) {
					break;
				}
				var vals = rxCtx.exec(s);
				if(vals != null) {
					row = i;
					col = vals.index;
					found = true;
					break;
				} else {
					++i;
				}
			}
		}
		var pos = nav.pos;
		if(pos != null) {
			if(ctx == null && nav.def != null) {
				col = 0;
				++row;
			}
			if(!found || !nav.ctxAfter) {
				row += pos.row;
				col += pos.column;
				found = true;
			}
		}
		if(found) {
			if(nav.showAtTop) {
				Main.aceEditor.scrollToLine(row);
				var f = ($_=Main.aceEditor,$bind($_,$_.scrollToLine));
				var z = Main.aceEditor.hasOwnProperty("scrollToLine");
				Main.aceEditor.scrollToLine = function() {
				};
				Main.aceEditor.gotoLine(row + 1,col);
				if(z) {
					Main.aceEditor.scrollToLine = f;
				} else {
					delete Main.aceEditor.scrollToLine;
				}
			} else {
				Main.aceEditor.gotoLine(row + 1,col);
			}
		}
		return found;
	}
	,__class__: file_kind_KGml
});
var file_kind_KGmx = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.KGmx"] = file_kind_KGmx;
file_kind_KGmx.__name__ = "file.kind.KGmx";
file_kind_KGmx.register = function(subExt,file1) {
	var arr = file_kind_KGmx.map[subExt];
	if(arr == null) {
		arr = [];
		file_kind_KGmx.map[subExt] = arr;
	}
	arr.unshift(file1);
};
file_kind_KGmx.__super__ = file_FileKind;
file_kind_KGmx.prototype = $extend(file_FileKind.prototype,{
	detect: function(path,data) {
		var ext = haxe_io_Path.extension(haxe_io_Path.withoutExtension(path)).toLowerCase();
		var kinds = file_kind_KGmx.map[ext];
		if(kinds != null) {
			var _g = 0;
			while(_g < kinds.length) {
				var out = kinds[_g++].detect(path,data);
				if(out != null) {
					return out;
				}
			}
		}
		return null;
	}
	,__class__: file_kind_KGmx
});
var file_kind_KYy = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.KYy"] = file_kind_KYy;
file_kind_KYy.__name__ = "file.kind.KYy";
file_kind_KYy.register = function(modelName,file1) {
	var arr = file_kind_KYy.map[modelName];
	if(arr == null) {
		arr = [];
		file_kind_KYy.map[modelName] = arr;
	}
	arr.unshift(file1);
};
file_kind_KYy.__super__ = file_FileKind;
file_kind_KYy.prototype = $extend(file_FileKind.prototype,{
	detect: function(path,data) {
		var json = data != null ? data : electron_FileWrap.readJsonFileSync(path);
		var kinds = file_kind_KYy.map[json.modelName];
		if(kinds != null) {
			var _g = 0;
			while(_g < kinds.length) {
				var out = kinds[_g++].detect(path,json);
				if(out != null) {
					return out;
				}
			}
		}
		return file_FileKind.prototype.detect.call(this,path,json);
	}
	,create: function(name,path,data,nav) {
		var opt;
		var dunno = "GMEdit doesn't know how to open YY type " + (data != null ? data : electron_FileWrap.readJsonFileSync(path)).modelName + ".";
		if(Electron_FS.existsSync != null) {
			opt = Electron_Dialog.showMessageBox({ message : "" + dunno + " What would you like to do?", buttons : ["Open as JSON","Open in external editor","Show in directory","Do nothing"], defaultId : 3, cancelId : 3});
		} else {
			opt = window.confirm("" + dunno + " Would you like to open it as JSON?") ? 0 : 3;
		}
		switch(opt) {
		case 0:
			return file_kind_misc_KJavaScript.inst.create(name,path,null,nav);
		case 1:
			return file_kind_misc_KExtern.inst.create(name,path,null,nav);
		case 2:
			electron_FileWrap.showItemInFolder(path);
			break;
		}
		return null;
	}
	,__class__: file_kind_KYy
});
var file_kind_gml_KGmlScript = function() {
	this.isScript = true;
	file_kind_KGml.call(this);
	this.canDefineComp = true;
};
$hxClasses["file.kind.gml.KGmlScript"] = file_kind_gml_KGmlScript;
file_kind_gml_KGmlScript.__name__ = "file.kind.gml.KGmlScript";
file_kind_gml_KGmlScript.__super__ = file_kind_KGml;
file_kind_gml_KGmlScript.prototype = $extend(file_kind_KGml.prototype,{
	preproc: function(editor,code) {
		code = parsers_GmlExtCoroutines.pre(code);
		code = file_kind_KGml.prototype.preproc.call(this,editor,code);
		code = parsers_GmlExtArgs.pre(code);
		return code;
	}
	,postproc_1: function(editor,out,sessionChanged) {
		var file1 = editor.file;
		var onDisk = file1.path != null;
		out = parsers_GmlExtArgs.post(out);
		if(out == null) {
			window.alert("Can't process #args:\n" + parsers_GmlExtArgs.errorText);
			return null;
		}
		out = parsers_GmlExtHyper.post(out);
		var canCoroutines = this.isScript;
		if(this.isScript && ui_Preferences.current.argsFormat != "") {
			if(!sessionChanged && parsers_GmlExtArgsDoc.proc(file1)) {
				sessionChanged = true;
				out = editor.session.getValue();
				if(onDisk && this.canImport) {
					var pair = editor.postpImport(out);
					if(pair == null) {
						return null;
					}
					out = pair.val;
				}
				if(this.canLambda) {
					out = parsers_GmlExtLambda.post(editor,out);
					if(out == null) {
						window.alert("Can't process #lambda:\n" + parsers_GmlExtLambda.errorText);
						return null;
					}
				}
				out = this.postproc_1(editor,out,true);
				if(out == null) {
					return null;
				}
				canCoroutines = false;
				window.setTimeout(function() {
					file1.markClean();
				});
			}
		}
		if(canCoroutines) {
			out = parsers_GmlExtCoroutines.post(out);
			if(out == null) {
				window.alert(parsers_GmlExtCoroutines.errorText);
				return null;
			}
		}
		return out;
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return code;
		}
		return this.postproc_1(editor,code,this.saveSessionChanged);
	}
	,__class__: file_kind_gml_KGmlScript
});
var file_kind_gml_KGmlExtension = function() {
	file_kind_gml_KGmlScript.call(this);
	this.isScript = false;
	this.canDefineComp = false;
};
$hxClasses["file.kind.gml.KGmlExtension"] = file_kind_gml_KGmlExtension;
file_kind_gml_KGmlExtension.__name__ = "file.kind.gml.KGmlExtension";
file_kind_gml_KGmlExtension.__super__ = file_kind_gml_KGmlScript;
file_kind_gml_KGmlExtension.prototype = $extend(file_kind_gml_KGmlScript.prototype,{
	__class__: file_kind_gml_KGmlExtension
});
var file_kind_gml_KGmlLambdas = function() {
	file_kind_KGml.call(this);
	this.canLambda = false;
};
$hxClasses["file.kind.gml.KGmlLambdas"] = file_kind_gml_KGmlLambdas;
file_kind_gml_KGmlLambdas.__name__ = "file.kind.gml.KGmlLambdas";
file_kind_gml_KGmlLambdas.__super__ = file_kind_KGml;
file_kind_gml_KGmlLambdas.prototype = $extend(file_kind_KGml.prototype,{
	__class__: file_kind_gml_KGmlLambdas
});
var file_kind_gml_KGmlMultifile = function() {
	file_kind_KGml.call(this);
	this.checkSelfForChanges = false;
};
$hxClasses["file.kind.gml.KGmlMultifile"] = file_kind_gml_KGmlMultifile;
file_kind_gml_KGmlMultifile.__name__ = "file.kind.gml.KGmlMultifile";
file_kind_gml_KGmlMultifile.__super__ = file_kind_KGml;
file_kind_gml_KGmlMultifile.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		var file1 = editor.file;
		if(data != null) {
			file1.multidata = data;
		}
		file1.extraFiles.length = 0;
		var out = "";
		var errors = "";
		var _g = 0;
		var _g1 = file1.multidata;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(out != "") {
				out += "\n\n";
			}
			out += "#define " + item.name + "\n";
			var itemSubs = parsers_GmlMultifile.split(electron_FileWrap.readTextFileSync(item.path),item.name);
			if(itemSubs == null) {
				errors += "Can't open " + item.name + " for editing: " + parsers_GmlMultifile.errorText + "\n";
			} else {
				switch(itemSubs.length) {
				case 0:
					break;
				case 1:
					out += itemSubs[0].code.trimRight();
					break;
				default:
					errors += "Can't open " + item.name + " for editing because it contains multiple scripts.\n";
				}
			}
			file1.extraFiles.push(new gml_file_GmlFileExtra(item.path));
		}
		if(errors == "") {
			parsers_GmlSeeker.runSync(file1.path,out,"",file1.kind);
			return out;
		} else {
			return editor.setLoadError(errors);
		}
	}
	,preproc: function(editor,code) {
		code = file_kind_KGml.prototype.preproc.call(this,editor,code);
		code = parsers_GmlExtArgs.pre(code);
		return code;
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		code = parsers_GmlExtArgs.post(code);
		if(code == null) {
			window.alert("Can't process #args:\n" + parsers_GmlExtArgs.errorText);
			return null;
		}
		return code;
	}
	,saveCode: function(editor,code) {
		var file1 = editor.file;
		var next = parsers_GmlMultifile.split(code,"<detached code>");
		var map0 = Object.create(null);
		var _g = 0;
		var _g1 = file1.multidata;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			map0[item.name] = item.path;
		}
		var errors = "";
		var _g2 = 0;
		while(_g2 < next.length) {
			var item1 = next[_g2];
			++_g2;
			var itemPath = map0[item1.name];
			if(itemPath != null) {
				var itemCode = item1.code;
				electron_FileWrap.writeTextFileSync(itemPath,itemCode);
				parsers_GmlSeeker.runSync(itemPath,itemCode,item1.name,file_kind_gml_KGmlScript.inst);
			} else {
				errors += "Can't save script " + item1.name + " because it is not among the edited group.\n";
			}
		}
		if(errors != "") {
			window.alert(errors);
			return false;
		} else {
			return true;
		}
	}
	,__class__: file_kind_gml_KGmlMultifile
});
var file_kind_gml_KGmlSearchResults = function() {
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/gml_search";
};
$hxClasses["file.kind.gml.KGmlSearchResults"] = file_kind_gml_KGmlSearchResults;
file_kind_gml_KGmlSearchResults.__name__ = "file.kind.gml.KGmlSearchResults";
file_kind_gml_KGmlSearchResults.__super__ = file_kind_KCode;
file_kind_gml_KGmlSearchResults.prototype = $extend(file_kind_KCode.prototype,{
	getTabContext: function(file1,data) {
		return file1.name + "#" + file_kind_gml_KGmlSearchResults.nextId++;
	}
	,loadCode: function(editor,data) {
		return data;
	}
	,saveCode: function(editor,code) {
		var file1 = editor.file;
		if(file1.searchData == null) {
			return false;
		}
		if(!file1.searchData.save(file1)) {
			return false;
		}
		file1.markClean();
		return true;
	}
	,__class__: file_kind_gml_KGmlSearchResults
});
var file_kind_gmx_KGmxEvents = function() {
	file_kind_KGml.call(this);
};
$hxClasses["file.kind.gmx.KGmxEvents"] = file_kind_gmx_KGmxEvents;
file_kind_gmx_KGmxEvents.__name__ = "file.kind.gmx.KGmxEvents";
file_kind_gmx_KGmxEvents.__super__ = file_kind_KGml;
file_kind_gmx_KGmxEvents.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		var out = gmx_GmxObject.getCode(gmx_SfGmx.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data)));
		if(out == null) {
			return editor.setLoadError(gmx_GmxObject.errorText);
		} else {
			return out;
		}
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return null;
		}
		var root = electron_FileWrap.readGmxFileSync(editor.file.path);
		if(!gmx_GmxObject.setCode(root,code)) {
			editor.setSaveError("Can't update GMX:\n" + gmx_GmxObject.errorText);
			return null;
		}
		return root.toGmxString();
	}
	,__class__: file_kind_gmx_KGmxEvents
});
var file_kind_gmx_KGmxExtensionAPI = function() {
	file_kind_KGml.call(this);
	this.canLambda = false;
	this.canImport = false;
	this.canHyper = false;
	this.canSyntaxCheck = false;
};
$hxClasses["file.kind.gmx.KGmxExtensionAPI"] = file_kind_gmx_KGmxExtensionAPI;
file_kind_gmx_KGmxExtensionAPI.__name__ = "file.kind.gmx.KGmxExtensionAPI";
file_kind_gmx_KGmxExtensionAPI.__super__ = file_kind_KGml;
file_kind_gmx_KGmxExtensionAPI.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		if(data == null) {
			data = file_kind_KGml.prototype.loadCode.call(this,editor,data);
		}
		return gml_GmlExtensionAPI.get1(data);
	}
	,saveCode: function(editor,code) {
		return false;
	}
	,__class__: file_kind_gmx_KGmxExtensionAPI
});
var file_kind_gmx_KGmxMacros = function(isConfig) {
	file_kind_KGml.call(this);
	this.isConfig = isConfig;
};
$hxClasses["file.kind.gmx.KGmxMacros"] = file_kind_gmx_KGmxMacros;
file_kind_gmx_KGmxMacros.__name__ = "file.kind.gmx.KGmxMacros";
file_kind_gmx_KGmxMacros.__super__ = file_kind_KGml;
file_kind_gmx_KGmxMacros.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		var root = gmx_SfGmx.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data));
		var notePath = gmx_GmxProject.getNotePath(editor.file.path);
		var noteReader = null;
		if(electron_FileWrap.existsSync(notePath)) {
			noteReader = new parsers_GmlReader(electron_FileWrap.readTextFileSync(notePath));
		}
		return gmx_GmxProject.getMacroCode(root,noteReader,this.isConfig);
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return null;
		}
		var root = electron_FileWrap.readGmxFileSync(editor.file.path);
		var notes = new tools_StringBuilder();
		gmx_GmxProject.setMacroCode(root,code,notes,this.isConfig);
		var notePath = gmx_GmxProject.getNotePath(editor.file.path);
		if(notes.b.length > 0) {
			electron_FileWrap.writeTextFileSync(notePath,notes.b);
		} else if(electron_FileWrap.existsSync(notePath)) {
			electron_FileWrap.unlinkSync(notePath);
		}
		return root.toGmxString();
	}
	,__class__: file_kind_gmx_KGmxMacros
});
var file_kind_gmx_KGmxMoments = function() {
	file_kind_KGml.call(this);
};
$hxClasses["file.kind.gmx.KGmxMoments"] = file_kind_gmx_KGmxMoments;
file_kind_gmx_KGmxMoments.__name__ = "file.kind.gmx.KGmxMoments";
file_kind_gmx_KGmxMoments.__super__ = file_kind_KGml;
file_kind_gmx_KGmxMoments.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		var code = gmx_GmxTimeline.getCode(gmx_SfGmx.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data)));
		if(code != null) {
			return code;
		}
		return editor.setLoadError(gmx_GmxTimeline.errorText);
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return null;
		}
		var root = electron_FileWrap.readGmxFileSync(editor.file.path);
		if(!gmx_GmxTimeline.setCode(root,code)) {
			editor.setSaveError("Can't update GMX:\n" + gmx_GmxTimeline.errorText);
			return null;
		}
		return root.toGmxString();
	}
	,__class__: file_kind_gmx_KGmxMoments
});
var file_kind_gmx_KGmxSprite = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.gmx.KGmxSprite"] = file_kind_gmx_KGmxSprite;
file_kind_gmx_KGmxSprite.__name__ = "file.kind.gmx.KGmxSprite";
file_kind_gmx_KGmxSprite.__super__ = file_FileKind;
file_kind_gmx_KGmxSprite.prototype = $extend(file_FileKind.prototype,{
	init: function(file1,data) {
		file1.editor = new editors_EditSprite(file1);
	}
	,__class__: file_kind_gmx_KGmxSprite
});
var file_kind_misc_KExtern = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.misc.KExtern"] = file_kind_misc_KExtern;
file_kind_misc_KExtern.__name__ = "file.kind.misc.KExtern";
file_kind_misc_KExtern.__super__ = file_FileKind;
file_kind_misc_KExtern.prototype = $extend(file_FileKind.prototype,{
	create: function(name,path,data,nav) {
		electron_FileWrap.openExternal(path);
		return null;
	}
	,__class__: file_kind_misc_KExtern
});
var file_kind_misc_KGLSL = function() {
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/shader";
};
$hxClasses["file.kind.misc.KGLSL"] = file_kind_misc_KGLSL;
file_kind_misc_KGLSL.__name__ = "file.kind.misc.KGLSL";
file_kind_misc_KGLSL.__super__ = file_kind_KCode;
file_kind_misc_KGLSL.prototype = $extend(file_kind_KCode.prototype,{
	init: function(file1,data) {
		shaders_ShaderHighlight.nextKind = 1;
		file_kind_KCode.prototype.init.call(this,file1,data);
	}
	,__class__: file_kind_misc_KGLSL
});
var file_kind_misc_KHLSL = function() {
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/shader";
};
$hxClasses["file.kind.misc.KHLSL"] = file_kind_misc_KHLSL;
file_kind_misc_KHLSL.__name__ = "file.kind.misc.KHLSL";
file_kind_misc_KHLSL.__super__ = file_kind_KCode;
file_kind_misc_KHLSL.prototype = $extend(file_kind_KCode.prototype,{
	init: function(file1,data) {
		shaders_ShaderHighlight.nextKind = 2;
		file_kind_KCode.prototype.init.call(this,file1,data);
	}
	,__class__: file_kind_misc_KHLSL
});
var file_kind_misc_KJavaScript = function() {
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/javascript";
};
$hxClasses["file.kind.misc.KJavaScript"] = file_kind_misc_KJavaScript;
file_kind_misc_KJavaScript.__name__ = "file.kind.misc.KJavaScript";
file_kind_misc_KJavaScript.__super__ = file_kind_KCode;
file_kind_misc_KJavaScript.prototype = $extend(file_kind_KCode.prototype,{
	__class__: file_kind_misc_KJavaScript
});
var file_kind_misc_KMarkdown = function(dmd) {
	file_kind_KCode.call(this);
	this.isDocMd = dmd;
	this.modePath = "ace/mode/markdown";
};
$hxClasses["file.kind.misc.KMarkdown"] = file_kind_misc_KMarkdown;
file_kind_misc_KMarkdown.__name__ = "file.kind.misc.KMarkdown";
file_kind_misc_KMarkdown.__super__ = file_kind_KCode;
file_kind_misc_KMarkdown.prototype = $extend(file_kind_KCode.prototype,{
	navigate: function(editor,nav) {
		var session = editor.session;
		var len = session.getLength();
		var found = false;
		var row = 0;
		var col = 0;
		var i;
		var s;
		var defIndent = null;
		if(nav.def != null) {
			var rxDef = this.isDocMd ? new RegExp("^([ \t]*)#\\[" + nav.def.replace(tools_NativeString.escapeRx_1,"\\$1") + "\\]") : new RegExp("^[ \t]*#+[ \t]*" + nav.def.replace(tools_NativeString.escapeRx_1,"\\$1") + "[ \t]*$");
			i = 0;
			while(i < len) {
				s = session.getLine(i);
				var mt = rxDef.exec(s);
				if(mt != null) {
					row = i;
					col = s.length;
					found = true;
					if(this.isDocMd) {
						defIndent = mt[1];
					}
					break;
				} else {
					++i;
				}
			}
		}
		var ctx = nav.ctx;
		if(ctx != null) {
			var rxCtx = new RegExp(ctx.replace(tools_NativeString.escapeRx_1,"\\$1"));
			var rxEof = defIndent != null ? new RegExp("^" + defIndent + "}") : null;
			i = row;
			if(nav.ctxAfter && nav.pos != null) {
				i += nav.pos.row;
			}
			var start = found ? i : -1;
			while(i < len) {
				s = session.getLine(i);
				if(i != start && rxEof != null && rxEof.test(s)) {
					break;
				}
				var vals = rxCtx.exec(s);
				if(vals != null) {
					row = i;
					col = vals.index;
					found = true;
					break;
				} else {
					++i;
				}
			}
		}
		var pos = nav.pos;
		if(pos != null) {
			if(ctx == null && nav.def != null) {
				col = 0;
				++row;
			}
			if(!found || !nav.ctxAfter) {
				row += pos.row;
				col += pos.column;
				found = true;
			}
		}
		if(found) {
			if(nav.showAtTop) {
				Main.aceEditor.scrollToLine(row);
			}
			Main.aceEditor.gotoLine(row + 1,col);
		}
		return found;
	}
	,__class__: file_kind_misc_KMarkdown
});
var file_kind_misc_KPlain = function() {
	file_kind_KCode.call(this);
	this.modePath = "ace/mode/text";
};
$hxClasses["file.kind.misc.KPlain"] = file_kind_misc_KPlain;
file_kind_misc_KPlain.__name__ = "file.kind.misc.KPlain";
file_kind_misc_KPlain.__super__ = file_kind_KCode;
file_kind_misc_KPlain.prototype = $extend(file_kind_KCode.prototype,{
	__class__: file_kind_misc_KPlain
});
var file_kind_misc_KPreferences = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.misc.KPreferences"] = file_kind_misc_KPreferences;
file_kind_misc_KPreferences.__name__ = "file.kind.misc.KPreferences";
file_kind_misc_KPreferences.__super__ = file_FileKind;
file_kind_misc_KPreferences.prototype = $extend(file_FileKind.prototype,{
	init: function(file1,data) {
		file1.editor = new file_kind_misc__$KPreferences_KPreferencesEditor(file1);
	}
	,__class__: file_kind_misc_KPreferences
});
var file_kind_misc__$KPreferences_KPreferencesEditor = function(file1) {
	editors_Editor.call(this,file1);
	var el = ui_Preferences.element;
	if(el == null) {
		el = document.createElement("div");
		el.classList.add("popout-window");
		el.id = "preferences-editor";
		ui_Preferences.element = el;
		ui_Preferences.buildMain();
	}
	this.element = ui_Preferences.element;
	ui_Preferences.setMenu(ui_Preferences.menuMain);
};
$hxClasses["file.kind.misc._KPreferences.KPreferencesEditor"] = file_kind_misc__$KPreferences_KPreferencesEditor;
file_kind_misc__$KPreferences_KPreferencesEditor.__name__ = "file.kind.misc._KPreferences.KPreferencesEditor";
file_kind_misc__$KPreferences_KPreferencesEditor.__super__ = editors_Editor;
file_kind_misc__$KPreferences_KPreferencesEditor.prototype = $extend(editors_Editor.prototype,{
	__class__: file_kind_misc__$KPreferences_KPreferencesEditor
});
var file_kind_misc_KProjectProperties = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.misc.KProjectProperties"] = file_kind_misc_KProjectProperties;
file_kind_misc_KProjectProperties.__name__ = "file.kind.misc.KProjectProperties";
file_kind_misc_KProjectProperties.__super__ = file_FileKind;
file_kind_misc_KProjectProperties.prototype = $extend(file_FileKind.prototype,{
	init: function(file1,data) {
		file1.editor = new file_kind_misc_KProjectPropertiesEditor(file1,data);
	}
	,__class__: file_kind_misc_KProjectProperties
});
var file_kind_misc_KProjectPropertiesEditor = function(file1,pj) {
	editors_Editor.call(this,file1);
	this.project = pj;
	if(pj.propertiesElement == null) {
		pj.propertiesElement = document.createElement("div");
		pj.propertiesElement.classList.add("popout-window");
		pj.propertiesElement.classList.add("project-properties");
		ui_project_ProjectProperties.build(pj,pj.propertiesElement);
	}
	this.element = pj.propertiesElement;
};
$hxClasses["file.kind.misc.KProjectPropertiesEditor"] = file_kind_misc_KProjectPropertiesEditor;
file_kind_misc_KProjectPropertiesEditor.__name__ = "file.kind.misc.KProjectPropertiesEditor";
file_kind_misc_KProjectPropertiesEditor.__super__ = editors_Editor;
file_kind_misc_KProjectPropertiesEditor.prototype = $extend(editors_Editor.prototype,{
	__class__: file_kind_misc_KProjectPropertiesEditor
});
var file_kind_misc_KSnippets = function() {
	file_kind_KCode.call(this);
};
$hxClasses["file.kind.misc.KSnippets"] = file_kind_misc_KSnippets;
file_kind_misc_KSnippets.__name__ = "file.kind.misc.KSnippets";
file_kind_misc_KSnippets.__super__ = file_kind_KCode;
file_kind_misc_KSnippets.prototype = $extend(file_kind_KCode.prototype,{
	loadCode: function(editor,data) {
		return ace_AceSnippets.getText(editor.file.path);
	}
	,saveCode: function(editor,code) {
		ace_AceSnippets.setText(editor.file.path,code);
		return true;
	}
	,checkForChanges: function(editor) {
		return 0;
	}
	,__class__: file_kind_misc_KSnippets
});
var file_kind_yy_KYyEvents = function() {
	file_kind_KGml.call(this);
};
$hxClasses["file.kind.yy.KYyEvents"] = file_kind_yy_KYyEvents;
file_kind_yy_KYyEvents.__name__ = "file.kind.yy.KYyEvents";
file_kind_yy_KYyEvents.__super__ = file_kind_KGml;
file_kind_yy_KYyEvents.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		if(data == null) {
			data = JSON.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data));
		}
		var file1 = editor.file;
		file1.extraFiles.length = 0;
		return yy__$YyObject_YyObject_$Impl_$.getCode(data,file1.path,file1.extraFiles);
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return null;
		}
		var obj = electron_FileWrap.readJsonFileSync(editor.file.path);
		if(!yy__$YyObject_YyObject_$Impl_$.setCode(obj,editor.file.path,code)) {
			editor.setSaveError("Can't update YY:\n" + yy__$YyObject_YyObject_$Impl_$.errorText);
			return null;
		}
		return tools_NativeString.yyJson(obj);
	}
	,__class__: file_kind_yy_KYyEvents
});
var file_kind_yy_KYyExtensionAPI = function() {
	file_kind_KGml.call(this);
	this.canLambda = false;
	this.canImport = false;
	this.canHyper = false;
	this.canSyntaxCheck = false;
};
$hxClasses["file.kind.yy.KYyExtensionAPI"] = file_kind_yy_KYyExtensionAPI;
file_kind_yy_KYyExtensionAPI.__name__ = "file.kind.yy.KYyExtensionAPI";
file_kind_yy_KYyExtensionAPI.__super__ = file_kind_KGml;
file_kind_yy_KYyExtensionAPI.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		if(data == null) {
			data = JSON.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data));
		}
		return gml_GmlExtensionAPI.get2(data);
	}
	,saveCode: function(editor,code) {
		return false;
	}
	,__class__: file_kind_yy_KYyExtensionAPI
});
var file_kind_yy_KYyMoments = function() {
	file_kind_KGml.call(this);
};
$hxClasses["file.kind.yy.KYyMoments"] = file_kind_yy_KYyMoments;
file_kind_yy_KYyMoments.__name__ = "file.kind.yy.KYyMoments";
file_kind_yy_KYyMoments.__super__ = file_kind_KGml;
file_kind_yy_KYyMoments.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		if(data == null) {
			data = JSON.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data));
		}
		var file1 = editor.file;
		file1.extraFiles.length = 0;
		return yy__$YyTimeline_YyTimeline_$Impl_$.getCode(data,file1.path,file1.extraFiles);
	}
	,postproc: function(editor,code) {
		code = file_kind_KGml.prototype.postproc.call(this,editor,code);
		if(code == null) {
			return null;
		}
		var tl = electron_FileWrap.readJsonFileSync(editor.file.path);
		if(!yy__$YyTimeline_YyTimeline_$Impl_$.setCode(tl,editor.file.path,code)) {
			editor.setSaveError("Can't update YY:\n" + yy__$YyTimeline_YyTimeline_$Impl_$.errorText);
			return null;
		}
		return tools_NativeString.yyJson(tl);
	}
	,__class__: file_kind_yy_KYyMoments
});
var file_kind_yy_KYyRoomCCs = function() {
	file_kind_KGml.call(this);
};
$hxClasses["file.kind.yy.KYyRoomCCs"] = file_kind_yy_KYyRoomCCs;
file_kind_yy_KYyRoomCCs.__name__ = "file.kind.yy.KYyRoomCCs";
file_kind_yy_KYyRoomCCs.__super__ = file_kind_KGml;
file_kind_yy_KYyRoomCCs.prototype = $extend(file_kind_KGml.prototype,{
	loadCode: function(editor,data) {
		if(data == null) {
			data = JSON.parse(file_kind_KGml.prototype.loadCode.call(this,editor,data));
		}
		var file1 = editor.file;
		file1.extraFiles.length = 0;
		var code = yy_YyRooms.getCCs(file1.path,data,file1.extraFiles);
		parsers_GmlSeeker.runSync(file1.path,code,"",file1.kind);
		return code;
	}
	,saveCode: function(editor,code) {
		if(code == null) {
			return null;
		}
		if(!yy_YyRooms.setCCs(editor.file.path,code,editor.file.extraFiles)) {
			editor.setSaveError("Can't update CCs:\n" + yy_YyRooms.errorText);
			return false;
		}
		return true;
	}
	,__class__: file_kind_yy_KYyRoomCCs
});
var file_kind_yy_KYyShader = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.yy.KYyShader"] = file_kind_yy_KYyShader;
file_kind_yy_KYyShader.__name__ = "file.kind.yy.KYyShader";
file_kind_yy_KYyShader.__super__ = file_FileKind;
file_kind_yy_KYyShader.prototype = $extend(file_FileKind.prototype,{
	create: function(name,path,data,nav) {
		var shKind;
		switch(data.type) {
		case 2:case 4:
			shKind = file_kind_misc_KHLSL.inst;
			break;
		default:
			shKind = file_kind_misc_KGLSL.inst;
		}
		var nav1 = { kind : shKind};
		if(nav != null) {
			nav1.pos = nav.pos;
			nav1.ctx = nav.ctx;
		}
		var pathNx = haxe_io_Path.withoutExtension(path);
		if(nav != null) {
			switch(nav.def) {
			case "fragment":
				return gml_file_GmlFile.open(name + ".fsh",pathNx + ".fsh",nav1);
			case "vertex":
				return gml_file_GmlFile.open(name + ".vsh",pathNx + ".vsh",nav1);
			}
		}
		gml_file_GmlFile.open(name + ".vsh",pathNx + ".vsh",nav1);
		gml_file_GmlFile.open(name + ".fsh",pathNx + ".fsh",nav1);
		return null;
	}
	,__class__: file_kind_yy_KYyShader
});
var file_kind_yy_KYySprite = function() {
	file_FileKind.call(this);
};
$hxClasses["file.kind.yy.KYySprite"] = file_kind_yy_KYySprite;
file_kind_yy_KYySprite.__name__ = "file.kind.yy.KYySprite";
file_kind_yy_KYySprite.__super__ = file_FileKind;
file_kind_yy_KYySprite.prototype = $extend(file_FileKind.prototype,{
	init: function(file1,data) {
		file1.editor = new editors_EditSprite(file1);
	}
	,__class__: file_kind_yy_KYySprite
});
var tools__$Dictionary_Dictionary_$Impl_$ = {};
$hxClasses["tools._Dictionary.Dictionary_Impl_"] = tools__$Dictionary_Dictionary_$Impl_$;
tools__$Dictionary_Dictionary_$Impl_$.__name__ = "tools._Dictionary.Dictionary_Impl_";
tools__$Dictionary_Dictionary_$Impl_$.fromKeys = function(keys,val) {
	var out = Object.create(null);
	var _g = 0;
	while(_g < keys.length) out[keys[_g++]] = val;
	return out;
};
tools__$Dictionary_Dictionary_$Impl_$.defget = function(this1,k,def) {
	if(Object.prototype.hasOwnProperty.call(this1,k)) {
		return this1[k];
	} else {
		return def;
	}
};
var gml_GmlAPI = $hx_exports["GmlAPI"] = function() { };
$hxClasses["gml.GmlAPI"] = gml_GmlAPI;
gml_GmlAPI.__name__ = "gml.GmlAPI";
gml_GmlAPI.set_version = function(v) {
	if(gml_GmlAPI.version != v) {
		gml_GmlAPI.version = v;
		gml_GmlAPI.init();
	}
	return v;
};
gml_GmlAPI.stdClear = function() {
	gml_GmlAPI.stdDoc = Object.create(null);
	gml_GmlAPI.stdComp.length = 0;
	var sk = Object.create(null);
	var _g = 0;
	var _g1 = gml_GmlAPI.kwList;
	while(_g < _g1.length) sk[_g1[_g++]] = "keyword";
	if(gml_GmlAPI.version == -1) {
		sk["wait"] = "keyword";
		sk["in"] = "keyword";
		sk["try"] = "keyword";
		sk["catch"] = "keyword";
		sk["throw"] = "keyword";
	}
	if(ui_Preferences.current.importMagic) {
		sk["new"] = "keyword";
	}
	gml_GmlAPI.stdKind = sk;
};
gml_GmlAPI.extCompAdd = function(comp) {
	if(!Object.prototype.hasOwnProperty.call(gml_GmlAPI.extCompMap,comp.name)) {
		gml_GmlAPI.extCompMap[comp.name] = comp;
		gml_GmlAPI.extComp.push(comp);
	}
};
gml_GmlAPI.extClear = function() {
	gml_GmlAPI.extDoc = Object.create(null);
	gml_GmlAPI.extKind = Object.create(null);
	gml_GmlAPI.extComp.length = 0;
	gml_GmlAPI.extCompMap = Object.create(null);
	gml_GmlAPI.extArgc = Object.create(null);
};
gml_GmlAPI.gmlClear = function() {
	gml_GmlAPI.gmlDoc = Object.create(null);
	gml_GmlAPI.gmlKind = Object.create(null);
	gml_GmlAPI.gmlComp.length = 0;
	gml_GmlAPI.gmlEnums = Object.create(null);
	gml_GmlAPI.gmlEnumTypeComp.length = 0;
	gml_GmlAPI.gmlMacros = Object.create(null);
	gml_GmlAPI.gmlMFuncs = Object.create(null);
	gml_GmlAPI.gmlAssetIDs = Object.create(null);
	gml_GmlAPI.gmlAssetComp = Object.create(null);
	gml_GmlAPI.gmlGlobalFieldMap = Object.create(null);
	gml_GmlAPI.gmlGlobalFieldComp.length = 0;
	gml_GmlAPI.gmlGlobalFullMap = Object.create(null);
	gml_GmlAPI.gmlGlobalFullComp.length = 0;
	gml_GmlAPI.gmlInstFieldMap = Object.create(null);
	gml_GmlAPI.gmlInstFieldComp.length = 0;
	gml_GmlAPI.gmlLookup = Object.create(null);
	gml_GmlAPI.gmlLookupText = "";
	var _g = 0;
	var _g1 = gmx_GmxLoader.assetTypes;
	while(_g < _g1.length) gml_GmlAPI.gmlAssetIDs[_g1[_g++]] = Object.create(null);
};
gml_GmlAPI.init = function() {
	gml_GmlAPI.stdClear();
	window.gmlResetOnDefine = false;
	if(gml_GmlAPI.version == 0) {
		return;
	}
	var getContent_rx = new RegExp("\r\n","g");
	var getContent = function(path,fn) {
		if(Electron_FS.existsSync != null) {
			var rp = haxe_io_Path.join([Main.modulePath,path]);
			if(Electron_FS.existsSync(rp)) {
				var s = Electron_FS.readFileSync(rp,"utf8");
				s = s.replace(getContent_rx,"\n");
				fn(s);
			} else {
				fn(null);
			}
		} else {
			Electron_FS.readFile(path,"utf8",function(e,s1) {
				fn(e == null ? s1 : null);
			});
		}
	};
	var dir = "api/" + gml__$GmlVersion_GmlVersion_$Impl_$.getName(gml_GmlAPI.version);
	gml_GmlAPI.helpURL = null;
	gml_GmlAPI.helpLookup = null;
	gml_GmlAPI.ukSpelling = ui_Preferences.current.ukSpelling;
	var files = null;
	var assets = null;
	var callback = function(error,conf) {
		if(error == null) {
			files = conf.apiFiles;
			assets = conf.assetFiles;
			if(gml_GmlAPI.ukSpelling == null) {
				gml_GmlAPI.ukSpelling = conf.ukSpelling;
			}
			var confKeywords = conf.keywords;
			if(confKeywords != null) {
				var _g = 0;
				while(_g < confKeywords.length) gml_GmlAPI.stdKind[confKeywords[_g++]] = "keyword";
			}
			gml_GmlAPI.helpURL = conf.helpURL;
			var helpIndexPath = conf.helpIndex;
			if(helpIndexPath != null) {
				helpIndexPath = haxe_io_Path.join([Main.modulePath,dir + "/" + helpIndexPath]);
				Electron_FS.readFile(helpIndexPath,"utf8",function(err,helpIndexJs) {
					if(err != null) {
						return;
					}
					gml_GmlAPI.helpLookup = Object.create(null);
					helpIndexJs = helpIndexJs.substring(helpIndexJs.indexOf("["));
					helpIndexJs = helpIndexJs.substring(0,helpIndexJs.indexOf(";"));
					try {
						var helpIndexArr = JSON.parse(helpIndexJs);
						var _g1 = 0;
						while(_g1 < helpIndexArr.length) {
							var pair = helpIndexArr[_g1];
							++_g1;
							var item = pair[1];
							if(((item) instanceof Array) && item.__enum__ == null) {
								item = item[0][1];
							}
							gml_GmlAPI.helpLookup[pair[0]] = item;
						}
					} catch( x ) {
						haxe_Log.trace("Couldn't parse help index:",{ fileName : "./gml/GmlAPI.hx", lineNumber : 248, className : "gml.GmlAPI", methodName : "init", customParams : [((x) instanceof js__$Boot_HaxeError) ? x.val : x]});
					}
				});
			}
		}
		if(assets != null) {
			var _g2 = 0;
			while(_g2 < assets.length) getContent("" + dir + "/" + assets[_g2++],function(raw) {
				parsers_GmlParseAPI.loadAssets(raw,{ kind : gml_GmlAPI.stdKind, comp : gml_GmlAPI.stdComp});
			});
		}
		var data = { kind : gml_GmlAPI.stdKind, doc : gml_GmlAPI.stdDoc, comp : gml_GmlAPI.stdComp, ukSpelling : gml_GmlAPI.ukSpelling, version : gml_GmlAPI.version, lwArg0 : gml_GmlAPI.lwArg0, lwArg1 : gml_GmlAPI.lwArg1, lwInst : gml_GmlAPI.lwInst, lwConst : gml_GmlAPI.lwConst, lwFlags : gml_GmlAPI.lwFlags};
		if(files != null) {
			var _g3 = 0;
			while(_g3 < files.length) {
				var path1 = [dir + "/" + files[_g3++]];
				var path2 = path1[0];
				var callback1 = (function(path3) {
					return function(raw1) {
						if(raw1 != null) {
							parsers_GmlParseAPI.loadStd(raw1,data);
						} else {
							console.error("Couldn't load " + path3[0]);
						}
					};
				})(path1);
				getContent(path2,callback1);
			}
		} else {
			var raw2 = "";
			var fin_inst = function(s2) {
				if(s2 != null) {
					tools_ERegTools.each(new EReg("^(\\w+)$","gm"),s2,function(rx) {
						var name = rx.matched(1);
						var _this_r = new RegExp("^" + name + "\\b","gm".split("u").join(""));
						raw2 = raw2.replace(_this_r,":" + name);
					});
				}
				parsers_GmlParseAPI.loadStd(raw2,data);
				if(gml_GmlAPI.lwArg0 != null) {
					var cb = Reflect.field(window,"lwSetAPI");
					if(cb != null) {
						cb(data);
					}
					ui_liveweb_LiveWeb.readyUp();
				}
				Main.aceEditor.getSession().bgTokenizer.start(0);
			};
			var fin_exclude = function(s3) {
				if(s3 != null) {
					tools_ERegTools.each(new EReg("^(\\w+)(\\*?)$","gm"),s3,function(rx1) {
						var name1 = rx1.matched(1);
						if(rx1.matched(2) != "") {
							var _this_r1 = new RegExp("^" + name1 + ".*$","gm".split("u").join(""));
							raw2 = raw2.replace(_this_r1,"");
						} else {
							var _this_r2 = new RegExp("^" + name1 + "\\b.*$","gm".split("u").join(""));
							raw2 = raw2.replace(_this_r2,"");
						}
					});
				}
				getContent(dir + "/inst.gml",fin_inst);
			};
			var fin_replace = function(s4) {
				if(s4 != null) {
					tools_ERegTools.each(new EReg("^(\\w+).+$","gm"),s4,function(rx2) {
						var name2 = rx2.matched(1);
						var code = rx2.matched(0);
						raw2 = new EReg("^" + name2 + "\\b.*$","gm").map(raw2,function(r1) {
							return code;
						});
					});
				}
				getContent(dir + "/exclude.gml",fin_exclude);
			};
			var fin_extra = function(s5) {
				if(s5 != null && s5 != "") {
					raw2 += "\n" + s5;
				}
				raw2 += "\ntrace(...)";
				getContent(dir + "/replace.gml",fin_replace);
			};
			var fin_fnames = function(s6) {
				if(s6 != null) {
					raw2 = s6;
					getContent(dir + "/extra.gml",fin_extra);
				} else {
					window.alert("Couldn't find fnames in " + dir);
				}
			};
			getContent(dir + "/fnames",fin_fnames);
		}
	};
	Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,dir + "/config.json"]),"utf8",function(e1,d) {
		if(d != null) {
			try {
				d = JSON.parse(d);
			} catch( x1 ) {
				d = null;
				e1 = ((x1) instanceof js__$Boot_HaxeError) ? x1.val : x1;
			}
		}
		callback(e1,d);
	});
};
var gml_GmlStruct = function(name,orig) {
	this.name = name;
	this.origin = orig;
};
$hxClasses["gml.GmlStruct"] = gml_GmlStruct;
gml_GmlStruct.__name__ = "gml.GmlStruct";
gml_GmlStruct.prototype = {
	__class__: gml_GmlStruct
};
var gml_GmlEnum = function(name,orig) {
	this.lastItem = null;
	this.fieldLookup = Object.create(null);
	this.fieldComp = [];
	this.compMap = Object.create(null);
	this.compList = [];
	this.items = Object.create(null);
	this.names = [];
	gml_GmlStruct.call(this,name,orig);
	this.typeComp = { name : name, value : name, score : 0, meta : "enum", doc : null};
};
$hxClasses["gml.GmlEnum"] = gml_GmlEnum;
gml_GmlEnum.__name__ = "gml.GmlEnum";
gml_GmlEnum.__super__ = gml_GmlStruct;
gml_GmlEnum.prototype = $extend(gml_GmlStruct.prototype,{
	__class__: gml_GmlEnum
});
var gml_GmlExtensionAPI = function() { };
$hxClasses["gml.GmlExtensionAPI"] = gml_GmlExtensionAPI;
gml_GmlExtensionAPI.__name__ = "gml.GmlExtensionAPI";
gml_GmlExtensionAPI.showFor = function(path,ident) {
	var kind;
	switch(gml_Project.current.version) {
	case 1:
		kind = file_kind_gmx_KGmxExtensionAPI.inst;
		break;
	case 2:
		kind = file_kind_yy_KYyExtensionAPI.inst;
		break;
	default:
		return;
	}
	gml_file_GmlFile.openTab(new gml_file_GmlFile("api: " + ident,path,kind));
};
gml_GmlExtensionAPI.procFn = function(name,exname,help,argc,hidden) {
	var r = help;
	if(help == "") {
		r = name + "(";
		if(argc >= 0) {
			var _g = 0;
			while(_g < argc) {
				var i = _g++;
				if(i > 0) {
					r += ", ";
				}
				r += "v" + i;
			}
		} else {
			r += "...";
		}
		r += ")";
	} else {
		var p = help.indexOf(")");
		if(p >= 0 && ++p < help.length) {
			var rest = help.substring(p).trimLeft();
			if(rest.charAt(0) == ":" && StringTools.isSpace(rest,1)) {
				rest = rest.substring(2);
			}
			if(rest.startsWith("//")) {
				rest = rest.substring(2).trimLeft();
			}
			r = help.substring(0,p) + " // " + rest;
		}
	}
	if(exname != name) {
		r += "\n// external: " + exname;
	}
	return r;
};
gml_GmlExtensionAPI.procMc = function(name,val,hidden) {
	return "" + name + " = " + val;
};
gml_GmlExtensionAPI.procSort = function(a,b) {
	if(a < b) {
		return -1;
	} else if(a > b) {
		return 1;
	} else {
		return 0;
	}
};
gml_GmlExtensionAPI.get1 = function(src) {
	var out = "";
	var _g = 0;
	var _g1 = gmx_SfGmx.parse(src).find("files").findAll("file");
	while(_g < _g1.length) {
		var file = _g1[_g];
		++_g;
		var linesShow = [];
		var linesHide = [];
		var _g2 = 0;
		var _g11 = file.find("functions").findAll("function");
		while(_g2 < _g11.length) {
			var fn = _g11[_g2];
			++_g2;
			var hidden = fn.findText("help") == "";
			(hidden ? linesHide : linesShow).push(gml_GmlExtensionAPI.procFn(fn.findText("name"),fn.findText("externalName"),fn.findText("help"),fn.findInt("argCount"),hidden));
		}
		var _g21 = 0;
		var _g3 = file.find("constants").findAll("constant");
		while(_g21 < _g3.length) {
			var mc = _g3[_g21];
			++_g21;
			var hidden1 = mc.findInt("hidden") != 0;
			(hidden1 ? linesHide : linesShow).push(gml_GmlExtensionAPI.procMc(mc.findText("name"),mc.findText("value"),hidden1));
		}
		linesShow.sort(gml_GmlExtensionAPI.procSort);
		if(out != "") {
			out += "\n";
		}
		out += "#section " + file.findText("filename");
		var _g4 = 0;
		while(_g4 < linesShow.length) out += "\n" + linesShow[_g4++];
		if(linesHide.length > 0) {
			linesHide.sort(gml_GmlExtensionAPI.procSort);
			out += "\n#section " + file.findText("filename") + " (hidden)";
			var _g5 = 0;
			while(_g5 < linesHide.length) out += "\n" + linesHide[_g5++];
		}
	}
	return out;
};
gml_GmlExtensionAPI.get2 = function(ext) {
	var out = "";
	var _g = 0;
	var _g1 = ext.files;
	while(_g < _g1.length) {
		var file = _g1[_g];
		++_g;
		var linesShow = [];
		var linesHide = [];
		var _g2 = 0;
		var _g11 = file.functions;
		while(_g2 < _g11.length) {
			var fn = _g11[_g2];
			++_g2;
			(fn.hidden ? linesHide : linesShow).push(gml_GmlExtensionAPI.procFn(fn.name,fn.externalName,fn.help,fn.argCount,fn.hidden));
		}
		var _g21 = 0;
		var _g3 = file.constants;
		while(_g21 < _g3.length) {
			var mc = _g3[_g21];
			++_g21;
			(mc.hidden ? linesHide : linesShow).push(gml_GmlExtensionAPI.procMc(mc.constantName,mc.value,mc.hidden));
		}
		linesShow.sort(gml_GmlExtensionAPI.procSort);
		if(out != "") {
			out += "\n";
		}
		out += "#section " + file.filename;
		var _g4 = 0;
		while(_g4 < linesShow.length) out += "\n" + linesShow[_g4++];
		if(linesHide.length > 0) {
			linesHide.sort(gml_GmlExtensionAPI.procSort);
			out += "\n#section " + file.filename + " (hidden)";
			var _g5 = 0;
			while(_g5 < linesHide.length) out += "\n" + linesHide[_g5++];
		}
	}
	return out;
};
var gml_GmlField = function(name,kind) {
	this.refs = 0;
	this.name = name;
	this.comp = { name : name, value : name, score : 0, meta : kind, doc : null};
};
$hxClasses["gml.GmlField"] = gml_GmlField;
gml_GmlField.__name__ = "gml.GmlField";
gml_GmlField.prototype = {
	__class__: gml_GmlField
};
var gml_GmlFuncDoc = function(name,pre,post,args,rest) {
	this.acc = false;
	this.minArgsCache = null;
	this.name = name;
	this.pre = pre;
	this.post = post;
	this.args = args;
	this.rest = rest;
};
$hxClasses["gml.GmlFuncDoc"] = gml_GmlFuncDoc;
gml_GmlFuncDoc.__name__ = "gml.GmlFuncDoc";
gml_GmlFuncDoc.parse = function(s,out) {
	var p0 = s.indexOf("(");
	var p1 = s.indexOf(")",p0);
	var name;
	var pre;
	var post;
	var args;
	var rest;
	if(p0 >= 0 && p1 >= 0) {
		name = s.substring(0,p0);
		var sw = s.substring(p0 + 1,p1).trim();
		pre = s.substring(0,p0 + 1);
		post = s.substring(p1);
		if(sw != "") {
			args = sw.split(/,\s*/g);
		} else {
			args = [];
		}
		rest = sw.indexOf("...") >= 0;
	} else {
		name = s;
		pre = s;
		post = "";
		args = [];
		rest = false;
	}
	if(out != null) {
		out.minArgsCache = null;
		out.name = name;
		out.pre = pre;
		out.post = post;
		out.args = args;
		out.rest = rest;
		return out;
	} else {
		return new gml_GmlFuncDoc(name,pre,post,args,rest);
	}
};
gml_GmlFuncDoc.fromCode_skipArgCountCmp = function(chunk,k) {
	var c;
	while(--k >= 0) {
		c = chunk.charCodeAt(k);
		if(!(c > 8 && c < 14 || c == 32)) {
			break;
		}
	}
	c = chunk.charCodeAt(k);
	if(!(c >= 48 && c <= 57)) {
		return -1;
	}
	while(--k >= 0) {
		c = chunk.charCodeAt(k);
		if(!(c >= 48 && c <= 57)) {
			break;
		}
	}
	while(k >= 0) {
		c = chunk.charCodeAt(k);
		if(c > 8 && c < 14 || c == 32) {
			--k;
		} else {
			break;
		}
	}
	if(chunk.charCodeAt(k) == 61) {
		--k;
	}
	if(chunk.charCodeAt(k) == 62) {
		--k;
	} else {
		return -1;
	}
	while(k >= 0) {
		c = chunk.charCodeAt(k);
		if(c > 8 && c < 14 || c == 32) {
			--k;
		} else {
			break;
		}
	}
	var acEnd = k + 1;
	if(chunk.charCodeAt(k) != 116) {
		return -1;
	}
	while(--k >= 0) {
		c = chunk.charCodeAt(k);
		if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57)) {
			break;
		}
	}
	if(acEnd - k != 15 || chunk.substring(k + 1,acEnd) != "argument_count") {
		return -1;
	}
	while(k >= 0) {
		c = chunk.charCodeAt(k);
		if(c > 8 && c < 14 || c == 32) {
			--k;
		} else {
			break;
		}
	}
	return k;
};
gml_GmlFuncDoc.fromCode_skipIf = function(chunk,k) {
	var c;
	while(k >= 0) {
		c = chunk.charCodeAt(k);
		if(c > 8 && c < 14 || c == 32) {
			--k;
		} else {
			break;
		}
	}
	if(chunk.charCodeAt(k) != 41) {
		return -1;
	}
	k = gml_GmlFuncDoc.fromCode_skipArgCountCmp(chunk,k);
	if(k < 0) {
		return -1;
	}
	if(chunk.charCodeAt(k) == 40) {
		--k;
	} else {
		return -1;
	}
	while(k >= 0) {
		c = chunk.charCodeAt(k);
		if(c > 8 && c < 14 || c == 32) {
			--k;
		} else {
			break;
		}
	}
	if(chunk.charCodeAt(k) == 102) {
		--k;
	} else {
		return -1;
	}
	if(chunk.charCodeAt(k) == 105) {
		--k;
	} else {
		return -1;
	}
	if(tools__$CharCode_CharCode_$Impl_$.isIdent1_ni(chunk.charCodeAt(k))) {
		return -1;
	}
	return k;
};
gml_GmlFuncDoc.autoArgs = function(code) {
	var q = new parsers_GmlReader(code);
	var rxo = gml_GmlFuncDoc.autogen_argo;
	var rxoi = gml_GmlFuncDoc.autogen_argoi;
	var rxc = gml_GmlFuncDoc.autogen_argi;
	var trail = false;
	var argc = 0;
	var chunk;
	var start = 0;
	while(q.get_loop()) {
		var p = q.pos;
		if(q.skipCommon_inline() >= 0) {
			chunk = q.source.substring(start,p);
			if(!trail && rxo.test(chunk)) {
				trail = true;
				rxc = rxoi;
			}
			while(argc < 16) if(rxc[argc].test(chunk)) {
				++argc;
			} else {
				break;
			}
			start = q.pos;
		} else {
			q.pos += 1;
		}
	}
	chunk = q.source.substring(start,q.pos);
	if(!trail && rxo.test(chunk)) {
		trail = true;
		rxc = rxoi;
	}
	while(argc < 16) if(rxc[argc].test(chunk)) {
		++argc;
	} else {
		break;
	}
	if(argc == 0) {
		if(trail) {
			return "...";
		} else {
			return "";
		}
	}
	var out = "v0";
	var _g = 1;
	var _g1 = argc;
	while(_g < _g1) out += ", v" + _g++;
	if(trail) {
		out += ", ...";
	}
	return out;
};
gml_GmlFuncDoc.prototype = {
	get_minArgs: function() {
		if(this.minArgsCache != null) {
			return this.minArgsCache;
		}
		var argi = this.args.length;
		while(argi > 0) {
			var arg = this.args[argi - 1];
			if(arg == null || gml_GmlFuncDoc.rxIsOpt.test(arg) || arg.endsWith("*") || arg.includes("=") || arg.includes("optional")) {
				--argi;
			} else if(arg.includes("]") && !arg.includes("[")) {
				var argk = argi;
				while(--argk >= 0) if(this.args[argk].includes("[")) {
					break;
				}
				if(argk < 0) {
					break;
				} else {
					argi = argk;
				}
			} else {
				break;
			}
		}
		this.minArgsCache = argi;
		return this.minArgsCache;
	}
	,get_maxArgs: function() {
		if(this.rest) {
			return 2147483647;
		} else {
			return this.args.length;
		}
	}
	,clear: function() {
		this.post = ")";
		this.args.length = 0;
		this.rest = false;
		this.acc = false;
		this.minArgsCache = null;
	}
	,getAcText: function() {
		return this.pre + this.args.join(", ") + this.post;
	}
	,fromCode: function(gml1,from,till) {
		if(from == null) {
			from = 0;
		}
		var _gthis = this;
		var q = new parsers_GmlReader(gml1);
		var rx = gml_GmlFuncDoc.fromCode_rx;
		q.pos = from;
		var start = from;
		if(till == null) {
			till = gml1.length;
		}
		this.clear();
		var hasRet = false;
		var hasRetRx = gml_GmlFuncDoc.fromCode_hasRet;
		var flush = function(p) {
			var chunk = q.source.substring(start,p);
			rx.lastIndex = 0;
			var mt = rx.exec(chunk);
			var c;
			if(!hasRet && hasRetRx.test(chunk)) {
				hasRet = true;
			}
			while(mt != null) {
				var argis = (mt[1] || mt[2]);
				if(argis != null) {
					var argi = Std.parseInt(argis);
					var k = mt.index;
					var hasSet = false;
					var isOpt = false;
					while(--k >= 0) {
						c = chunk.charCodeAt(k);
						if(c > 8 && c < 14 || c == 32) {
							continue;
						}
						if(c == 63) {
							hasSet = false;
							var k1 = gml_GmlFuncDoc.fromCode_skipArgCountCmp(chunk,k);
							if(k1 >= 0) {
								k = k1;
								c = chunk.charCodeAt(k1);
								isOpt = true;
							}
						}
						hasSet = c == 61 && chunk.charCodeAt(k - 1) != 61;
						break;
					}
					var name = null;
					if(hasSet) {
						while(--k >= 0) {
							c = chunk.charCodeAt(k);
							if(c > 8 && c < 14 || c == 32) {
								continue;
							}
							var suffix = null;
							if(c == 47 && chunk.charCodeAt(k - 1) == 42) {
								var suffixEnd = --k;
								while(--k >= 0) {
									c = chunk.charCodeAt(k);
									if(c == 42 && chunk.charCodeAt(k - 1) == 47) {
										if(chunk.charCodeAt(k + 1) == 58) {
											suffix = chunk.substring(k + 1,suffixEnd);
										}
										k -= 2;
										while(k >= 0) {
											c = chunk.charCodeAt(k);
											if(c > 8 && c < 14 || c == 32) {
												--k;
											} else {
												break;
											}
										}
										c = chunk.charCodeAt(k);
										break;
									}
								}
							}
							if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57)) {
								break;
							}
							var nameEnd = k + 1;
							var nameStart = 0;
							while(--k >= 0) {
								c = chunk.charCodeAt(k);
								if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
									continue;
								}
								nameStart = k + 1;
								break;
							}
							name = chunk.substring(nameStart,nameEnd);
							if(suffix != null) {
								name += suffix;
							}
							if(gml_GmlFuncDoc.fromCode_skipIf(chunk,k) >= 0) {
								isOpt = true;
							}
							break;
						}
					}
					if(name == null) {
						name = "arg" + argi;
					}
					if(isOpt) {
						name = "?" + name;
					}
					_gthis.args[argi] = name;
				} else {
					_gthis.rest = true;
				}
				mt = rx.exec(chunk);
			}
		};
		while(q.pos < till) {
			var p1 = q.pos;
			var n;
			if(q.source.charCodeAt(q.pos) == 47 && q.source.charCodeAt(q.pos + 1) == 42 && q.source.charCodeAt(q.pos + 2) == 58) {
				q.pos += 2;
				q.skipComment();
				n = -1;
			} else {
				n = q.skipCommon_inline();
			}
			if(n >= 0) {
				flush(p1);
				start = q.pos;
			} else {
				q.pos += 1;
			}
		}
		flush(q.pos);
		this.post = ")";
		if(this.rest) {
			this.post = "..." + this.post;
		}
		if(hasRet) {
			this.post += "➜";
		}
	}
	,__class__: gml_GmlFuncDoc
};
var gml_GmlGlobalField = function(name) {
	gml_GmlField.call(this,name,"global");
	var name1 = "global." + name;
	this.fullComp = { name : name1, value : name1, score : 0, meta : "global", doc : null};
};
$hxClasses["gml.GmlGlobalField"] = gml_GmlGlobalField;
gml_GmlGlobalField.__name__ = "gml.GmlGlobalField";
gml_GmlGlobalField.__super__ = gml_GmlField;
gml_GmlGlobalField.prototype = $extend(gml_GmlField.prototype,{
	__class__: gml_GmlGlobalField
});
var gml_GmlGlobalVar = function(name,orig) {
	gml_GmlStruct.call(this,name,orig);
	this.comp = { name : name, value : name, score : 0, meta : "globalvar", doc : null};
};
$hxClasses["gml.GmlGlobalVar"] = gml_GmlGlobalVar;
gml_GmlGlobalVar.__name__ = "gml.GmlGlobalVar";
gml_GmlGlobalVar.__super__ = gml_GmlStruct;
gml_GmlGlobalVar.prototype = $extend(gml_GmlStruct.prototype,{
	__class__: gml_GmlGlobalVar
});
var gml_GmlImports = function() {
	this.localTypes = Object.create(null);
	this.docs = Object.create(null);
	this.namespaceComp = [];
	this.namespaces = Object.create(null);
	this.longenEnum = Object.create(null);
	this.longen = Object.create(null);
	this.hasGlobal = false;
	this.shortenGlobal = Object.create(null);
	this.shorten = Object.create(null);
	this.kind = Object.create(null);
	this.compMap = Object.create(null);
	this.comp = [];
};
$hxClasses["gml.GmlImports"] = gml_GmlImports;
gml_GmlImports.__name__ = "gml.GmlImports";
gml_GmlImports.prototype = {
	ensureNamespace: function(space) {
		var ns = this.namespaces[space];
		if(ns != null) {
			return ns;
		}
		ns = new gml_GmlNamespace();
		this.kind[space] = "namespace";
		this.namespaceComp.push({ name : space, value : space, score : 0, meta : "namespace", doc : null});
		this.namespaces[space] = ns;
		var enLong;
		var en;
		if(this.kind[space] == "enum") {
			enLong = this.longen[space];
			en = gml_GmlAPI.gmlEnums[enLong];
		} else {
			enLong = space;
			en = gml_GmlAPI.gmlEnums[space];
		}
		if(en != null) {
			ns.isStruct = true;
			var _g = 0;
			var _g1 = en.compList;
			while(_g < _g1.length) ns.comp.push(this.enumCompToNsComp(_g1[_g++]));
			var _g2 = 0;
			var _g3 = en.names;
			while(_g2 < _g3.length) {
				var name = _g3[_g2];
				++_g2;
				var full = enLong + "." + name;
				ns.longen[name] = full;
				ns.shorten[full] = name;
				ns.kind[name] = "enumfield";
			}
		}
		return ns;
	}
	,enumCompToNsComp: function(comp) {
		var name = comp.name.substring(comp.name.indexOf(".") + 1);
		return { name : name, value : name, score : 0, meta : comp.meta, doc : comp.name + " = " + comp.doc};
	}
	,enumCompToFullComp: function(comp,short) {
		var name = short + comp.name.substring(comp.name.indexOf("."));
		return { name : name, value : name, score : 0, meta : comp.meta, doc : comp.name + " = " + comp.doc};
	}
	,add: function(long,short,kind,comp,doc,space,spaceOnly,cache) {
		var isGlobal = long.startsWith("global.");
		var ns;
		var en;
		var nc;
		if(space != null) {
			ns = this.ensureNamespace(space);
			ns.kind[short] = kind;
			if(!isGlobal) {
				var c = ns.longen[short];
				if(c != null) {
					var this1 = ns.shorten;
					delete this1[c];
				}
				ns.shorten[long] = short;
				ns.longen[short] = long;
			}
			if(comp != null) {
				nc = ns.compMap[short];
				if(nc != null) {
					HxOverrides.remove(ns.comp,nc);
				}
				if(cache != null) {
					nc = cache.nsComp;
					if(nc == null) {
						nc = { name : short, value : short, score : 0, meta : comp.meta, doc : comp.doc};
						if(nc.doc == null) {
							nc.doc = long;
						}
						cache.nsComp = nc;
					}
				} else {
					nc = { name : short, value : short, score : 0, meta : comp.meta, doc : comp.doc};
					if(nc.doc == null) {
						nc.doc = long;
					}
				}
				ns.compMap[short] = nc;
				ns.comp.push(nc);
			}
			if(doc != null) {
				ns.docs[short] = doc;
			}
			short = space + "." + short;
			if(spaceOnly) {
				return;
			}
		} else {
			this.kind[short] = kind;
		}
		if(isGlobal) {
			this.hasGlobal = true;
			this.shortenGlobal[long.substring(7)] = short;
		} else {
			this.shorten[long] = short;
			if(kind == "enum") {
				en = gml_GmlAPI.gmlEnums[long];
				if(en != null) {
					ns = this.namespaces[short];
					if(ns != null) {
						ns.isStruct = true;
					}
					if(cache != null) {
						var comps = cache.enumComps;
						var nsComps = cache.enumNsComps;
						if(comps == null) {
							comps = [];
							if(ns != null) {
								nsComps = [];
							}
							var _g = 0;
							var _g1 = en.compList;
							while(_g < _g1.length) {
								var comp1 = _g1[_g];
								++_g;
								comps.push(this.enumCompToFullComp(comp1,short));
								if(ns != null) {
									nsComps.push(this.enumCompToNsComp(comp1));
								}
							}
							cache.enumComps = comps;
							if(ns != null) {
								cache.enumNsComps = nsComps;
							}
						}
						var _g2 = 0;
						var _g11 = comps;
						while(_g2 < _g11.length) this.comp.push(_g11[_g2++]);
						var _g21 = 0;
						var _g3 = nsComps;
						while(_g21 < _g3.length) ns.comp.push(_g3[_g21++]);
					} else {
						var _g4 = 0;
						var _g12 = en.compList;
						while(_g4 < _g12.length) {
							var comp2 = _g12[_g4];
							++_g4;
							this.comp.push(this.enumCompToFullComp(comp2,short));
							if(ns != null) {
								ns.comp.push(this.enumCompToNsComp(comp2));
							}
						}
					}
					if(ns != null) {
						var _g5 = 0;
						var _g13 = en.names;
						while(_g5 < _g13.length) {
							var name = _g13[_g5];
							++_g5;
							var full = long + "." + name;
							var c1 = ns.longen[name];
							if(c1 != null) {
								var this2 = ns.shorten;
								delete this2[c1];
							}
							ns.longen[name] = full;
							ns.shorten[full] = name;
						}
					}
				}
				this.longenEnum[short] = long;
			}
		}
		var c2 = this.longen[short];
		if(c2 != null) {
			var this3 = this.shorten;
			delete this3[c2];
		}
		this.longen[short] = long;
		if(doc != null) {
			this.docs[short] = doc;
		}
		if(comp != null) {
			nc = this.compMap[short];
			if(nc != null) {
				HxOverrides.remove(this.comp,nc);
			}
			if(cache != null) {
				nc = cache.comp;
				if(nc == null) {
					nc = { name : short, value : short, score : 0, meta : comp.meta, doc : comp.doc};
					if(nc.doc == null) {
						nc.doc = long;
					}
					cache.comp = nc;
				}
			} else {
				nc = { name : short, value : short, score : 0, meta : comp.meta, doc : comp.doc};
				if(nc.doc == null) {
					nc.doc = long;
				}
			}
			this.compMap[short] = nc;
			this.comp.push(nc);
		}
	}
	,__class__: gml_GmlImports
};
var gml_GmlNamespace = function() {
	this.isStruct = false;
	this.docs = Object.create(null);
	this.compMap = Object.create(null);
	this.comp = [];
	this.longen = Object.create(null);
	this.shorten = Object.create(null);
	this.kind = Object.create(null);
};
$hxClasses["gml.GmlNamespace"] = gml_GmlNamespace;
gml_GmlNamespace.__name__ = "gml.GmlNamespace";
gml_GmlNamespace.prototype = {
	__class__: gml_GmlNamespace
};
var gml_GmlLocals = function() {
	this.type = Object.create(null);
	this.kind = Object.create(null);
	this.comp = [];
};
$hxClasses["gml.GmlLocals"] = gml_GmlLocals;
gml_GmlLocals.__name__ = "gml.GmlLocals";
gml_GmlLocals.prototype = {
	add: function(name,lkind,doc) {
		if(this.kind[name] == null) {
			this.kind[name] = lkind;
			this.comp.push({ name : name, value : name, score : 0, meta : lkind, doc : doc});
		}
	}
	,addLocals: function(locals) {
		var _g = 0;
		var _g1 = locals.comp;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var name = item.name;
			if(Object.prototype.hasOwnProperty.call(this.kind,name)) {
				continue;
			}
			this.comp.push(item);
			this.kind[name] = locals.kind[name];
			this.type[name] = locals.type[name];
		}
	}
	,__class__: gml_GmlLocals
};
var gml_GmlMacro = function(name,orig,expr,config) {
	gml_GmlStruct.call(this,name,orig);
	this.expr = expr;
	this.config = config;
	this.comp = { name : name, value : name, score : 0, meta : "macro", doc : expr};
};
$hxClasses["gml.GmlMacro"] = gml_GmlMacro;
gml_GmlMacro.__name__ = "gml.GmlMacro";
gml_GmlMacro.__super__ = gml_GmlStruct;
gml_GmlMacro.prototype = $extend(gml_GmlStruct.prototype,{
	__class__: gml_GmlMacro
});
var gml_GmlObjectInfo = function() {
	this.eventMap = Object.create(null);
	this.depth = null;
	this.eventList = [];
	this.parents = [];
	this.spriteName = "";
	this.objectName = "";
};
$hxClasses["gml.GmlObjectInfo"] = gml_GmlObjectInfo;
gml_GmlObjectInfo.__name__ = "gml.GmlObjectInfo";
gml_GmlObjectInfo.showFor = function(path,ident) {
	var info;
	if(haxe_io_Path.extension(path) == "gmx") {
		info = gmx_GmxObject.getInfo(electron_FileWrap.readGmxFileSync(path),path);
	} else if(haxe_io_Path.extension(path) == "yy") {
		info = yy__$YyObject_YyObject_$Impl_$.getInfo(electron_FileWrap.readJsonFileSync(path));
	} else {
		return;
	}
	gml_file_GmlFile.openTab(new gml_file_GmlFile("info: " + ident,null,file_kind_gml_KGmlScript.inst,info.print()));
};
gml_GmlObjectInfo.prototype = {
	print: function() {
		var buf = new tools_StringBuilder();
		buf.addFormat("// Information about object @[%s]:\n",this.objectName);
		buf.addFormat("// Sprite: @[%s]\n",this.spriteName);
		buf.addFormat("// Visible: %s\n","" + Std.string(this.visible));
		buf.addFormat("// Soild: %s\n","" + Std.string(this.solid));
		buf.addFormat("// Persistent: %s\n","" + Std.string(this.persistent));
		if(this.depth != null) {
			buf.addFormat("// Depth: %s\n","" + this.depth);
		}
		buf.addFormat("#section Parents (%d)\n",this.parents.length);
		var _g = 0;
		var _g1 = this.parents;
		while(_g < _g1.length) buf.addFormat("// @[%s]\n",_g1[_g++]);
		var children = gml_Project.current.objectChildren[this.objectName];
		var childCount = children != null ? children.length : 0;
		if(childCount > 0) {
			var cbuf = new tools_StringBuilder();
			var childCountRec = null;
			childCountRec = function(name,depth) {
				if(++depth > 64) {
					return 0;
				}
				var found = 0;
				var arr = gml_Project.current.objectChildren[name];
				if(arr != null) {
					found = arr.length;
					var _g2 = 0;
					while(_g2 < arr.length) found += childCountRec(arr[_g2++],depth);
				}
				return found;
			};
			var _g21 = 0;
			while(_g21 < children.length) {
				var child = children[_g21];
				++_g21;
				cbuf.addFormat("// @[%s]",child);
				var subCount = childCountRec(child,0);
				if(subCount > 0) {
					cbuf.addFormat(" (%d child%s)",subCount,subCount != 1 ? "ren" : "");
					childCount += subCount;
				}
				cbuf.b += "\n";
			}
			buf.addFormat("#section Children (%d)\n",childCount);
			buf.b += Std.string(cbuf.b);
		} else {
			buf.addFormat("#section Children (0)\n");
		}
		buf.addFormat("#section Events (%d)\n",this.eventList.length);
		var _g22 = 0;
		var _g3 = this.eventList;
		while(_g22 < _g3.length) {
			var eid = _g3[_g22];
			++_g22;
			var items = this.eventMap[eid];
			buf.addFormat("#event %s (%d)\n",eid,items.length);
			var _g23 = 0;
			while(_g23 < items.length) buf.addFormat("// @[%s]\n",items[_g23++]);
		}
		return buf.b;
	}
	,__class__: gml_GmlObjectInfo
};
var gml_GmlScopes = $hx_exports["GmlScopes"] = function(session) {
	this.length = 0;
	this.scopes = [];
	this.defs = [];
	this.session = session;
};
$hxClasses["gml.GmlScopes"] = gml_GmlScopes;
gml_GmlScopes.__name__ = "gml.GmlScopes";
gml_GmlScopes.prototype = {
	get: function(row) {
		var len = this.session.getLength();
		if(len != this.length) {
			this.length = len;
			var arr = this.defs;
			arr.length = 0;
			arr.length = len;
			var arr1 = this.scopes;
			arr1.length = 0;
			arr1.length = len;
		}
		var rx = gml_GmlAPI.scopeResetRx;
		var scope = null;
		var i = row;
		while(i >= 0) {
			scope = this.scopes[i];
			if(scope != null) {
				break;
			}
			var def = this.defs[i];
			if(def == null) {
				var res = rx.exec(this.session.getLine(i));
				def = res != null ? res[1] : "";
				this.defs[i] = def;
			}
			if(def != "") {
				scope = def;
				this.scopes[i] = scope;
				break;
			}
			--i;
		}
		if(i < 0) {
			scope = "";
		}
		while(++i <= row) this.scopes[i] = scope;
		return scope;
	}
	,clear: function() {
		this.defs.length = 0;
		this.scopes.length = 0;
		this.length = 0;
	}
	,__class__: gml_GmlScopes
};
var gml__$GmlVersion_GmlVersion_$Impl_$ = {};
$hxClasses["gml._GmlVersion.GmlVersion_Impl_"] = gml__$GmlVersion_GmlVersion_$Impl_$;
gml__$GmlVersion_GmlVersion_$Impl_$.__name__ = "gml._GmlVersion.GmlVersion_Impl_";
gml__$GmlVersion_GmlVersion_$Impl_$.getName = function(this1) {
	switch(this1) {
	case -1:
		return "live";
	case 0:
		return "none";
	case 1:
		return "v1";
	case 2:
		return "v2";
	default:
		return null;
	}
};
var gml_Project = function(_path,_load) {
	if(_load == null) {
		_load = true;
	}
	this.firstLoadState = null;
	this.frameRate = null;
	this.lambdaView = null;
	this.lambdaGml = null;
	this.lambdaExt = null;
	this.lambdaMap = Object.create(null);
	this.propertiesElement = null;
	this.properties = { };
	this.hasGMLive = false;
	this.spriteURLs = Object.create(null);
	this.gmxFirstRoomName = null;
	this.config = "default";
	this.version = 1;
	this.path = _path;
	if(this.path != null) {
		this.dir = haxe_io_Path.directory(this.path);
		this.name = haxe_io_Path.withoutDirectory(this.path);
	} else {
		this.dir = haxe_io_Path.directory(_path);
		this.name = haxe_io_Path.withoutDirectory(_path);
		this.displayName = this.name;
	}
	this.version = 1;
	var v = this.version;
	if(gml_GmlAPI.version != v) {
		gml_GmlAPI.version = v;
		gml_GmlAPI.init();
	}
};
$hxClasses["gml.Project"] = gml_Project;
gml_Project.__name__ = "gml.Project";
gml_Project.open = function(path) {
	if(gml_Project.current != null) {
		gml_Project.current.close();
	}
	gml_Project.current = new gml_Project(path);
	if(path != "") {
		ui_RecentProjects.add(gml_Project.current.path != null ? gml_Project.current.path : path);
	}
};
gml_Project.init = function() {
	var ls = window.localStorage;
	var renList = [];
	var remList = [];
	var remTime = new Date().getTime() - 86400000 * ui_Preferences.current.projectSessionTime;
	var _g = 0;
	var _g1 = ls.length;
	while(_g < _g1) {
		var k = ls.key(_g++);
		if(k.startsWith("@project:")) {
			if(k.indexOf("\\") >= 0) {
				renList.push(k);
			} else if(parseFloat(ls.getItem(k)) < remTime) {
				remList.push(k);
				remList.push(k.substring(1));
			}
		}
	}
	var _g2 = 0;
	while(_g2 < remList.length) ls.removeItem(remList[_g2++]);
	var _g3 = 0;
	while(_g3 < renList.length) {
		var renKey = renList[_g3];
		++_g3;
		var renKey1 = renKey.substring(1);
		var v0 = ls.getItem(renKey);
		var v1 = ls.getItem(renKey1);
		ls.removeItem(renKey);
		ls.removeItem(renKey1);
		ls.setItem(StringTools.replace(renKey,"\\","/"),v0);
		ls.setItem(StringTools.replace(renKey1,"\\","/"),v1);
	}
	gml_Project.current = new yy_YyZip("","",[]);
};
gml_Project.prototype = {
	canLambda: function() {
		if(ui_Preferences.current.lambdaMagic) {
			if(this.lambdaGml == null) {
				return this.properties.lambdaMode == 2;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,getFrameRate: function() {
		var r = this.frameRate;
		if(r == null) {
			switch(this.version) {
			case 1:
				if(this.gmxFirstRoomName != null) {
					try {
						var txt = this.readTextFileSync("rooms/" + this.gmxFirstRoomName + ".room.gmx");
						var mt = new RegExp("<speed>(\\d+)</speed>").exec(txt);
						r = mt != null ? Std.parseInt(mt[1]) : 30;
					} catch( _ ) {
						r = 30;
					}
				} else {
					r = 30;
				}
				break;
			case 2:
				try {
					var txt1 = this.readTextFileSync("options/main/inherited/options_main.inherited.yy");
					var mt1 = new RegExp("\"option_game_speed\": (\\d+)").exec(txt1);
					r = mt1 != null ? Std.parseInt(mt1[1]) : 60;
				} catch( _1 ) {
					r = 60;
				}
				break;
			default:
				r = 30;
			}
		}
		this.frameRate = r;
		return r;
	}
	,detectVersion: function() {
		if(this.path == "") {
			this.name = "";
			this.version = 0;
			this.displayName = "Recent projects";
		} else {
			this.version = tools_PathTools.ptDetectProject(this.path);
			switch(this.version) {
			case -1:
				this.name = haxe_io_Path.withoutDirectory(this.dir);
				this.displayName = this.name;
				break;
			case 1:
				this.displayName = haxe_io_Path.withoutExtension(haxe_io_Path.withoutExtension(this.name));
				break;
			case 2:
				this.displayName = haxe_io_Path.withoutExtension(this.name);
				break;
			default:
				this.displayName = this.name;
			}
		}
	}
	,close: function() {
		if(gml_Project.current.version != 0) {
			plugins_PluginAPI._signal("projectClose",{ project : gml_Project.current});
		}
		ui_treeview_TreeView.saveOpen();
		var tabPaths = [];
		var activeTab = null;
		var _g = 0;
		var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
		while(_g < _g1.length) {
			var _tab = _g1[_g++];
			try {
				var tab = _tab;
				var path = tab.gmlFile.path;
				if(path != null) {
					if(tab.classList.contains("chrome-tab-current")) {
						activeTab = tabPaths.length;
					}
					tabPaths.push(path);
				}
			} catch( _ ) {
			}
		}
		var data = { treeviewScrollTop : ui_treeview_TreeView.element.scrollTop, treeviewOpenNodes : ui_treeview_TreeView.openPaths, tabPaths : tabPaths, activeTab : activeTab};
		plugins_PluginAPI._signal("projectStateSave",{ project : this, state : data});
		window.localStorage.setItem("project:" + this.path,JSON.stringify(data));
		window.localStorage.setItem("@project:" + this.path,"" + new Date().getTime());
	}
	,finishedIndexing: function() {
		gml_Project.nameNode.innerText = this.displayName;
		if(gml_Project.current.hasGMLive) {
			ui_GMLive.updateAll();
		}
		var state = this.firstLoadState;
		if(state != null) {
			this.firstLoadState = null;
			var tabPaths = state.tabPaths;
			if(tabPaths != null) {
				var activeFile = null;
				var _g = 0;
				var _g1 = tabPaths.length;
				while(_g < _g1) {
					var i = _g++;
					try {
						var el = ui_treeview_TreeView.find(true,{ path : tabPaths[i]});
						if(el != null) {
							var file = ui_treeview_TreeView.handleItemClick(null,el,{ noExtern : true});
							if(i == state.activeTab) {
								activeFile = file;
							}
						}
					} catch( x ) {
						console.error("Error recovering " + this.path + ":",((x) instanceof js__$Boot_HaxeError) ? x.val : x);
					}
				}
				if(activeFile != null) {
					activeFile.tabEl.click();
				}
			}
			plugins_PluginAPI._signal("projectStateRestore",{ project : this, state : state});
		}
	}
	,reload: function(first) {
		var _gthis = this;
		gml_Project.nameNode.innerText = "Loading...";
		window.setTimeout(function() {
			_gthis.objectChildren = Object.create(null);
			var v = _gthis.version;
			if(gml_GmlAPI.version != v) {
				gml_GmlAPI.version = v;
				gml_GmlAPI.init();
			}
			var state = null;
			if(first) {
				_gthis.properties = ui_project_ProjectProperties.load(_gthis);
				parsers_GmlSeekData.map = Object.create(null);
				try {
					state = JSON.parse(window.localStorage.getItem("project:" + _gthis.path));
				} catch( _ ) {
				}
			} else {
				ui_treeview_TreeView.saveOpen();
			}
			_gthis.reload_1();
			ace_AceTooltips.resetCache();
			ui_treeview_TreeView.restoreOpen(state != null ? state.treeviewOpenNodes : null);
			if(state != null) {
				ui_treeview_TreeView.element.scrollTop = state.treeviewScrollTop;
				if(first) {
					_gthis.firstLoadState = state;
				}
			}
			if(parsers_GmlSeeker.itemsLeft == 0) {
				gml_Project.nameNode.innerText = _gthis.displayName;
			} else {
				gml_Project.nameNode.innerText = "Indexing...";
			}
			if(plugins_PluginManager.ready == true && _gthis.version != 0) {
				plugins_PluginAPI._signal("projectOpen",{ project : _gthis});
			}
			ui_ProjectStyle.reload();
		},1);
	}
	,reload_1: function() {
		if(this.version == 0) {
			ui_RecentProjects.show();
		} else if(this.path == null) {
			ui_treeview_TreeView.clear();
		} else {
			switch(this.version) {
			case -1:
				raw_GmlLoader.run(this);
				break;
			case 1:
				gmx_GmxLoader.run(this);
				break;
			case 2:
				yy_YyLoader.run(this);
				break;
			default:
			}
		}
	}
	,search: function(fn,done,opt) {
		switch(this.version) {
		case 1:
			gmx_GmxSearcher.run(this,fn,done,opt);
			break;
		case 2:
			yy_YySearcher.run(this,fn,done,opt);
			break;
		default:
		}
	}
	,fullPath: function(path) {
		if(this.dir != "") {
			return StringTools.replace(this.dir + "/" + path,"\\","/");
		} else {
			return path;
		}
	}
	,existsSync: function(path) {
		return Electron_FS.existsSync(this.fullPath(path));
	}
	,unlinkSync: function(path) {
		Electron_FS.unlinkSync(this.fullPath(path));
	}
	,readTextFile: function(path,fn) {
		Electron_FS.readFile(this.fullPath(path),"utf8",fn);
	}
	,readTextFileSync: function(path) {
		return Electron_FS.readFileSync(this.fullPath(path),"utf8");
	}
	,readJsonFile: function(path,fn) {
		var callback = fn;
		Electron_FS.readFile(this.fullPath(path),"utf8",function(e,d) {
			if(d != null) {
				try {
					d = JSON.parse(d);
				} catch( x ) {
					d = null;
					e = ((x) instanceof js__$Boot_HaxeError) ? x.val : x;
				}
			}
			callback(e,d);
		});
	}
	,readJsonFileSync: function(path) {
		return JSON.parse(Electron_FS.readFileSync(this.fullPath(path),"utf8"));
	}
	,readGmxFile: function(path,fn) {
		var callback = fn;
		Electron_FS.readFile(this.fullPath(path),"utf8",function(e,d) {
			if(d != null) {
				try {
					d = gmx_SfGmx.parse(d);
				} catch( x ) {
					d = null;
					e = ((x) instanceof js__$Boot_HaxeError) ? x.val : x;
				}
			}
			callback(e,d);
		});
		return;
	}
	,readGmxFileSync: function(path) {
		return gmx_SfGmx.parse(Electron_FS.readFileSync(this.fullPath(path),"utf8"));
	}
	,writeTextFileSync: function(path,text) {
		Electron_FS.writeFileSync(this.fullPath(path),text);
	}
	,writeJsonFileSync: function(path,value) {
		this.writeTextFileSync(path,tools_NativeString.yyJson(value));
	}
	,renameSync: function(prev,next) {
		if(this.existsSync(prev)) {
			Electron_FS.renameSync(this.fullPath(prev),this.fullPath(next));
		}
	}
	,getImageURL: function(path) {
		var full = this.fullPath(path);
		if(Electron_FS.existsSync(full)) {
			return "file:///" + full;
		} else {
			return null;
		}
	}
	,getSpriteURL: function(name) {
		if(this.version == -1) {
			return null;
		}
		if(Object.prototype.hasOwnProperty.call(this.spriteURLs,name)) {
			return this.spriteURLs[name];
		}
		var r;
		switch(this.version) {
		case 1:
			r = this.getImageURL("sprites/images/" + name + "_0.png");
			break;
		case 2:
			var g = this.yyResourceGUIDs[name];
			if(g != null) {
				if(Object.prototype.hasOwnProperty.call(this.yySpriteURLs,g)) {
					r = this.yySpriteURLs[g];
				} else {
					try {
						var spritePath = this.yyResources[g].Value.resourcePath;
						var frame = this.readJsonFileSync(spritePath).frames[0];
						if(frame != null) {
							r = this.getImageURL(haxe_io_Path.join([haxe_io_Path.directory(spritePath),frame.id + ".png"]));
						} else {
							r = null;
						}
						this.yySpriteURLs[g] = r;
					} catch( e ) {
						r = null;
					}
				}
			} else {
				r = null;
			}
			break;
		default:
			r = null;
		}
		this.spriteURLs[name] = r;
		return r;
	}
	,getSpriteURLasync: function(name,fn) {
		var _gthis = this;
		if(this.version == -1) {
			return;
		}
		var soon_1 = function(fn1,s) {
			window.setTimeout(function() {
				fn1(s);
			});
		};
		if(Object.prototype.hasOwnProperty.call(this.spriteURLs,name)) {
			var s1 = this.spriteURLs[name];
			_gthis.spriteURLs[name] = s1;
			soon_1(fn,s1);
			return;
		}
		switch(this.version) {
		case 1:
			var full = this.fullPath("sprites/images/" + name + "_0.png");
			Electron_FS.access(full,0,function(e) {
				full = e == null ? "file:///" + full : null;
				_gthis.spriteURLs[name] = full;
				fn(full);
			});
			break;
		case 2:
			var g = this.yyResourceGUIDs[name];
			if(g != null) {
				if(Object.prototype.hasOwnProperty.call(this.yySpriteURLs,g)) {
					var s2 = this.yySpriteURLs[g];
					_gthis.spriteURLs[name] = s2;
					soon_1(fn,s2);
				} else {
					var spritePath = this.yyResources[g].Value.resourcePath;
					this.readJsonFile(spritePath,function(e1,sprite) {
						var r;
						if(e1 == null) {
							var frame = sprite.frames[0];
							if(frame != null) {
								var framePath = haxe_io_Path.join([haxe_io_Path.directory(spritePath),frame.id + ".png"]);
								r = _gthis.getImageURL(framePath);
							} else {
								r = null;
							}
						} else {
							r = null;
						}
						_gthis.yySpriteURLs[g] = r;
						_gthis.spriteURLs[name] = r;
						fn(r);
					});
				}
			} else {
				_gthis.spriteURLs[name] = null;
				soon_1(fn,null);
			}
			break;
		default:
			_gthis.spriteURLs[name] = null;
			soon_1(fn,null);
		}
	}
	,mkdirSync: function(path) {
		var full = this.fullPath(path);
		if(!Electron_FS.existsSync(full)) {
			Electron_FS.mkdirSync(full);
		}
	}
	,rmdirSync: function(path) {
		var full = this.fullPath(path);
		if(Electron_FS.existsSync(full)) {
			Electron_FS.rmdirSync(full);
		}
	}
	,readdir: function(path,fn) {
		var _gthis = this;
		Electron_FS.readdir(path,function(e,rels) {
			var found;
			if(rels != null) {
				var full = _gthis.fullPath(path);
				found = [];
				var _g = 0;
				while(_g < rels.length) {
					var rel = rels[_g];
					++_g;
					var itemFull = haxe_io_Path.join([full,rel]);
					found.push({ fileName : rel, relPath : path + "/" + rel, fullPath : itemFull, isDirectory : Electron_FS.statSync(itemFull).isDirectory()});
				}
			} else {
				found = null;
			}
			fn(e,found);
		});
	}
	,readdirSync: function(path) {
		var full = this.fullPath(path);
		var out = [];
		var _g = 0;
		var _g1 = Electron_FS.readdirSync(full);
		while(_g < _g1.length) {
			var rel = _g1[_g];
			++_g;
			var itemFull = haxe_io_Path.join([full,rel]);
			out.push({ fileName : rel, relPath : path + "/" + rel, fullPath : itemFull, isDirectory : Electron_FS.statSync(itemFull).isDirectory()});
		}
		return out;
	}
	,openExternal: function(path) {
		Electron_IPC.send("shell-open",this.fullPath(path));
	}
	,showItemInFolder: function(path) {
		Electron_IPC.send("shell-show",this.fullPath(path));
	}
	,__class__: gml_Project
};
var gml_file_GmlFile = function(name,path,kind,data) {
	this.__changed = false;
	this.time = 0;
	this.extraFiles = [];
	this.name = name;
	this.path = path;
	this.kind = kind;
	this.context = kind.getTabContext(this,data);
	kind.init(this,data);
	this.load(data);
	this.editor.ready();
};
$hxClasses["gml.file.GmlFile"] = gml_file_GmlFile;
gml_file_GmlFile.__name__ = "gml.file.GmlFile";
gml_file_GmlFile.open = function(name,path,nav) {
	path = haxe_io_Path.normalize(path);
	var _g = 0;
	var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
	while(_g < _g1.length) {
		var tabEl = _g1[_g];
		++_g;
		var gmlFile = [tabEl.gmlFile];
		if(gmlFile[0] != null && gmlFile[0].path == path) {
			tabEl.click();
			if(nav != null) {
				window.setTimeout((function(gmlFile1) {
					return function() {
						gmlFile1[0].navigate(nav);
					};
				})(gmlFile));
			}
			return gmlFile[0];
		}
	}
	var kd = gml_file_GmlFileKindTools.detect(path);
	var kind = nav != null && nav.kind != null ? nav.kind : kd.kind;
	if(nav != null && nav.noExtern && ((kind) instanceof file_kind_misc_KExtern)) {
		kind = file_kind_misc_KPlain.inst;
	}
	var data = kd.data;
	return kind.create(name,path,data,nav);
};
gml_file_GmlFile.openTab = function(file) {
	file.editor.stateLoad();
	gml_file_GmlFile.next = file;
	ui_ChromeTabs.impl.addTab({ title : file.name});
};
gml_file_GmlFile.set_current = function(file) {
	gml_file_GmlFile.current = file;
	var data = file != null ? parsers_GmlSeekData.map[file.path] : null;
	if(data != null) {
		var enable = data.hasCoroutines;
		parsers_GmlExtCoroutines.enabled = enable;
		parsers_GmlExtCoroutines.keywordMap = enable ? parsers_GmlExtCoroutines.keywordMap1 : parsers_GmlExtCoroutines.keywordMap0;
	} else {
		parsers_GmlExtCoroutines.enabled = false;
		parsers_GmlExtCoroutines.keywordMap = parsers_GmlExtCoroutines.keywordMap0;
	}
	return file;
};
gml_file_GmlFile.prototype = {
	set_changed: function(z) {
		if(this.__changed != z) {
			this.__changed = z;
			if(z) {
				this.tabEl.classList.add("chrome-tab-changed");
			} else {
				this.tabEl.classList.remove("chrome-tab-changed");
			}
		}
		return z;
	}
	,close: function() {
		this.editor.destroy();
		parsers_GmlSeekData.remove(this.path);
	}
	,getAceSession: function() {
		if(this.codeEditor != null) {
			return this.codeEditor.session;
		} else {
			return null;
		}
	}
	,navigate: function(nav) {
		return this.kind.navigate(this.editor,nav);
	}
	,load: function(data) {
		this.editor.load(data);
	}
	,markClean: function() {
		this.set_changed(false);
		var q = this.getAceSession();
		if(q != null) {
			q.getUndoManager().markClean();
		}
	}
	,savePost: function(out) {
		if(this.path != null) {
			this.markClean();
		}
		if(this.path != null && out != null && this.codeEditor != null && this.codeEditor.kind.indexOnSave) {
			var data = parsers_GmlSeekData.map[this.path];
			if(data != null) {
				if(((this.kind) instanceof file_kind_yy_KYyEvents)) {
					parsers_GmlSeeker.runYyObject(this.path,out,true);
				} else {
					parsers_GmlSeeker.runSync(this.path,out,data.main,this.kind);
				}
				if(gml_GmlAPI.version == -1) {
					this.liveApply();
				}
				var next = parsers_GmlSeekData.map[this.path];
				if(this.codeEditor.locals != next.locals) {
					this.codeEditor.locals = next.locals;
					if(gml_file_GmlFile.current == this) {
						this.codeEditor.session.bgTokenizer.start(0);
					}
				}
			}
		}
		if(this.path != null && gml_file_GmlFile.current == this && this.codeEditor != null && ((this.codeEditor.kind) instanceof file_kind_KGml) && this.codeEditor.kind.canSyntaxCheck) {
			var lp = gml_Project.current.properties.linterPrefs;
			var r = null;
			var _g = 0;
			while(_g < 1) {
				++_g;
				if(lp != null) {
					r = lp.onSave;
					if(r != null) {
						break;
					}
				}
				r = ui_Preferences.current.linterPrefs.onSave;
				if(r != null) {
					break;
				}
				r = parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$.defValue.onSave;
			}
			if(r) {
				parsers_linter_GmlLinter.runFor(this.codeEditor);
			}
		}
		plugins_PluginAPI._signal("fileSave",{ file : this, code : out});
	}
	,save: function() {
		return this.editor.save();
	}
	,liveApply: function() {
		var data = parsers_GmlSeekData.map[this.path];
		if(data != null) {
			var comp = Main.aceEditor.gmlCompleters;
			comp.gmlCompleter.items = data.compList;
			gml_GmlAPI.gmlComp = data.compList;
			gml_GmlAPI.gmlKind = data.kindMap;
			gml_GmlAPI.gmlEnums = data.enumMap;
			gml_GmlAPI.gmlDoc = data.docMap;
			comp.globalFullCompleter.items = data.globalFullComp;
			gml_GmlAPI.gmlGlobalFullComp = data.globalFullComp;
			gml_GmlAPI.gmlGlobalFullMap = data.globalFullMap;
			comp.globalCompleter.items = data.globalFieldComp;
			gml_GmlAPI.gmlGlobalFieldComp = data.globalFieldComp;
			gml_GmlAPI.gmlGlobalFieldMap = data.globalFieldMap;
			comp.instCompleter.items = data.instFieldComp;
			gml_GmlAPI.gmlInstFieldComp = data.instFieldComp;
			gml_GmlAPI.gmlInstFieldMap = data.instFieldMap;
		}
	}
	,checkChanges: function() {
		this.editor.checkChanges();
	}
	,focus: function() {
		this.checkChanges();
		window.gmlResetOnDefine = false;
		if(gml_GmlAPI.version == -1) {
			this.liveApply();
		}
	}
	,__class__: gml_file_GmlFile
};
var gml_file_GmlFileBackup = function() { };
$hxClasses["gml.file.GmlFileBackup"] = gml_file_GmlFileBackup;
gml_file_GmlFileBackup.__name__ = "gml.file.GmlFileBackup";
gml_file_GmlFileBackup.save = function(file,code) {
	return;
};
var gml_file_GmlFileExtra = function(path) {
	this.time = 0;
	this.path = path;
};
$hxClasses["gml.file.GmlFileExtra"] = gml_file_GmlFileExtra;
gml_file_GmlFileExtra.__name__ = "gml.file.GmlFileExtra";
gml_file_GmlFileExtra.prototype = {
	__class__: gml_file_GmlFileExtra
};
var gml_file_GmlFileKindTools = function() { };
$hxClasses["gml.file.GmlFileKindTools"] = gml_file_GmlFileKindTools;
gml_file_GmlFileKindTools.__name__ = "gml.file.GmlFileKindTools";
gml_file_GmlFileKindTools.detect = function(path) {
	var ext = haxe_io_Path.extension(path).toLowerCase();
	var kinds = file_FileKind.map[ext];
	if(kinds != null) {
		var _g = 0;
		while(_g < kinds.length) {
			var out = kinds[_g++].detect(path,null);
			if(out != null) {
				return out;
			}
		}
	}
	return { kind : file_kind_misc_KExtern.inst, data : null};
};
var gmx_GmxAction = function() { };
$hxClasses["gmx.GmxAction"] = gmx_GmxAction;
gmx_GmxAction.__name__ = "gmx.GmxAction";
gmx_GmxAction.getCode = function(action) {
	if(action.findText("libid") != "1") {
		gmx_GmxAction.errorText = "Actions from user-created libraries are not supported.";
		return null;
	}
	if(action.findText("whoName") != "self") {
		gmx_GmxAction.errorText = "Non-self-applied actions are not supported.";
		return null;
	}
	var aid = action.findText("id");
	var a;
	var _g = Std.parseInt(aid);
	if(_g == null) {
		gmx_GmxAction.errorText = "DnD action #" + aid + " `" + action.findText("functionname") + "` is not supported.";
		return null;
	} else {
		switch(_g) {
		case 203:
			a = "action_kill_object";
			break;
		case 408:
			a = "action_if" + (action.find("isnot").text == "1" ? "_not " : " ") + action.find("arguments").find("argument").find("string").text;
			break;
		case 422:
			a = "{";
			break;
		case 424:
			a = "}";
			break;
		case 603:
			return action.find("arguments").find("argument").find("string").text;
		case 604:
			a = "action_inherited";
			break;
		case 605:
			a = "// " + action.find("arguments").find("argument").find("string").text;
			break;
		default:
			gmx_GmxAction.errorText = "DnD action #" + aid + " `" + action.findText("functionname") + "` is not supported.";
			return null;
		}
	}
	return "#action " + a + "\r\n";
};
gmx_GmxAction.makeDndFuncBlock = function(id,fn,who) {
	return gmx_GmxAction.makeDndBlock({ id : id, fn : fn, who : who, exeType : 1});
};
gmx_GmxAction.makeDndBlock = function(d) {
	var action = new gmx_SfGmx("action");
	var c = d.libid;
	action.addTextChild("libid","" + Std.string(c != null ? c : 1));
	action.addTextChild("id","" + d.id);
	var c1 = d.kind;
	action.addTextChild("kind","" + Std.string(c1 != null ? c1 : 0));
	action.addTextChild("userelative",d.rel != null ? "-1" : "0");
	action.addTextChild("isquestion",d.isQuestion ? "-1" : "0");
	action.addTextChild("useapplyto",d.who != null ? "-1" : "0");
	var c2 = d.exeType;
	action.addTextChild("exetype","" + Std.string(c2 != null ? c2 : 1));
	var c3 = d.fn;
	action.addTextChild("functionname","" + Std.string(c3 != null ? c3 : ""));
	var c4 = d.code;
	action.addTextChild("codestring","" + Std.string(c4 != null ? c4 : ""));
	var c5 = d.who;
	action.addTextChild("whoName","" + Std.string(c5 != null ? c5 : "self"));
	action.addTextChild("relative",d.rel ? "1" : "0");
	action.addTextChild("isnot",d.not ? "1" : "0");
	if(d.args != null) {
		var $arguments = new gmx_SfGmx("arguments");
		action.children.push($arguments);
		var _g = 0;
		var _g1 = d.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			var argument = new gmx_SfGmx("argument");
			var c6 = arg.kind;
			argument.addTextChild("kind","" + Std.string(c6 != null ? c6 : 1));
			if(arg.s != null) {
				argument.addTextChild("string",arg.s);
			}
			$arguments.children.push(argument);
		}
	}
	return action;
};
gmx_GmxAction.makeCodeBlock = function(code) {
	if(gmx_GmxAction.rxActionPre.test(code)) {
		var actData = code.substring(7).trim();
		if(actData.startsWith("//")) {
			actData = actData.substring(HxOverrides.cca(actData,2) == 32 ? 3 : 2);
			return gmx_GmxAction.makeDndBlock({ id : 605, kind : 0, exeType : 0, args : [{ s : actData}]});
		}
		var actMt = gmx_GmxAction.rxActionSplit.exec(actData);
		if(actMt == null) {
			gmx_GmxAction.errorText = "Action `" + code.trimRight() + "` is not supported.";
			return null;
		}
		var actName = actMt[1];
		actData = actMt[2];
		switch(actName) {
		case "action_if":case "action_if_not":
			return gmx_GmxAction.makeDndBlock({ id : 408, isQuestion : true, exeType : 1, fn : "action_if", who : "self", not : actName == "action_if_not", args : [{ s : actData}]});
		case "action_inherited":
			if(actData != "") {
				gmx_GmxAction.errorText = "Action `" + actName + "` takes no arguments.";
				return null;
			}
			return gmx_GmxAction.makeDndFuncBlock(604,"action_inherited",null);
		case "action_kill_object":
			if(actData != "") {
				gmx_GmxAction.errorText = "Action `" + actName + "` takes no arguments.";
				return null;
			}
			return gmx_GmxAction.makeDndFuncBlock(203,"action_kill_object","self");
		case "{":
			if(actData != "") {
				gmx_GmxAction.errorText = "Action `" + actName + "` takes no arguments.";
				return null;
			}
			return gmx_GmxAction.makeDndBlock({ id : 422, kind : 1});
		case "}":
			if(actData != "") {
				gmx_GmxAction.errorText = "Action `" + actName + "` takes no arguments.";
				return null;
			}
			return gmx_GmxAction.makeDndBlock({ id : 424, kind : 2});
		default:
			gmx_GmxAction.errorText = "Action `" + code.trimRight() + "` is not supported.";
			return null;
		}
	}
	return gmx_GmxAction.makeDndBlock({ id : 603, kind : 7, exeType : 2, who : "self", args : [{ s : code}]});
};
var gmx_GmxEvent = function() { };
$hxClasses["gmx.GmxEvent"] = gmx_GmxEvent;
gmx_GmxEvent.__name__ = "gmx.GmxEvent";
gmx_GmxEvent.toStringGmx = function(event) {
	var ename = event.attrMap["ename"];
	return parsers_GmlEvent.toString(Std.parseInt(event.attrMap["eventtype"]),ename == null ? Std.parseInt(event.attrMap["enumb"]) : null,ename);
};
gmx_GmxEvent.isEmpty = function(event) {
	return event.find("action") == null;
};
gmx_GmxEvent.getCode = function(event) {
	var out = "";
	var actions = event.findAll("action");
	var addAction = function(action,head) {
		var code = gmx_GmxAction.getCode(action);
		if(code == null) {
			return false;
		}
		if(head && !code.startsWith("#action ")) {
			var addSection = true;
			code = gmx_GmxEvent.rxHeader.map(code,function(e) {
				var cap = e.matched(1);
				out += "#section";
				if(HxOverrides.cca(cap,0) != 32) {
					out += "|";
				}
				out += cap;
				addSection = false;
				return "";
			});
			if(addSection) {
				out += "#section\n";
			}
		}
		out += code;
		return true;
	};
	if(actions.length != 0) {
		if(!addAction(actions[0],false)) {
			return null;
		}
		var _g = 1;
		var _g1 = actions.length;
		while(_g < _g1) if(!addAction(actions[_g++],true)) {
			return null;
		}
	}
	return out;
};
var gmx_GmxLoader = function() { };
$hxClasses["gmx.GmxLoader"] = gmx_GmxLoader;
gmx_GmxLoader.__name__ = "gmx.GmxLoader";
gmx_GmxLoader.run = function(project) {
	var gmx1 = project.readGmxFileSync(project.name);
	parsers_GmlSeeker.start();
	gml_GmlAPI.gmlClear();
	var rxName = gmx_GmxLoader.rxAssetName;
	ui_treeview_TreeView.clear();
	var tv = ui_treeview_TreeView.element;
	var ths = [];
	var loadrec = null;
	loadrec = function(gmx2,out,one,path) {
		if(gmx2.name == one) {
			var path1 = gmx2.text;
			var name = path1.replace(rxName.r,"$1");
			var full = project.fullPath(path1);
			var _main = "";
			var kind = file_kind_gml_KGmlScript.inst;
			var index = true;
			switch(one) {
			case "script":
				_main = name;
				break;
			case "shader":
				break;
			default:
				full += "." + one + ".gmx";
				switch(one) {
				case "object":
					kind = file_kind_gmx_KGmxEvents.inst;
					break;
				case "sprite":
					kind = file_kind_gmx_KGmxSprite.inst;
					index = false;
					break;
				case "timeline":
					kind = file_kind_gmx_KGmxMoments.inst;
					break;
				}
			}
			gml_GmlAPI.gmlLookupText += name + "\n";
			if(index) {
				parsers_GmlSeeker.run(full,_main,kind);
			}
			var item = ui_treeview_TreeView.makeAssetItem(name,path1,full,one);
			if(one == "sprite") {
				ths.push({ path : full, item : item, name : name});
			}
			out.appendChild(item);
			if(one == "shader") {
				item.yyOpenAs = gmx2.attrMap["type"].indexOf("HLSL") >= 0 ? file_kind_misc_KHLSL.inst : file_kind_misc_KGLSL.inst;
			}
		} else {
			var name1 = gmx2.attrMap["name"];
			if(out == tv) {
				name1 = name1.charAt(0).toUpperCase() + name1.substring(1);
			}
			var next = path + name1 + "/";
			var r = ui_treeview_TreeView.makeAssetDir(name1,next);
			var c = r.treeItems;
			var _g = 0;
			var _g1 = gmx2.children;
			while(_g < _g1.length) loadrec(_g1[_g++],c,one,next);
			out.appendChild(r);
		}
	};
	var loadtop = function(one1,plural) {
		if(plural == null) {
			plural = one1 + "s";
		}
		var dir = null;
		var pfx = tools_NativeString.capitalize(plural) + "/";
		var _g2 = 0;
		var _g11 = gmx1.findAll(plural);
		while(_g2 < _g11.length) {
			var p = _g11[_g2++];
			if(dir == null) {
				dir = ui_treeview_TreeView.makeAssetDir(tools_NativeString.capitalize(plural),pfx);
				tv.appendChild(dir);
			}
			var _g3 = 0;
			var _g12 = p.children;
			while(_g3 < _g12.length) loadrec(_g12[_g3++],dir.treeItems,one1,pfx);
		}
	};
	loadtop("sprite");
	loadtop("script");
	loadtop("shader");
	loadtop("timeline");
	loadtop("object");
	var _g4 = 0;
	var _g13 = gmx1.findAll("rooms");
	while(_g4 < _g13.length) {
		++_g4;
		var rm = gmx1.find("room");
		if(rm != null) {
			project.gmxFirstRoomName = rm.text;
		}
	}
	var _g21 = 0;
	while(_g21 < ths.length) {
		var th = ths[_g21];
		++_g21;
		ui_treeview_TreeView.setThumb(th.path,project.getSpriteURL(th.name),th.item);
	}
	var loadinc = null;
	loadinc = function(gmx3,out1,path2) {
		if(gmx3.name == "datafile") {
			var name2 = gmx3.findText("name");
			var rel = haxe_io_Path.join(["datafiles",name2]);
			var full1 = haxe_io_Path.join([path2,name2]);
			out1.appendChild(ui_treeview_TreeView.makeAssetItem(name2,rel,project.fullPath(full1),"datafile"));
		} else {
			var name3 = gmx3.attrMap["name"];
			var next1 = path2 + name3 + "/";
			var r1 = ui_treeview_TreeView.makeAssetDir(name3,next1);
			var c1 = r1.treeItems;
			var _g31 = 0;
			var _g41 = gmx3.children;
			while(_g31 < _g41.length) loadinc(_g41[_g31++],c1,next1);
			out1.appendChild(r1);
		}
	};
	var _g32 = 0;
	var _g42 = gmx1.findAll("datafiles");
	while(_g32 < _g42.length) {
		var datafiles = _g42[_g32++];
		var parent = ui_treeview_TreeView.makeAssetDir("Included files","Included files/");
		var _g33 = 0;
		var _g43 = datafiles.children;
		while(_g33 < _g43.length) loadinc(_g43[_g33++],parent.treeItems,"datafiles/");
		if(parent.treeItems.children.length > 0) {
			tv.appendChild(parent);
		}
	}
	gml_GmlAPI.extClear();
	var comp = gml_GmlAPI.gmlComp;
	project.lambdaMap = Object.create(null);
	var lz = ui_Preferences.current.lambdaMagic;
	var _g5 = 0;
	var _g6 = gmx1.findAll("NewExtensions");
	while(_g5 < _g6.length) {
		var extNodes = _g6[_g5++].findAll("extension");
		if(extNodes.length == 0) {
			continue;
		}
		var extParentDir = ui_treeview_TreeView.makeAssetDir("Extensions","Extensions/");
		var _g51 = 0;
		while(_g51 < extNodes.length) {
			var extNode = extNodes[_g51];
			++_g51;
			var extRel = extNode.text;
			extRel = StringTools.replace(extRel,"\\","/");
			var extPath = extRel + ".extension.gmx";
			var extFull = project.fullPath(extPath);
			var extGmx = project.readGmxFileSync(extPath);
			var extName = extGmx.findText("name");
			var extDir = ui_treeview_TreeView.makeAssetDir(extName,"Extensions/" + extName + "/");
			extDir.setAttribute("data-full-path",extFull);
			extDir.setAttribute("data-ident",extName);
			var lm = lz && extName.toLowerCase() == "gmedit_lambda" ? project.lambdaMap : null;
			if(lm != null) {
				project.lambdaExt = extPath;
			}
			var _g52 = 0;
			var _g61 = extGmx.findAll("files");
			while(_g52 < _g61.length) {
				var _g53 = 0;
				var _g62 = _g61[_g52++].findAll("file");
				while(_g53 < _g62.length) {
					var extFile = _g62[_g53];
					++_g53;
					var extFileName = extFile.findText("filename");
					var isGmlFile = haxe_io_Path.extension(extFileName).toLowerCase() == "gml";
					var extFilePath = haxe_io_Path.join([extNode.text,extFileName]);
					var extFileFull = project.fullPath(extFilePath);
					extDir.treeItems.appendChild(ui_treeview_TreeView.makeAssetItem(extFileName,extFilePath,extFileFull,"extfile"));
					if(isGmlFile) {
						if(lm != null) {
							project.lambdaGml = extFileFull;
							parsers_GmlExtLambda.readDefs(extFileFull);
						} else {
							parsers_GmlSeeker.run(extFileFull,"",file_kind_gml_KGmlExtension.inst);
						}
					}
					if(lm != null) {
						var _g54 = 0;
						var _g63 = extFile.findAll("functions");
						while(_g54 < _g63.length) {
							var _g55 = 0;
							var _g64 = _g63[_g54++].findAll("function");
							while(_g55 < _g64.length) {
								var ls = _g64[_g55++].findText("name");
								ls = ls.replace(parsers_GmlExtLambda.rxlcPrefix,"__lf_");
								lm[ls] = true;
							}
						}
					} else {
						var _g56 = 0;
						var _g65 = extFile.findAll("functions");
						while(_g56 < _g65.length) {
							var _g57 = 0;
							var _g66 = _g65[_g56++].findAll("function");
							while(_g57 < _g66.length) {
								var func = _g66[_g57];
								++_g57;
								var name4 = func.findText("name");
								gml_GmlAPI.extKind[name4] = "extfunction";
								gml_GmlAPI.extArgc[name4] = func.findInt("argCount");
								var help = func.findText("help");
								if(help != null && help != "") {
									gml_GmlAPI.extCompAdd({ name : name4, value : name4, score : 0, meta : "function", doc : help});
									gml_GmlAPI.extDoc[name4] = gml_GmlFuncDoc.parse(help);
									if(isGmlFile) {
										gml_GmlAPI.gmlLookupText += name4 + "\n";
									}
								}
								if(isGmlFile) {
									gml_GmlAPI.gmlLookup[name4] = { path : extFileFull, sub : name4, row : 0};
								}
							}
						}
					}
					var _g58 = 0;
					var _g67 = extFile.findAll("constants");
					while(_g58 < _g67.length) {
						var _g59 = 0;
						var _g68 = _g67[_g58++].findAll("constant");
						while(_g59 < _g68.length) {
							var mcr = _g68[_g59];
							++_g59;
							var name5 = mcr.findText("name");
							gml_GmlAPI.extKind[name5] = "extmacro";
							if(mcr.findText("hidden") == "0") {
								gml_GmlAPI.extCompAdd({ name : name5, value : name5, score : 0, meta : "macro", doc : mcr.findText("value")});
							}
						}
					}
				}
			}
			if(extName == "GMLive" && Object.prototype.hasOwnProperty.call(gml_GmlAPI.extKind,"live_init")) {
				project.hasGMLive = true;
			}
			extParentDir.treeItems.appendChild(extDir);
		}
		tv.appendChild(extParentDir);
	}
	var mcrDir = ui_treeview_TreeView.makeAssetDir("Macros","macros/");
	var mcrItems = mcrDir.querySelector(".items");
	mcrItems.appendChild(ui_treeview_TreeView.makeAssetItem(gmx_GmxLoader.allConfigs,"Configs/default",project.fullPath(project.name),"config"));
	var _g7 = 0;
	var _g8 = gmx1.findAll("Configs");
	while(_g7 < _g8.length) {
		var _g71 = 0;
		var _g81 = _g8[_g7++].findAll("Config");
		while(_g71 < _g81.length) {
			var configPath = _g81[_g71++].text;
			mcrItems.appendChild(ui_treeview_TreeView.makeAssetItem(configPath.replace(rxName.r,"$1"),configPath,configPath + ".config.gmx","config"));
		}
	}
	tv.appendChild(mcrDir);
	var loadAssets = function(r2,single,plural1) {
		if(plural1 == null) {
			plural1 = single + "s";
		}
		var id = 0;
		var ids = gml_GmlAPI.gmlAssetIDs[single];
		var _g9 = 0;
		var _g10 = gmx1.findAll(plural1);
		while(_g9 < _g10.length) {
			var _g91 = 0;
			var _g101 = _g10[_g9++].findRec(single);
			while(_g91 < _g101.length) {
				var name6 = _g101[_g91++].text.replace(rxName.r,"$1");
				r2[name6] = "asset." + single;
				var next2 = { name : name6, value : name6, score : 0, meta : single, doc : null};
				gml_GmlAPI.gmlAssetComp[name6] = next2;
				comp.push(next2);
				ids[name6] = id++;
			}
		}
	};
	var tm = Object.create(null);
	var _g92 = 0;
	var _g102 = gmx_GmxLoader.assetTypes;
	while(_g92 < _g102.length) loadAssets(tm,_g102[_g92++]);
	var addMacros = function(ctr) {
		var _g111 = 0;
		var _g121 = ctr.findAll("constant");
		while(_g111 < _g121.length) {
			var q = _g121[_g111];
			++_g111;
			var name7 = q.attrMap["name"];
			tm[name7] = "macro";
			comp.push({ name : name7, value : name7, score : 0, meta : "macro", doc : q.text});
		}
	};
	var _g112 = 0;
	var _g122 = gmx1.findAll("constants");
	while(_g112 < _g122.length) addMacros(_g122[_g112++]);
	var _g131 = 0;
	var _g14 = gmx1.findAll("Configs");
	while(_g131 < _g14.length) {
		var confNode = _g14[_g131++].find("Config");
		if(confNode != null) {
			var _g132 = 0;
			var _g141 = project.readGmxFileSync(confNode.text + ".config.gmx").findAll("ConfigConstants");
			while(_g132 < _g141.length) {
				var _g133 = 0;
				var _g142 = _g141[_g132++].findAll("constants");
				while(_g133 < _g142.length) addMacros(_g142[_g133++]);
			}
		}
	}
	gml_GmlAPI.gmlKind = tm;
};
var gmx_GmxManip = function() { };
$hxClasses["gmx.GmxManip"] = gmx_GmxManip;
gmx_GmxManip.__name__ = "gmx.GmxManip";
gmx_GmxManip.resolve = function(q,root) {
	if(q.chain.length > 0) {
		q.chain[0] = q.chain[0].toLowerCase();
	} else {
		q.last = q.last.toLowerCase();
	}
	var pj = gml_Project.current;
	q.pj = pj;
	if(root == null) {
		root = pj.readGmxFileSync(pj.name);
	}
	var plural = q.plural;
	var single = q.single;
	var dir = root;
	var _g = 0;
	var _g1 = q.chain;
	while(_g < _g1.length) {
		var sp = _g1[_g++];
		var sub = null;
		var _g2 = 0;
		var _g11 = dir.findAll(plural);
		while(_g2 < _g11.length) {
			var o = _g11[_g2];
			++_g2;
			if(o.attrMap["name"] == sp) {
				sub = o;
				break;
			}
		}
		if(sub == null) {
			window.alert("Couldn't find directory " + q.chain.join("/"));
			return null;
		} else {
			dir = sub;
		}
	}
	var ref = null;
	var rxn = new RegExp("^\\w+[/\\\\](\\w+)");
	var _g21 = 0;
	var _g3 = dir.children;
	while(_g21 < _g3.length) {
		var o1 = _g3[_g21];
		++_g21;
		if(o1.name == single) {
			var r = rxn.exec(o1.text);
			if(r != null && r[1] == q.last) {
				ref = o1;
				break;
			}
		} else if(o1.attrMap["name"] == q.last) {
			ref = o1;
			break;
		}
	}
	if(ref == null) {
		window.alert("Couldn't find item " + q.last + "!");
		return null;
	}
	return { pj : pj, root : root, plural : plural, single : single, dir : dir, ref : ref};
};
gmx_GmxManip.add = function(q) {
	var d = gmx_GmxManip.resolve(q);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var root = d.root;
	var plural = d.plural;
	var single = d.single;
	var dir = d.dir;
	var ref = d.ref;
	var name = q.name;
	var ngmx;
	if(q.mkdir) {
		ngmx = new gmx_SfGmx(plural);
		ngmx.set("name",name);
	} else {
		if(single == "script") {
			q.npath = "" + plural + "/" + name + ".gml";
			pj.writeTextFileSync(q.npath,"");
			gml_file_GmlFile.open(q.name,q.npath);
		}
		ngmx = new gmx_SfGmx(single,single == "script" ? plural + "\\" + name + ".gml" : plural + "\\" + name);
	}
	switch(q.order) {
	case -1:
		dir.children.splice(dir.children.indexOf(ref),0,ngmx);
		break;
	case 1:
		dir.children.splice(dir.children.indexOf(ref) + 1,0,ngmx);
		break;
	default:
		ref.children.push(ngmx);
	}
	ui_treeview_TreeViewItemMenus.createImplTV(q);
	pj.writeTextFileSync(pj.name,root.toGmxString());
	pj.reload();
	return true;
};
gmx_GmxManip.remove = function(q) {
	var d = gmx_GmxManip.resolve(q);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var root = d.root;
	var single = d.single;
	var dir = d.dir;
	var ref = d.ref;
	var remrec = null;
	remrec = function(node) {
		if(node.name == single) {
			var dp = node.text;
			if(single != "script") {
				dp += "." + single + ".gmx";
			}
			if(pj.existsSync(dp)) {
				pj.unlinkSync(dp);
			}
		} else {
			var _g = 0;
			var _g1 = node.children;
			while(_g < _g1.length) remrec(_g1[_g++]);
		}
	};
	remrec(ref);
	HxOverrides.remove(dir.children,ref);
	q.tvDir.treeItems.removeChild(q.tvRef);
	var pj1 = pj.name;
	var tmp = root.toGmxString();
	pj.writeTextFileSync(pj1,tmp);
	pj.reload();
	return true;
};
gmx_GmxManip.rename = function(q) {
	var d = gmx_GmxManip.resolve(q);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var single = d.single;
	var gmx1 = d.ref;
	if(gmx1.name != single) {
		gmx1.set("name",q.name);
	} else {
		var p0 = gmx1.text;
		if(single != "script") {
			p0 += "." + single + ".gmx";
		}
		var mt = new RegExp("^(\\w+[/\\\\])(\\w+)(.*)$").exec(p0);
		if(mt == null) {
			window.alert("Can't match resource name");
			return false;
		}
		var p1 = mt[1] + q.name + mt[3];
		pj.renameSync(p0,p1);
		gmx1.text = p1;
	}
	pj.writeTextFileSync(pj.name,d.root.toGmxString());
	pj.reload();
	return true;
};
gmx_GmxManip.move = function(q) {
	var d = gmx_GmxManip.resolve(q);
	if(d == null) {
		return false;
	}
	q.chain = q.srcChain;
	q.last = q.srcLast;
	var sd = gmx_GmxManip.resolve(q,d.root);
	if(sd == null) {
		return false;
	}
	HxOverrides.remove(sd.dir.children,sd.ref);
	switch(q.order) {
	case -1:
		tools_NativeArray.insertBefore(d.dir.children,sd.ref,d.ref);
		break;
	case 1:
		tools_NativeArray.insertAfter(d.dir.children,sd.ref,d.ref);
		break;
	default:
		d.ref.children.push(sd.ref);
	}
	d.pj.writeTextFileSync(d.pj.name,d.root.toGmxString());
	yy_YyManip.moveTV(q);
	return true;
};
var gmx_GmxObject = function() { };
$hxClasses["gmx.GmxObject"] = gmx_GmxObject;
gmx_GmxObject.__name__ = "gmx.GmxObject";
gmx_GmxObject.getCode = function(gmx1) {
	var out = "";
	var errors = "";
	var objectIDs = gml_GmlAPI.gmlAssetIDs["object"];
	var _g = 0;
	var _g1 = gmx1.findAll("events");
	while(_g < _g1.length) {
		var evOuter = _g1[_g];
		++_g;
		var events = evOuter.findAll("event");
		events.sort(function(a,b) {
			var atype = Std.parseInt(a.attrMap["eventtype"]);
			var btype = Std.parseInt(b.attrMap["eventtype"]);
			if(atype != btype) {
				return atype - btype;
			}
			var aname = a.attrMap["ename"];
			var bname = b.attrMap["ename"];
			if(aname != null || bname != null) {
				var aid = objectIDs[aname];
				var bid = objectIDs[bname];
				if(aid != null && bid != null) {
					return aid - bid;
				}
				if(aname < bname) {
					return 1;
				} else {
					return -1;
				}
			}
			var anumb = Std.parseInt(a.attrMap["enumb"]);
			var bnumb = Std.parseInt(b.attrMap["enumb"]);
			return anumb - bnumb;
		});
		var _g2 = 0;
		while(_g2 < events.length) {
			var event = events[_g2];
			++_g2;
			if(out != "") {
				out += "\n";
			}
			var name = gmx_GmxEvent.toStringGmx(event);
			out += "#event " + name;
			if(gmx_GmxEvent.isEmpty(event)) {
				continue;
			}
			var code = gmx_GmxEvent.getCode(event);
			if(code != null) {
				var pair = parsers_GmlHeader.parse(code,1);
				if(pair.name != null) {
					out += pair.name;
				}
				out += "\n" + pair.code;
			} else {
				errors += "Unreadable action in " + name + ":\n";
				errors += gmx_GmxAction.errorText + "\n";
			}
		}
	}
	if(errors != "") {
		gmx_GmxObject.errorText = errors;
		return null;
	} else {
		return tools_NativeString.trimTrailRn(out);
	}
};
gmx_GmxObject.setCode = function(gmx1,gmlCode) {
	var eventData = parsers_GmlEvent.parse(gmlCode,1);
	if(eventData == null) {
		gmx_GmxObject.errorText = parsers_GmlEvent.parseError;
		return false;
	}
	var evCtr = gmx1.find("events");
	if(evCtr == null) {
		evCtr = new gmx_SfGmx("events");
		gmx1.children.push(evCtr);
	} else {
		evCtr.children.splice(0,evCtr.children.length);
	}
	var objectIDs = gml_GmlAPI.gmlAssetIDs["object"];
	eventData.sort(function(a,b) {
		var adata = a.data;
		var bdata = b.data;
		var atype = adata.type;
		var btype = bdata.type;
		if(atype != btype) {
			return atype - btype;
		}
		var aname = adata.name;
		var bname = bdata.name;
		if(aname != null || bname != null) {
			var aid = objectIDs[aname];
			var bid = objectIDs[bname];
			if(aid != null && bid != null) {
				return bid - aid;
			}
			if(aname < bname) {
				return 1;
			} else {
				return -1;
			}
		}
		var anumb = adata.numb;
		var bnumb = bdata.numb;
		return bnumb - anumb;
	});
	var _g = 0;
	while(_g < eventData.length) {
		var source = eventData[_g];
		++_g;
		var event = new gmx_SfGmx("event");
		var data = source.data;
		event.set("eventtype","" + data.type);
		if(data.numb != null) {
			event.set("enumb","" + data.numb);
		}
		if(data.name != null) {
			event.set("ename","" + data.name);
		}
		evCtr.children.push(event);
		if(source.code.length > 0) {
			var _g1 = 0;
			var _g11 = source.code;
			while(_g1 < _g11.length) {
				var gml1 = _g11[_g1];
				++_g1;
				var a1 = gmx_GmxAction.makeCodeBlock(gml1 + "\r\n");
				if(a1 == null) {
					gmx_GmxObject.errorText = gmx_GmxAction.errorText;
					return false;
				} else {
					event.children.push(a1);
				}
			}
		} else {
			var q = gmx_GmxAction.makeCodeBlock("");
			event.children.push(q);
		}
	}
	return true;
};
gmx_GmxObject.openEventInherited = function(full,edef) {
	var edata = parsers_GmlEvent.fromString(edef);
	if(edata == null) {
		return null;
	}
	var etype = "" + edata.type;
	var enumb = edata.numb != null ? "" + edata.numb : null;
	var ename = edata.name;
	var dir = haxe_io_Path.directory(full);
	var gmx1 = electron_FileWrap.readGmxFileSync(full);
	var parent = gmx1.findText("parentName");
	var tries = 1024;
	while(parent != "<undefined>" && --tries >= 0) {
		var path = haxe_io_Path.join([dir,parent + ".object.gmx"]);
		if(!electron_FileWrap.existsSync(path)) {
			return null;
		}
		gmx1 = electron_FileWrap.readGmxFileSync(path);
		var _g = 0;
		var _g1 = gmx1.findAll("events");
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g11 = _g1[_g++].findAll("event");
			while(_g2 < _g11.length) {
				var event = _g11[_g2];
				++_g2;
				if(event.attrMap["eventtype"] == etype && event.attrMap["enumb"] == enumb && event.attrMap["ename"] == ename) {
					return gml_file_GmlFile.open(parent,path,{ def : edef});
				}
			}
		}
		parent = gmx1.findText("parentName");
	}
	return null;
};
gmx_GmxObject.getInfo = function(gmx1,path,info) {
	var objName = haxe_io_Path.withoutExtension(haxe_io_Path.withoutExtension(haxe_io_Path.withoutDirectory(path)));
	if(info == null) {
		info = new gml_GmlObjectInfo();
		info.spriteName = gmx1.findText("spriteName");
		info.objectName = objName;
		info.visible = gmx1.findText("visible") != "0";
		info.persistent = gmx1.findText("persistent") != "0";
		info.solid = gmx1.findText("solid") != "0";
		info.depth = parseFloat(gmx1.findText("depth"));
	}
	var _g = 0;
	var _g1 = gmx1.findAll("events");
	while(_g < _g1.length) {
		var _g2 = 0;
		var _g11 = _g1[_g++].findAll("event");
		while(_g2 < _g11.length) {
			var event = _g11[_g2];
			++_g2;
			var enumb = event.attrMap["enumb"];
			var eid = parsers_GmlEvent.toString(Std.parseInt(event.attrMap["eventtype"]),enumb != null ? Std.parseInt(enumb) : null,event.attrMap["ename"]);
			var elist = info.eventMap[eid];
			if(elist == null) {
				elist = [];
				info.eventList.push(eid);
				info.eventMap[eid] = elist;
			}
			elist.unshift(objName + "(" + eid + ")");
		}
	}
	var parent = gmx1.findText("parentName");
	if(parent != "" && parent != "<undefined>") {
		var parentPath = haxe_io_Path.join([haxe_io_Path.directory(path),parent + ".object.gmx"]);
		info.parents.unshift(parent);
		if(electron_FileWrap.existsSync(parentPath)) {
			gmx_GmxObject.getInfo(electron_FileWrap.readGmxFileSync(parentPath),parentPath,info);
		}
	}
	return info;
};
var gmx_GmxProject = function() { };
$hxClasses["gmx.GmxProject"] = gmx_GmxProject;
gmx_GmxProject.__name__ = "gmx.GmxProject";
gmx_GmxProject.getNotePath = function(path) {
	return path + ".gmlnotes";
};
gmx_GmxProject.getMacroCode = function(gmx1,notes,isConfig) {
	var out = "";
	if(isConfig) {
		gmx1 = gmx1.find("ConfigConstants");
	}
	if(gmx1 != null) {
		var _g = 0;
		var _g1 = gmx1.findAll("constants");
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g11 = _g1[_g++].findAll("constant");
			while(_g2 < _g11.length) {
				var mcrNode = _g11[_g2];
				++_g2;
				out += "#macro " + mcrNode.attrMap["name"] + " " + mcrNode.text + "\n";
			}
		}
	}
	if(notes != null) {
		var flush0 = 0;
		while(notes.get_loop()) {
			var flush1 = notes.pos;
			var c = notes.source.charCodeAt(notes.pos++);
			switch(c) {
			case 35:
				if(HxOverrides.substr(notes.source,notes.pos,5) != "macro") {
					continue;
				}
				notes.pos += 5;
				notes.skipSpaces0();
				var start = notes.pos;
				while(notes.get_loop()) {
					c = notes.source.charCodeAt(notes.pos);
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
						notes.pos += 1;
					} else {
						break;
					}
				}
				var name = notes.source.substring(start,notes.pos);
				notes.skipLine();
				notes.skipLineEnd();
				if(flush1 > flush0) {
					var flush = notes.source.substring(flush0,flush1);
					var at = out.indexOf("#macro " + name);
					if(at >= 0) {
						out = out.substring(0,at) + flush + out.substring(at);
					} else {
						out += flush;
					}
				}
				flush0 = notes.pos;
				break;
			case 47:
				switch(notes.source.charCodeAt(notes.pos)) {
				case 42:
					notes.pos += 1;
					notes.skipComment();
					break;
				case 47:
					notes.pos += 1;
					notes.skipLine();
					break;
				default:
				}
				break;
			case 34:case 39:case 64:case 96:
				notes.skipStringAuto(c,1);
				break;
			}
		}
		if(notes.pos > flush0) {
			out += notes.source.substring(flush0,notes.pos);
		}
	}
	return out;
};
gmx_GmxProject.setMacroCode = function(gmx1,gmlCode,notes,isConfig) {
	var q = new parsers_GmlReader(gmlCode);
	var mcrOuter = isConfig ? gmx1.find("ConfigConstants") : gmx1;
	var mcrParent = mcrOuter.find("constants");
	if(mcrParent == null) {
		mcrParent = new gmx_SfGmx("constants");
		mcrOuter.children.push(mcrParent);
	} else {
		mcrParent.children.splice(0,mcrParent.children.length);
	}
	var found = 0;
	var flush0 = 0;
	while(q.get_loop()) {
		var flush1 = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(HxOverrides.substr(q.source,q.pos,5) != "macro") {
				continue;
			}
			q.pos += 5;
			q.skipSpaces0();
			var start = q.pos;
			while(q.get_loop()) {
				c = q.source.charCodeAt(q.pos);
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
					q.pos += 1;
				} else {
					break;
				}
			}
			var name = q.source.substring(start,q.pos);
			q.skipSpaces0();
			start = q.pos;
			q.skipLine();
			var expr = q.source.substring(start,q.pos);
			q.skipLineEnd();
			var mcrNode = new gmx_SfGmx("constant",expr);
			mcrNode.set("name",name);
			mcrParent.children.push(mcrNode);
			if(flush1 > flush0) {
				notes.b += Std.string(q.source.substring(flush0,flush1));
				notes.addFormat("#macro %s\n",name);
			}
			flush0 = q.pos;
			++found;
			break;
		case 34:case 39:
			q.skipString1(c);
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				q.skipLineEnd();
				break;
			default:
			}
			break;
		default:
		}
	}
	if(q.pos > flush0) {
		notes.b += Std.string(q.source.substring(flush0,q.pos));
	}
	mcrParent.set("number","" + found);
	return true;
};
var gmx_GmxSearcher = function() { };
$hxClasses["gmx.GmxSearcher"] = gmx_GmxSearcher;
gmx_GmxSearcher.__name__ = "gmx.GmxSearcher";
gmx_GmxSearcher.run = function(pj,fn,done,opt) {
	var pjDir = pj.dir;
	var pjGmx = electron_FileWrap.readGmxFileSync(pj.path);
	var rxName = gmx_GmxLoader.rxAssetName;
	var filesLeft = 1;
	var addError = function(s) {
		if(opt.errors != null) {
			opt.errors += "\n" + s;
		} else {
			opt.errors = s;
		}
	};
	var findrec = null;
	findrec = function(node,one) {
		if(node.name == one) {
			var name = node.text.replace(rxName.r,"$1");
			var full = haxe_io_Path.join([pjDir,node.text]);
			switch(one) {
			case "object":
				full += "." + one + ".gmx";
				filesLeft += 1;
				electron_FileWrap.readTextFile(full,function(err,xml) {
					if(err == null) {
						var gmx1 = gmx_SfGmx.parse(xml);
						var gml0 = gmx_GmxObject.getCode(gmx1);
						if(gml0 != null) {
							var gml1 = fn(name,full,gml0);
							if(gml1 != null && gml1 != gml0) {
								if(gmx_GmxObject.setCode(gmx1,gml1)) {
									var findrec1 = gmx1.toGmxString();
									electron_FileWrap.writeTextFileSync(full,findrec1);
								} else {
									addError("Failed to modify " + name + ":\n" + gmx_GmxObject.errorText);
								}
							}
						}
					}
					if((filesLeft -= 1) <= 0) {
						done();
					}
				});
				break;
			case "script":case "shader":
				filesLeft += 1;
				electron_FileWrap.readTextFile(full,function(err1,code) {
					if(err1 == null) {
						var gml11 = fn(name,full,code);
						if(gml11 != null && gml11 != code) {
							electron_FileWrap.writeTextFileSync(full,gml11);
						}
					}
					if((filesLeft -= 1) <= 0) {
						done();
					}
				});
				break;
			case "timeline":
				full += "." + one + ".gmx";
				filesLeft += 1;
				electron_FileWrap.readTextFile(full,function(err2,xml1) {
					if(err2 == null) {
						var gmx2 = gmx_SfGmx.parse(xml1);
						var gml01 = gmx_GmxTimeline.getCode(gmx2);
						if(gml01 != null) {
							var gml12 = fn(name,full,gml01);
							if(gml12 != null && gml12 != gml01) {
								if(gmx_GmxTimeline.setCode(gmx2,gml12)) {
									var findrec2 = gmx2.toGmxString();
									electron_FileWrap.writeTextFileSync(full,findrec2);
								} else {
									addError("Failed to modify " + name + ":\n" + gmx_GmxTimeline.errorText);
								}
							}
						}
					}
					if((filesLeft -= 1) <= 0) {
						done();
					}
				});
				break;
			}
		} else {
			var _g = 0;
			var _g1 = node.children;
			while(_g < _g1.length) findrec(_g1[_g++],one);
		}
	};
	if(opt.checkScripts) {
		var _g2 = 0;
		var _g11 = pjGmx.findAll("scripts");
		while(_g2 < _g11.length) findrec(_g11[_g2++],"script");
	}
	if(opt.checkObjects) {
		var _g3 = 0;
		var _g12 = pjGmx.findAll("objects");
		while(_g3 < _g12.length) findrec(_g12[_g3++],"object");
	}
	if(opt.checkTimelines) {
		var _g4 = 0;
		var _g13 = pjGmx.findAll("timelines");
		while(_g4 < _g13.length) findrec(_g13[_g4++],"timeline");
	}
	if(opt.checkShaders) {
		var _g5 = 0;
		var _g14 = pjGmx.findAll("shaders");
		while(_g5 < _g14.length) findrec(_g14[_g5++],"shader");
	}
	if(opt.checkExtensions) {
		var _g6 = 0;
		var _g15 = pjGmx.findAll("NewExtensions");
		while(_g6 < _g15.length) {
			var _g7 = 0;
			var _g16 = _g15[_g6++].findAll("extension");
			while(_g7 < _g16.length) {
				var extNode = [_g16[_g7]];
				++_g7;
				var extPath = extNode[0].text + ".extension.gmx";
				if(opt.expandLambdas && extNode[0].text == "gmedit_lambda") {
					continue;
				}
				filesLeft += 1;
				var tmp = (function(extNode1) {
					return function(extError,extGmx) {
						if(extError == null) {
							var _g8 = 0;
							var _g17 = extGmx.findAll("files");
							while(_g8 < _g17.length) {
								var _g9 = 0;
								var _g18 = _g17[_g8++].findAll("file");
								while(_g9 < _g18.length) {
									var extFileName = _g18[_g9++].findText("filename");
									if(haxe_io_Path.extension(extFileName).toLowerCase() != "gml") {
										continue;
									}
									var extFilePath = [haxe_io_Path.join([extNode1[0].text,extFileName])];
									filesLeft += 1;
									var extFilePath1 = extFilePath[0];
									var tmp1 = (function(extFilePath2) {
										return function(err3,code1) {
											if(err3 == null) {
												var gml13 = fn(extFilePath2[0],extFilePath2[0],code1);
												if(gml13 != null && gml13 != code1) {
													pj.writeTextFileSync(extFilePath2[0],gml13);
												}
											}
											if((filesLeft -= 1) <= 0) {
												done();
											}
										};
									})(extFilePath);
									pj.readTextFile(extFilePath1,tmp1);
								}
							}
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(extNode);
				pj.readGmxFile(extPath,tmp);
			}
		}
	}
	var findMcr = function(name1,full1,pjGmx1) {
		var procMcr = function(gmx3) {
			var notePath = gmx_GmxProject.getNotePath(full1);
			var gml02 = gmx_GmxProject.getMacroCode(gmx3,electron_FileWrap.existsSync(notePath) ? new parsers_GmlReader(electron_FileWrap.readTextFileSync(notePath)) : null,pjGmx1 == null);
			var gml14 = fn(name1,full1,gml02);
			if(gml14 != null && gml14 != gml02) {
				var notes1 = new tools_StringBuilder();
				if(gmx_GmxProject.setMacroCode(gmx3,gml14,notes1,pjGmx1 == null)) {
					if(notes1.b.length > 0) {
						electron_FileWrap.writeTextFileSync(notePath,notes1.b);
					} else if(electron_FileWrap.existsSync(notePath)) {
						electron_FileWrap.unlinkSync(notePath);
					}
					var procMcr1 = gmx3.toGmxString();
					electron_FileWrap.writeTextFileSync(full1,procMcr1);
				} else {
					addError("Failed to modify " + name1 + ":\n" + gmx_GmxTimeline.errorText);
				}
			}
		};
		if(pjGmx1 == null) {
			filesLeft += 1;
			electron_FileWrap.readTextFile(full1,function(err4,xml2) {
				if(err4 == null) {
					var findMcr1 = gmx_SfGmx.parse(xml2);
					procMcr(findMcr1);
				}
				if((filesLeft -= 1) <= 0) {
					done();
				}
			});
		} else {
			procMcr(pjGmx1);
		}
	};
	if(opt.checkMacros) {
		var _g10 = 0;
		var _g19 = pjGmx.findAll("Configs");
		while(_g10 < _g19.length) {
			var _g20 = 0;
			var _g110 = _g19[_g10++].findAll("Config");
			while(_g20 < _g110.length) {
				var configPath = _g110[_g20++].text;
				findMcr(configPath.replace(rxName.r,"$1"),haxe_io_Path.join([pjDir,configPath + ".config.gmx"]),null);
			}
		}
	}
	findMcr(gmx_GmxLoader.allConfigs,pj.path,pjGmx);
	if((filesLeft -= 1) <= 0) {
		done();
	}
};
var gmx_GmxTimeline = function() { };
$hxClasses["gmx.GmxTimeline"] = gmx_GmxTimeline;
gmx_GmxTimeline.__name__ = "gmx.GmxTimeline";
gmx_GmxTimeline.getCode = function(tl) {
	var out = "";
	var errors = "";
	var _g = 0;
	var _g1 = tl.findAll("entry");
	while(_g < _g1.length) {
		var entry = _g1[_g];
		++_g;
		if(out != "") {
			out += "\n";
		}
		var name = entry.findText("step");
		out += "#moment " + name;
		var event = entry.find("event");
		var code = gmx_GmxEvent.getCode(event);
		if(code != null) {
			var pair = parsers_GmlHeader.parse(code,1);
			if(pair.name != null) {
				out += pair.name;
			}
			if(event.find("action") != null) {
				out += "\n";
			}
			out += pair.code;
		} else {
			errors += "Unreadable action in moment " + name + ":\n";
			errors += gmx_GmxAction.errorText + "\n";
		}
	}
	if(errors != "") {
		gmx_GmxTimeline.errorText = errors;
		return null;
	} else {
		return tools_NativeString.trimTrailRn(out);
	}
};
gmx_GmxTimeline.setCode = function(tl,gmlCode) {
	var data = parsers_GmlTimeline.parse(gmlCode,1);
	if(data == null) {
		gmx_GmxTimeline.errorText = parsers_GmlTimeline.parseError;
		return false;
	}
	tl.children.splice(0,tl.children.length);
	data.sort(function(a,b) {
		return a.moment - b.moment;
	});
	var _g = 0;
	while(_g < data.length) {
		var item = data[_g];
		++_g;
		var entry = new gmx_SfGmx("entry");
		tl.children.push(entry);
		entry.addTextChild("step","" + item.moment);
		var event = new gmx_SfGmx("event");
		entry.children.push(event);
		var _g1 = 0;
		var _g11 = item.code;
		while(_g1 < _g11.length) {
			var a1 = gmx_GmxAction.makeCodeBlock(_g11[_g1++] + "\r\n");
			if(a1 == null) {
				gmx_GmxTimeline.errorText = gmx_GmxAction.errorText;
				return false;
			} else {
				event.children.push(a1);
			}
		}
	}
	return true;
};
var gmx_SfGmx = function(name,text) {
	this.attrMap = Object.create(null);
	this.attrList = [];
	this.children = [];
	this.name = name;
	this.text = text;
};
$hxClasses["gmx.SfGmx"] = gmx_SfGmx;
gmx_SfGmx.__name__ = "gmx.SfGmx";
gmx_SfGmx.fromXml = function(xml) {
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	var gmx1 = new gmx_SfGmx(xml.nodeName);
	var a = xml.attributes();
	while(a.hasNext()) {
		var a1 = a.next();
		gmx1.attrList.push(a1);
		gmx1.attrMap[a1] = xml.get(a1);
	}
	var q = xml.elements();
	while(q.hasNext()) {
		var q1 = q.next();
		gmx1.children.push(gmx_SfGmx.fromXml(q1));
	}
	if(gmx1.children.length == 0) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
		}
		var q2 = xml.children[0];
		if(q2 != null) {
			if(q2.nodeType == Xml.Document || q2.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(q2.nodeType));
			}
			gmx1.text = q2.nodeValue;
		}
	}
	return gmx1;
};
gmx_SfGmx.parse = function(code) {
	return gmx_SfGmx.fromXml(Xml.parse(code).firstElement());
};
gmx_SfGmx.prototype = {
	addTextChild: function(name,value) {
		var r = new gmx_SfGmx(name,value);
		this.children.push(r);
		return r;
	}
	,find: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				return q;
			}
		}
		return null;
	}
	,findText: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				return q.text;
			}
		}
		return null;
	}
	,findInt: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				return Std.parseInt(q.text);
			}
		}
		return null;
	}
	,findFloat: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				return parseFloat(q.text);
			}
		}
		return null;
	}
	,findAll: function(name) {
		var r = [];
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				r.push(q);
			}
		}
		return r;
	}
	,findRec: function(name,r) {
		if(r == null) {
			r = [];
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q.name == name) {
				r.push(q);
			}
			q.findRec(name,r);
		}
		return r;
	}
	,set: function(attr,value) {
		if(!Object.prototype.hasOwnProperty.call(this.attrMap,attr)) {
			this.attrList.push(attr);
		}
		this.attrMap[attr] = value;
	}
	,toStringRec: function(r,t) {
		r.b += String.fromCodePoint(60);
		r.b += Std.string(this.name);
		var _g = 0;
		var _g1 = this.attrList;
		while(_g < _g1.length) {
			var attr = _g1[_g];
			++_g;
			r.addFormat(" %s=\"%s\"",attr,StringTools.htmlEscape(this.attrMap[attr],true));
		}
		if(this.children.length == 0 && this.text == null) {
			r.b += "/>";
			return;
		}
		r.b += String.fromCodePoint(62);
		var n = this.children.length;
		if(n > 0) {
			var t1 = t + "  ";
			var _g2 = 0;
			var _g3 = n;
			while(_g2 < _g3) {
				var i = _g2++;
				r.b += "\r\n";
				r.b += t1 == null ? "null" : "" + t1;
				this.children[i].toStringRec(r,t1);
			}
			r.b += "\r\n";
			r.b += t == null ? "null" : "" + t;
		} else {
			var x = StringTools.htmlEscape(this.text);
			r.b += Std.string(x);
		}
		r.addFormat("</%s>",this.name);
	}
	,toString: function() {
		var b = new tools_StringBuilder();
		this.toStringRec(b,"");
		return b.b;
	}
	,toGmxString: function() {
		var b = new tools_StringBuilder();
		b.b += "<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->\r\n";
		this.toStringRec(b,"");
		b.b += "\r\n";
		return b.b;
	}
	,__class__: gmx_SfGmx
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	a.a1 = i.readByte() << 8 | i.readByte();
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			a1 = (a1 + b.b[_g++]) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = "haxe.crypto.Crc32";
haxe_crypto_Crc32.make = function(data) {
	var c_crc = -1;
	var len = data.length;
	var b = data.b.bufferValue;
	var _g = 0;
	while(_g < len) {
		var tmp = (c_crc ^ b.bytes[_g++]) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		c_crc = c_crc >>> 8 ^ tmp;
	}
	return c_crc ^ -1;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
};
$hxClasses["haxe.http.HttpBase"] = haxe_http_HttpBase;
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,__class__: haxe_http_HttpBase
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
$hxClasses["haxe.http.HttpJs"] = haxe_http_HttpJs;
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseData = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				s = null;
			}
			if(s != null && typeof(window) != "undefined") {
				var protocol = window.location.protocol.toLowerCase();
				if(new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","").match(protocol)) {
					s = r.responseText != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				_gthis.onData(_gthis.responseData = r.responseText);
			} else if(s == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				_gthis.responseData = r.responseText;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					_gthis.responseData = r.responseText;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri = this.postData;
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri += "&";
				}
				var s1 = p.name;
				var uri1 = encodeURIComponent(s1) + "=";
				var s2 = p.value;
				uri += uri1 + encodeURIComponent(s2);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				r.open("GET",this.url + (this.url.split("?").length <= 1 ? "?" : "&") + uri,this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			this.req = null;
			this.onError(e2.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g2 = 0;
		var _g11 = this.headers;
		while(_g2 < _g11.length) {
			var h1 = _g11[_g2];
			++_g2;
			r.setRequestHeader(h1.name,h1.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var code1 = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if(!((((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof) instanceof haxe_io_Eof)) {
				throw eof;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		if(s != null) {
			return s != "";
		} else {
			return false;
		}
	});
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g = 1;
	var _g1 = paths1.length;
	while(_g < _g1) {
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[_g++];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = target.join(slash);
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.isAbsolute = function(path) {
	if(StringTools.startsWith(path,"/")) {
		return true;
	}
	if(path.charAt(1) == ":") {
		return true;
	}
	if(StringTools.startsWith(path,"\\\\")) {
		return true;
	}
	return false;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_io__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["haxe.io._UInt8Array.UInt8Array_Impl_"] = haxe_io__$UInt8Array_UInt8Array_$Impl_$;
haxe_io__$UInt8Array_UInt8Array_$Impl_$.__name__ = "haxe.io._UInt8Array.UInt8Array_Impl_";
haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	while(_g < position) {
		var c = xml.charCodeAt(_g++);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				aname = HxOverrides.substr(str,start,p - start);
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				parent.addChild(Xml.createProcessingInstruction(HxOverrides.substr(str,start + 1,p - start - 2)));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createCData(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) this.writeNode(child.next(),this.pretty ? tabs + "\t" : tabs);
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			this.output.b += Std.string(StringTools.trim(commentContent));
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child1 = HxOverrides.iter(value.children);
			while(child1.hasNext()) this.writeNode(child1.next(),tabs);
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__ : true, __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"]
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			return 0;
		case 1:
			var da = this.treeDepth(t.left);
			var db = this.treeDepth(t.right);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				return haxe_zip_Huffman.NeedBit(this.treeCompress(t.left),this.treeCompress(t.right));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		while(_g < size) {
			++_g;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,t.left);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,t.right);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g = 0;
		while(_g < maxbits) {
			++_g;
			counts.push(0);
			tmp.push(0);
		}
		var _g2 = 0;
		while(_g2 < nlengths) {
			var p = lengths[_g2++ + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g4 = 1;
		var _g5 = maxbits - 1;
		while(_g4 < _g5) {
			var i = _g4++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g6 = 0;
		while(_g6 < nlengths) {
			var i1 = _g6++;
			var l = lengths[i1 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i1;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		while(_g < n) {
			++_g;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			return h.i;
		case 1:
			return this.applyHuffman(this.getBit() ? h.right : h.left);
		case 2:
			return this.applyHuffman(h.table[this.getBits(h.n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			if((cmf & 15) != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if((flg & 32) != 0) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				if(this.input.readUInt16() != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				while(_g < hclen) this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[_g++]] = this.getBits(3);
				var _g2 = hclen;
				while(_g2 < 19) this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[_g2++]] = 0;
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g4 = 0;
				var _g5 = hlit + hdist;
				while(_g4 < _g5) {
					++_g4;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			if(!calc.equals(haxe_crypto_Adler32.read(this.input))) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	return new haxe_zip_Reader(i).read();
};
haxe_zip_Reader.prototype = {
	readZipDate: function() {
		var t = this.i.readUInt16();
		var d = this.i.readUInt16();
		return new Date((d >> 9) + 1980,(d >> 5 & 15) - 1,d & 31,t >> 11 & 31,t >> 5 & 63,(t & 31) << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw new js__$Boot_HaxeError("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw new js__$Boot_HaxeError("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(this.i.read(len - 5).toString(),crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw new js__$Boot_HaxeError("Invalid Zip Data");
		}
		i.readUInt16();
		var flags = i.readUInt16();
		if((flags & 63473) != 0) {
			throw new js__$Boot_HaxeError("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw new js__$Boot_HaxeError("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if((flags & 2048) != 0) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : null, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					if(tmp == null) {
						tmp = new haxe_io_Bytes(new ArrayBuffer(65536));
					}
					var out = new haxe_io_BytesBuffer();
					var z = new haxe_zip_InflateImpl(this.i,false,false);
					while(true) {
						var n = z.readBytes(tmp,0,65536);
						out.addBytes(tmp,0,n);
						if(n < 65536) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var haxe_zip_Writer = function(o) {
	this.o = o;
	this.files = new haxe_ds_List();
};
$hxClasses["haxe.zip.Writer"] = haxe_zip_Writer;
haxe_zip_Writer.__name__ = "haxe.zip.Writer";
haxe_zip_Writer.prototype = {
	writeZipDate: function(date) {
		this.o.writeUInt16(date.getHours() << 11 | date.getMinutes() << 5 | date.getSeconds() >> 1);
		this.o.writeUInt16(date.getFullYear() - 1980 << 9 | date.getMonth() + 1 << 5 | date.getDate());
	}
	,writeEntryHeader: function(f) {
		var o = this.o;
		var flags = 0;
		if(f.extraFields != null) {
			var _g_head = f.extraFields.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				if(val._hx_index == 2) {
					flags |= 2048;
				}
			}
		}
		o.writeInt32(67324752);
		o.writeUInt16(20);
		o.writeUInt16(flags);
		if(f.data == null) {
			f.fileSize = 0;
			f.dataSize = 0;
			f.crc32 = 0;
			f.compressed = false;
			f.data = new haxe_io_Bytes(new ArrayBuffer(0));
		} else {
			if(f.crc32 == null) {
				if(f.compressed) {
					throw new js__$Boot_HaxeError("CRC32 must be processed before compression");
				}
				f.crc32 = haxe_crypto_Crc32.make(f.data);
			}
			if(!f.compressed) {
				f.fileSize = f.data.length;
			}
			f.dataSize = f.data.length;
		}
		o.writeUInt16(f.compressed ? 8 : 0);
		this.writeZipDate(f.fileTime);
		o.writeInt32(f.crc32);
		o.writeInt32(f.dataSize);
		o.writeInt32(f.fileSize);
		o.writeUInt16(f.fileName.length);
		var e = new haxe_io_BytesOutput();
		if(f.extraFields != null) {
			var _g_head1 = f.extraFields.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				switch(val1._hx_index) {
				case 0:
					var _g3 = val1.bytes;
					e.writeUInt16(val1.tag);
					e.writeUInt16(_g3.length);
					e.write(_g3);
					break;
				case 1:
					var namebytes = haxe_io_Bytes.ofString(val1.name);
					e.writeUInt16(28789);
					e.writeUInt16(namebytes.length + 5);
					e.writeByte(1);
					e.writeInt32(val1.crc);
					e.write(namebytes);
					break;
				case 2:
					break;
				}
			}
		}
		var ebytes = e.getBytes();
		o.writeUInt16(ebytes.length);
		o.writeString(f.fileName);
		o.write(ebytes);
		this.files.add({ name : f.fileName, compressed : f.compressed, clen : f.data.length, size : f.fileSize, crc : f.crc32, date : f.fileTime, fields : ebytes});
	}
	,write: function(files) {
		var _g_head = files.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.writeEntryHeader(val);
			this.o.writeFullBytes(val.data,0,val.data.length);
		}
		this.writeCDR();
	}
	,writeCDR: function() {
		var cdr_size = 0;
		var cdr_offset = 0;
		var _g_head = this.files.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var namelen = val.name.length;
			var extraFieldsLength = val.fields.length;
			this.o.writeInt32(33639248);
			this.o.writeUInt16(20);
			this.o.writeUInt16(20);
			this.o.writeUInt16(0);
			this.o.writeUInt16(val.compressed ? 8 : 0);
			this.writeZipDate(val.date);
			this.o.writeInt32(val.crc);
			this.o.writeInt32(val.clen);
			this.o.writeInt32(val.size);
			this.o.writeUInt16(namelen);
			this.o.writeUInt16(extraFieldsLength);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeInt32(0);
			this.o.writeInt32(cdr_offset);
			this.o.writeString(val.name);
			this.o.write(val.fields);
			cdr_size += 46 + namelen + extraFieldsLength;
			cdr_offset += 30 + namelen + extraFieldsLength + val.clen;
		}
		this.o.writeInt32(101010256);
		this.o.writeUInt16(0);
		this.o.writeUInt16(0);
		this.o.writeUInt16(this.files.length);
		this.o.writeUInt16(this.files.length);
		this.o.writeInt32(cdr_size);
		this.o.writeInt32(cdr_offset);
		this.o.writeUInt16(0);
	}
	,__class__: haxe_zip_Writer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = intf[_g++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(((o) instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		if(o.__enum__ != null) {
			return $hxEnums[o.__enum__] == cl;
		} else {
			return false;
		}
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var parsers_GmlEvent = function() { };
$hxClasses["parsers.GmlEvent"] = parsers_GmlEvent;
parsers_GmlEvent.__name__ = "parsers.GmlEvent";
parsers_GmlEvent.link = function(type,numb,name) {
	var arr = parsers_GmlEvent.i2s[type];
	if(arr == null) {
		arr = [];
		parsers_GmlEvent.i2s[type] = arr;
	}
	arr[numb] = name;
	parsers_GmlEvent.s2i[name] = { type : type, numb : numb};
};
parsers_GmlEvent.linkType = function(type,name) {
	var nlq = name.toLowerCase();
	parsers_GmlEvent.t2s[type] = nlq;
	parsers_GmlEvent.t2sc[type] = name;
	parsers_GmlEvent.s2t[nlq] = type;
};
parsers_GmlEvent.toString = function(type,numb,name) {
	if(type == 4) {
		return "collision:" + name;
	}
	var arr = parsers_GmlEvent.i2s[type];
	if(arr != null) {
		var out = arr[numb];
		if(out != null) {
			return out;
		}
	}
	var tName = parsers_GmlEvent.t2s[type];
	if(type == 5 || type == 9 || type == 10) {
		return tName + ":" + parsers_GmlKeycode.toName(numb);
	}
	if(tName != null) {
		return tName + ":" + numb;
	}
	return "event" + type + ":" + numb;
};
parsers_GmlEvent.fromString = function(name) {
	var out = parsers_GmlEvent.s2i[name];
	if(out != null) {
		return out;
	}
	var i = name.indexOf(":");
	if(i < 0) {
		return null;
	}
	var type = parsers_GmlEvent.s2t[name.substring(0,i)];
	var name1 = name.substring(i + 1);
	if(type == null) {
		return null;
	}
	if(type == 4) {
		return { type : type, numb : null, name : name1};
	}
	if(type == 5 || type == 9 || type == 10) {
		var r = parsers_GmlKeycode.codes[name1];
		var key = r == null ? name1.startsWith("key") ? Std.parseInt(name1.substring(3)) : null : r;
		if(key == null) {
			return null;
		}
		return { type : type, numb : key};
	}
	var numb = Std.parseInt(name1);
	if(numb == null) {
		return null;
	}
	return { type : type, numb : numb};
};
parsers_GmlEvent.parse = function(gmlCode,version) {
	var eventData = [];
	var eventMap = Object.create(null);
	var errors = "";
	var q = new parsers_GmlReader(gmlCode);
	var evStart = 0;
	var evCode = [];
	var evName = null;
	var sctName = null;
	var flush = function(till,cont,eof) {
		var flushCode = q.source.substring(evStart,till);
		flushCode = tools_NativeString.trimTrailRn(flushCode,eof ? 0 : cont ? 1 : 2);
		if(evName == null) {
			if(flushCode != "") {
				errors += "There's code prior to first event definition.\n";
			}
		} else {
			if(sctName != null && sctName != "") {
				flushCode = "///" + sctName + "\r\n" + flushCode;
				sctName = null;
			}
			var flushData = parsers_GmlEvent.fromString(evName);
			if(flushData != null) {
				if(eof || flushCode != "") {
					evCode.push(flushCode);
				}
				if(!cont) {
					if(Object.prototype.hasOwnProperty.call(eventMap,evName)) {
						errors += "Duplicate event declaration found for `" + evName + "`.\n";
					} else {
						eventData.push({ data : flushData, code : evCode});
						eventMap[evName] = true;
					}
					evCode = [];
				}
			} else {
				errors += "`" + evName + "` is not a known event type.\n";
			}
		}
	};
	while(q.get_loop()) {
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(q.pos > 1) {
				switch(q.source.charCodeAt(q.pos - 2)) {
				case 10:case 13:
					break;
				default:
					continue;
				}
			}
			if(HxOverrides.substr(q.source,q.pos,5) == "event") {
				flush(q.pos - 1,false);
				q.pos += 5;
				q.skipSpaces0();
				var nameStart = q.pos;
				q.skipEventName();
				evName = q.source.substring(nameStart,q.pos);
				nameStart = q.pos;
				q.skipSpaces0();
				q.skipLine();
				sctName = q.source.substring(nameStart,q.pos);
				if(sctName == "") {
					sctName = null;
				} else if(version == 2) {
					if(HxOverrides.cca(sctName,0) == 124) {
						sctName = " @desc " + sctName.substring(1);
					} else {
						sctName = " @description" + sctName;
					}
				} else if(HxOverrides.cca(sctName,0) == 124) {
					sctName = sctName.substring(1);
				}
				q.skipLineEnd();
				evStart = q.pos;
			} else if(version == 1 && HxOverrides.substr(q.source,q.pos,7) == "section") {
				var nameStart1 = q.pos += 7;
				var nameEnd = -1;
				_hx_loop2: while(q.get_loop()) switch(q.source.charCodeAt(q.pos)) {
				case 10:
					nameEnd = q.pos;
					q.pos += 1;
					break _hx_loop2;
				case 13:
					nameEnd = q.pos;
					q.pos += 1;
					if(q.get_loop() && q.source.charCodeAt(q.pos) == 10) {
						q.pos += 1;
					}
					break _hx_loop2;
				default:
					q.pos += 1;
				}
				if(nameEnd < 0) {
					nameEnd = q.length;
				}
				flush(nameStart1 - 8,true);
				sctName = q.source.substring(nameStart1,nameEnd);
				if(HxOverrides.cca(sctName,0) == 124) {
					sctName = sctName.substring(1);
				}
				evStart = q.pos;
			} else if(version == 1 && HxOverrides.substr(q.source,q.pos,6) == "action") {
				q.pos += 6;
				flush(q.pos - 7,true);
				evStart = q.pos - 7;
				q.skipLine();
				q.skipLineEnd();
				flush(q.pos,true);
				evStart = q.pos;
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	flush(q.pos,false,true);
	if(errors != "") {
		parsers_GmlEvent.parseError = errors;
		return null;
	} else {
		return eventData;
	}
};
parsers_GmlEvent.init = function() {
	parsers_GmlEvent.linkType(0,"event" + 0);
	parsers_GmlEvent.linkType(1,"event" + 1);
	parsers_GmlEvent.linkType(2,"event" + 2);
	parsers_GmlEvent.linkType(3,"event" + 3);
	parsers_GmlEvent.linkType(4,"event" + 4);
	parsers_GmlEvent.linkType(5,"event" + 5);
	parsers_GmlEvent.linkType(6,"event" + 6);
	parsers_GmlEvent.linkType(7,"event" + 7);
	parsers_GmlEvent.linkType(8,"event" + 8);
	parsers_GmlEvent.linkType(9,"event" + 9);
	parsers_GmlEvent.linkType(10,"event" + 10);
	parsers_GmlEvent.linkType(11,"event" + 11);
	parsers_GmlEvent.linkType(12,"event" + 12);
	parsers_GmlEvent.linkType(13,"event" + 13);
	parsers_GmlEvent.linkType(14,"event" + 14);
	parsers_GmlEvent.linkType(15,"event" + 15);
	parsers_GmlEvent.linkType(0,"Create");
	parsers_GmlEvent.linkType(1,"Destroy");
	parsers_GmlEvent.linkType(2,"Alarm");
	parsers_GmlEvent.linkType(3,"Step");
	parsers_GmlEvent.linkType(4,"Collision");
	parsers_GmlEvent.linkType(5,"Keyboard");
	parsers_GmlEvent.linkType(6,"Mouse");
	parsers_GmlEvent.linkType(7,"Other");
	parsers_GmlEvent.linkType(8,"Draw");
	parsers_GmlEvent.linkType(9,"KeyPress");
	parsers_GmlEvent.linkType(10,"KeyRelease");
	parsers_GmlEvent.linkType(12,"CleanUp");
	parsers_GmlEvent.linkType(13,"Gesture");
	parsers_GmlEvent.comp.push({ name : "collision", value : "collision", score : 0, meta : "event", doc : null});
	parsers_GmlEvent.comp.push({ name : "keypress", value : "keypress", score : 0, meta : "event", doc : null});
	parsers_GmlEvent.comp.push({ name : "keyrelease", value : "keyrelease", score : 0, meta : "event", doc : null});
	parsers_GmlEvent.comp.push({ name : "keyboard", value : "keyboard", score : 0, meta : "event", doc : null});
	Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,"api/events.gml"]),"utf8",function(err,data) {
		tools_ERegTools.each(new EReg("^([\\d-]+):([\\d-]+)[ \t]+(\\w+)","gm"),data,function(rx) {
			var name = rx.matched(3);
			parsers_GmlEvent.comp.push({ name : name, value : name, score : 0, meta : "event", doc : null});
			parsers_GmlEvent.link(Std.parseInt(rx.matched(1)),Std.parseInt(rx.matched(2)),name);
		});
	});
};
var parsers_GmlExtArgs = function() { };
$hxClasses["parsers.GmlExtArgs"] = parsers_GmlExtArgs;
parsers_GmlExtArgs.__name__ = "parsers.GmlExtArgs";
parsers_GmlExtArgs.pre = function(code) {
	var version = gml_GmlAPI.version;
	if(!ui_Preferences.current.argsMagic) {
		return code;
	}
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	var rxOpt = parsers_GmlExtArgs.rxOpt;
	var proc = function() {
		var args = "#args";
		var argv = false;
		var found = 0;
		var c;
		var s;
		var pos = q.pos;
		q.skipLine();
		rxOpt.lastIndex = 0;
		var hasReq = !rxOpt.test(q.source.substring(pos,q.pos));
		q.pos = pos + (hasReq ? 3 : 0);
		if(hasReq) {
			_hx_loop1: while(q.get_loop()) {
				q.skipSpaces0();
				if(q.get_eof()) {
					return null;
				}
				pos = q.pos;
				c = q.source.charCodeAt(q.pos);
				if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
					return null;
				}
				q.skipIdent1();
				s = q.source.substring(pos,q.pos);
				if(found > 0) {
					args += ",";
				}
				args += " " + s;
				q.skipSpaces0();
				if(q.source.charCodeAt(q.pos) == 47 && q.source.charCodeAt(q.pos + 1) == 42) {
					var typePos = q.pos;
					q.pos += 2;
					q.skipComment();
					var type = parsers_GmlExtImport.rxLocalType.exec(q.source.substring(typePos,q.pos));
					if(type != null) {
						args += ":" + type[1];
					}
					q.skipSpaces0();
				} else if(q.source.charCodeAt(q.pos) == 58) {
					var typePos1 = q.pos;
					q.pos += 1;
					q.skipSpaces0();
					c = q.source.charCodeAt(q.pos);
					if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
						return null;
					}
					q.skipIdent1();
					if(q.source.charCodeAt(q.pos) == 60) {
						while(q.get_loop()) if(q.source.charCodeAt(q.pos++) == 62) {
							break;
						}
					}
					args += q.source.substring(typePos1,q.pos);
					q.skipSpaces0();
				}
				if(q.get_eof() || q.source.charCodeAt(q.pos) != 61) {
					return null;
				}
				q.pos += 1;
				q.skipSpaces0();
				if(q.get_eof() || q.source.charCodeAt(q.pos) != 97) {
					return null;
				}
				pos = q.pos;
				q.skipIdent1();
				s = q.source.substring(pos,q.pos);
				if(s == "argument") {
					q.skipSpaces0();
					if(q.get_eof() || q.source.charCodeAt(q.pos) != 91) {
						return null;
					}
					q.pos += 1;
					q.skipSpaces0();
					if(q.get_eof()) {
						return null;
					}
					pos = q.pos;
					q.skipIdent1();
					if(q.source.substring(pos,q.pos) != "" + found) {
						return null;
					}
					q.skipSpaces0();
					if(q.get_eof() || q.source.charCodeAt(q.pos) != 93) {
						return null;
					}
					q.pos += 1;
					argv = true;
				} else if(s != "argument" + found) {
					return null;
				}
				++found;
				q.skipSpaces0();
				if(q.get_eof()) {
					break;
				}
				c = q.source.charCodeAt(q.pos);
				switch(c) {
				case 44:
					q.pos += 1;
					break;
				case 59:
					q.pos += 1;
					q.skipSpaces0();
					var this1 = q.source.charCodeAt(q.pos);
					if(!(this1 > 8 && this1 < 14 || this1 == 32)) {
						return null;
					}
					break _hx_loop1;
				default:
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
						break _hx_loop1;
					} else {
						return null;
					}
				}
			}
		}
		var req = found;
		var till = q.pos;
		while(q.get_loop()) {
			q.skipSpaces1();
			pos = q.pos;
			q.skipIdent1();
			s = q.source.substring(pos,q.pos);
			if(s != "var") {
				q.pos = till;
				break;
			}
			q.skipLine();
			rxOpt.lastIndex = 0;
			var mt = rxOpt.exec(q.source.substring(pos,q.pos));
			if(mt == null) {
				q.pos = till;
				break;
			}
			q.pos = pos + rxOpt.lastIndex;
			var name = mt[1];
			var type1 = mt[2];
			var fs = "" + found;
			if(mt[3] != null ? mt[3] != fs || mt[4] != name || mt[5] != fs || mt[6] != name : mt[7] != fs || mt[8] != fs) {
				q.pos = till;
				break;
			}
			var val = mt[9];
			if(found > 0) {
				args += ",";
			}
			var isOpt = val == "undefined";
			args += (isOpt ? " ?" : " ") + name + (type1 != null ? ":" + type1 : "") + (isOpt ? "" : " = " + val);
			++found;
			till = q.pos;
		}
		if(req == found && argv) {
			args += ",";
		}
		var trailEnd = code.indexOf("\n#define",q.pos);
		var trailCode;
		if(trailEnd >= 0) {
			trailCode = code.substring(q.pos,trailEnd);
		} else {
			trailCode = code.substring(q.pos);
		}
		parsers_GmlExtArgs.rxNotMagic.lastIndex = 0;
		if(parsers_GmlExtArgs.rxNotMagic.test(trailCode)) {
			return null;
		}
		return args;
	};
	var checkArgs = true;
	while(q.get_loop()) {
		var p = q.pos;
		var c1 = q.source.charCodeAt(q.pos++);
		switch(c1) {
		case 35:
			if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				if(q.source.substring(p,p + 7) == "#define") {
					checkArgs = true;
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c1,version);
			break;
		default:
			if(checkArgs && (c1 == 95 || c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90)) {
				q.skipIdent1();
				var id = q.source.substring(p,q.pos);
				if(id == "var") {
					var p1 = q.pos;
					q.pos = p;
					var s1 = proc();
					if(s1 != null) {
						out += q.source.substring(start,p);
						out += s1;
						start = q.pos;
						checkArgs = false;
					} else {
						q.pos = p1;
					}
				} else if(parsers_GmlExtArgs.argKeywords[id]) {
					checkArgs = false;
				}
			}
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
parsers_GmlExtArgs.post = function(code) {
	var version = gml_GmlAPI.version;
	parsers_GmlExtArgs.argData = null;
	if(!ui_Preferences.current.argsMagic || code.indexOf("#args") < 0) {
		return code;
	}
	var data = Object.create(null);
	var argNames = [];
	var argTexts = [];
	var curr = { names : argNames, texts : argTexts};
	data[""] = curr;
	var q = new parsers_GmlReader(code);
	var row = 0;
	var out = "";
	var start = 0;
	var flush = function(till) {
		out += q.source.substring(start,till);
	};
	var proc = function() {
		var reqDone = null;
		var found = 0;
		var p = q.pos;
		q.skipLine();
		var line = q.source.substring(p,q.pos);
		var hasTail = parsers_GmlExtArgs.rxHasTail.test(line);
		var hasOpt = hasTail || parsers_GmlExtArgs.rxHasOpt.test(line);
		q.pos = p;
		_hx_loop1: while(q.get_loop()) {
			q.skipSpaces0();
			var val;
			var docName = "";
			var docText = "";
			if(q.source.charCodeAt(q.pos) == 63) {
				q.pos += 1;
				q.skipSpaces0();
				val = "undefined";
				docName = "?";
			} else {
				val = null;
			}
			p = q.pos;
			q.skipIdent1();
			var name = q.source.substring(p,q.pos);
			var type = "";
			if(name == "") {
				parsers_GmlExtArgs.errorText = "[row " + row + "]: " + "Expected an argument name";
				return true;
			}
			docName += name;
			p = q.pos;
			q.skipSpaces0();
			if(q.source.charCodeAt(q.pos) == 58) {
				q.pos += 1;
				q.skipSpaces0();
				var typePos = q.pos;
				q.skipIdent1();
				if(q.pos > typePos) {
					if(q.source.charCodeAt(q.pos) == 60) {
						q.skipTypeParams();
					}
					type = "/*:" + q.source.substring(typePos,q.pos) + "*/";
				} else {
					type = "";
				}
				type = q.source.substring(typePos,q.pos);
				if(type != "") {
					type = "/*:" + type + "*/";
				}
				q.skipSpaces0();
			}
			if(q.source.charCodeAt(q.pos) == 61) {
				if(val != null) {
					parsers_GmlExtArgs.errorText = "[row " + row + "]: " + ("?" + name + " means that default value is undefined, why assign another default value after that");
					return true;
				}
				q.pos += 1;
				q.skipSpaces0();
				p = q.pos;
				var depth = 0;
				_hx_loop2: while(q.get_loop()) {
					var c = q.source.charCodeAt(q.pos++);
					switch(c) {
					case 10:case 13:
						q.pos -= 1;
						break _hx_loop2;
					case 44:
						if(depth <= 0) {
							q.pos -= 1;
							break _hx_loop2;
						}
						break;
					case 47:
						switch(q.source.charCodeAt(q.pos)) {
						case 42:
							q.pos += 1;
							row += q.skipComment();
							break;
						case 47:
							q.skipLine();
							break;
						default:
						}
						break;
					case 40:case 91:case 123:
						++depth;
						break;
					case 41:case 93:case 125:
						--depth;
						break;
					case 34:case 39:case 64:case 96:
						row += q.skipStringAuto(c,version);
						break;
					default:
					}
				}
				if(depth != 0) {
					parsers_GmlExtArgs.errorText = "[row " + row + "]: " + ("Unbalanced expression for value of " + name);
					return true;
				}
				val = q.source.substring(p,q.pos);
			}
			if(val != null) {
				docText = "= " + val;
				if(reqDone == false) {
					reqDone = true;
					out += ";\r\n";
				}
				if(version != 1) {
					out += "var " + name + type + " = argument_count > " + found + (" ? argument[" + found + "] : " + val + ";\r\n");
				} else {
					out += "var " + name + type + "; if (argument_count > " + found + ")" + (" " + name + " = argument[" + found + "]; else " + name + " = " + val + ";\r\n");
				}
			} else {
				if(reqDone) {
					parsers_GmlExtArgs.errorText = "[row " + row + "]: " + "Can't have required arguments after optional arguments.";
					return true;
				}
				reqDone = false;
				if(found == 0) {
					out += "var ";
				} else if(found > 0) {
					out += ", ";
				}
				out += "" + name + type + " = argument" + (hasOpt ? "[" + found + "]" : "" + found);
			}
			argNames.push(docName);
			argTexts.push(docText);
			++found;
			q.skipSpaces0();
			if(q.get_loop()) {
				switch(q.source.charCodeAt(q.pos)) {
				case 10:case 13:
					q.skipLineEnd();
					break _hx_loop1;
				case 44:
					q.pos += 1;
					q.skipSpaces0();
					switch(q.source.charCodeAt(q.pos)) {
					case 10:case 13:
						q.skipLineEnd();
						break _hx_loop1;
					}
					break;
				default:
					parsers_GmlExtArgs.errorText = "[row " + row + "]: " + ("Expected a comma or end of line after " + name);
					return true;
				}
			}
		}
		if(hasTail) {
			argNames.push("...");
			argTexts.push("");
		}
		if(found > 0 && reqDone == false) {
			out += ";\r\n";
		}
		return false;
	};
	while(q.get_loop()) {
		var p1 = q.pos;
		var c1 = q.source.charCodeAt(q.pos++);
		switch(c1) {
		case 35:
			if(q.source.substring(p1,p1 + 5) == "#args") {
				flush(p1);
				q.pos += 4;
				if(proc()) {
					return null;
				}
				start = q.pos;
			} else if((p1 == 0 || q.source.charCodeAt(p1 - 1) == 10) && q.source.substring(p1,p1 + 7) == "#define") {
				flush(p1);
				start = p1;
				q.pos += 6;
				q.skipSpaces0();
				p1 = q.pos;
				q.skipIdent1();
				argNames = [];
				argTexts = [];
				curr = { names : argNames, texts : argTexts};
				data[q.source.substring(p1,q.pos)] = curr;
				q.skipLine();
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				row += q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			row += q.skipStringAuto(c1,version);
			break;
		}
	}
	flush(q.pos);
	parsers_GmlExtArgs.argData = data;
	return out;
};
var parsers_GmlExtArgsDoc = function() { };
$hxClasses["parsers.GmlExtArgsDoc"] = parsers_GmlExtArgsDoc;
parsers_GmlExtArgsDoc.__name__ = "parsers.GmlExtArgsDoc";
parsers_GmlExtArgsDoc.proc1 = function(file) {
	var session = file.getAceSession();
	if(session.getValue().indexOf("#args") < 0) {
		return false;
	}
	var document = session.doc;
	var argData = parsers_GmlExtArgs.argData;
	var curr = argData[""];
	var scriptName = file.name;
	var replace = [];
	var iter = new AceTokenIterator(session,0,0);
	var tk = iter.getCurrentToken();
	var foundDoc = false;
	var hasArgs = false;
	var nextItem = null;
	var rx = parsers_GmlExtArgsDoc.rxGmDoc;
	var startRow = 0;
	var getArgs = function() {
		var doc = "";
		var _g = 0;
		var _g1 = curr.names.length;
		while(_g < _g1) {
			var i = _g++;
			if(i > 0) {
				doc += ", ";
			}
			doc += curr.names[i];
			var text = curr.texts[i];
			if(StringTools.startsWith(text,"=")) {
				if(HxOverrides.cca(text,1) == 32) {
					doc += " ";
				}
				doc += text;
			}
		}
		return doc;
	};
	var flush = function() {
		if(!hasArgs) {
			return;
		}
		if(foundDoc) {
			if(nextItem != null) {
				replace.unshift(nextItem);
			}
		} else {
			var flush1 = ace_extern__$AceRange_AceRange_$Impl_$.fromPos({ column : 0, row : startRow});
			var flush2 = "/// " + scriptName + "(" + getArgs() + ")\n";
			replace.unshift({ range : flush1, text : flush2});
		}
	};
	while(tk != null) {
		switch(tk.type) {
		case "comment.doc.line":
			if(!foundDoc) {
				var mt = rx.exec(tk.value);
				if(mt != null) {
					var args = getArgs();
					if(mt[2] != args) {
						var pos = iter.getCurrentTokenPosition();
						var col = pos.column + mt[1].length;
						var row = pos.row;
						nextItem = { range : ace_extern__$AceRange_AceRange_$Impl_$._new(col,row,col + mt[2].length,row), text : args};
					}
					foundDoc = true;
				}
			}
			break;
		case "preproc.args":
			hasArgs = true;
			break;
		case "preproc.define":
			tk = iter.stepForward();
			if(tk != null) {
				flush();
				scriptName = tk.value;
				curr = argData[scriptName];
				foundDoc = false;
				hasArgs = false;
				nextItem = null;
				startRow = iter.getCurrentTokenPosition().row + 1;
			}
			break;
		}
		tk = iter.stepForward();
	}
	flush();
	var _g2 = 0;
	while(_g2 < replace.length) {
		var pair = replace[_g2];
		++_g2;
		document.replace(pair.range,pair.text);
	}
	return replace.length > 0;
};
parsers_GmlExtArgsDoc.proc2 = function(file,meta) {
	var session = file.getAceSession();
	if(session.getValue().indexOf("#args") < 0) {
		return false;
	}
	var argData = parsers_GmlExtArgs.argData;
	var curr = argData[""];
	var names = curr.names;
	var texts = curr.texts;
	var aceDoc = session.doc;
	var iter = new AceTokenIterator(session,0,0);
	var tk = iter.getCurrentToken();
	var lastRow = -1;
	var count = names.length;
	var rows = [];
	var remove = [];
	var replace = [];
	var insert = [];
	var changed = false;
	var addOffset = 0;
	var delOffset = 0;
	var hasArgs = false;
	rows.length = count;
	var flush = function() {
		if(!hasArgs) {
			return;
		}
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var row = rows[i];
			if(row == null) {
				row = lastRow + 1;
				var text = texts[i];
				if(text != "") {
					text = " " + text;
				}
				insert.push({ row : row, text : "/// " + meta + " " + names[i] + text});
				addOffset += 1;
				changed = true;
			} else {
				row += addOffset;
			}
			lastRow = row;
		}
	};
	while(tk != null) {
		switch(tk.type) {
		case "comment.doc.line":
			var val = tk.value;
			if(parsers_GmlExtArgsDoc.rxAfter.test(val)) {
				lastRow = iter.getCurrentTokenPosition().row;
			} else {
				var mt = parsers_GmlExtArgsDoc.rxArg.exec(val);
				if(mt != null) {
					meta = mt[2];
					var text1 = mt[4];
					var index = names.indexOf(mt[3]);
					var row1 = iter.getCurrentTokenPosition().row - delOffset;
					if(index >= 0) {
						rows[index] = row1;
						if(text1 != texts[index] && (text1 == "" || StringTools.startsWith(text1,"= "))) {
							replace.push({ range : iter.getCurrentTokenRange(), next : mt[1] + texts[index]});
						}
					} else {
						remove.push(ace_extern__$AceRange_AceRange_$Impl_$._new(0,row1,0,row1 + 1));
						++delOffset;
					}
				}
			}
			break;
		case "preproc.args":
			hasArgs = true;
			break;
		case "preproc.define":
			tk = iter.stepForward();
			if(tk != null) {
				flush();
				lastRow = iter.getCurrentTokenPosition().row + addOffset;
				curr = argData[tk.value];
				names = curr.names;
				texts = curr.texts;
				count = names.length;
				rows.length = 0;
				rows.length = count;
				hasArgs = false;
			}
			break;
		}
		tk = iter.stepForward();
	}
	flush();
	var _g2 = 0;
	while(_g2 < replace.length) {
		var repl = replace[_g2];
		++_g2;
		aceDoc.replace(repl.range,repl.next);
	}
	var _g11 = 0;
	while(_g11 < remove.length) aceDoc.remove(remove[_g11++]);
	var _g21 = 0;
	while(_g21 < insert.length) {
		var q = insert[_g21];
		++_g21;
		aceDoc.insertMergedLines({ row : q.row, column : 0},[q.text,""]);
	}
	if(!(replace.length > 0 || remove.length > 0)) {
		return insert.length > 0;
	} else {
		return true;
	}
};
parsers_GmlExtArgsDoc.proc = function(file) {
	if(gml_Project.current.version == 2) {
		return parsers_GmlExtArgsDoc.proc2(file,ui_Preferences.current.argsFormat);
	} else {
		return parsers_GmlExtArgsDoc.proc1(file);
	}
};
var parsers_GmlExtCoroutines = function() { };
$hxClasses["parsers.GmlExtCoroutines"] = parsers_GmlExtCoroutines;
parsers_GmlExtCoroutines.__name__ = "parsers.GmlExtCoroutines";
parsers_GmlExtCoroutines.pre = function(gml1) {
	if(!ui_Preferences.current.coroutineMagic) {
		return gml1;
	}
	var pos0 = gml1.indexOf("/*//!#gmcr");
	if(pos0 < 0) {
		return gml1;
	}
	var pos1 = gml1.indexOf("//!#gmcr*/");
	if(pos1 < 0) {
		pos1 = gml1.length;
	}
	pos0 += "/*//!#gmcr".length;
	if(gml1.charCodeAt(pos0) == 13) {
		++pos0;
	}
	if(gml1.charCodeAt(pos0) == 10) {
		++pos0;
	}
	if(gml1.charCodeAt(pos1 - 1) == 10) {
		--pos1;
	}
	if(gml1.charCodeAt(pos1 - 1) == 13) {
		--pos1;
	}
	gml1 = gml1.substring(pos0,pos1);
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(gml1);
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				while(q.get_loop()) {
					c = q.source.charCodeAt(q.pos++);
					if(c == 42 && q.source.charCodeAt(q.pos) == 92 && q.source.charCodeAt(q.pos + 1) == 47) {
						out += q.source.substring(start,q.pos);
						start = ++q.pos;
						q.pos += 1;
						break;
					}
				}
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
parsers_GmlExtCoroutines.post = function(code) {
	if(!ui_Preferences.current.coroutineMagic) {
		return code;
	}
	if(!parsers_GmlExtCoroutines.markRx.test(code)) {
		return code;
	}
	var found = false;
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if((p == 0 || q.source.charCodeAt(p - 1) == 10) && HxOverrides.substr(q.source,p,5) == "#gmcr") {
				found = true;
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				while(q.get_loop()) {
					c = q.source.charCodeAt(q.pos++);
					if(c == 42 && q.source.charCodeAt(q.pos) == 47) {
						out += q.source.substring(start,q.pos);
						out += "\\";
						start = q.pos;
						break;
					}
				}
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	if(!found) {
		return code;
	}
	out += q.source.substring(start,q.pos);
	var proc = window.gmcr_proc;
	if(proc == null) {
		parsers_GmlExtCoroutines.errorText = "GMCR is not available. Did you copy it from pre-built binary or it's itch.io download?";
		return null;
	}
	var pair = proc(out,{ version : version});
	if(pair.code == null) {
		parsers_GmlExtCoroutines.errorText = "Coroutine compilation failed:\n" + pair.error;
		return null;
	}
	return pair.code + "\r\n" + "/*//!#gmcr" + "\r\n" + out + "\r\n" + "//!#gmcr*/" + "\r\n";
};
var parsers_GmlExtHyper = function() { };
$hxClasses["parsers.GmlExtHyper"] = parsers_GmlExtHyper;
parsers_GmlExtHyper.__name__ = "parsers.GmlExtHyper";
parsers_GmlExtHyper.pre = function(code) {
	if(!ui_Preferences.current.hyperMagic) {
		return code;
	}
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				if(q.source.charCodeAt(p + 2) == 33 && q.source.charCodeAt(p + 3) == 35 && HxOverrides.substr(q.source,p + 4,5) == "hyper") {
					out += q.source.substring(start,p);
					out += q.source.substring(p + 3,q.pos);
					start = q.pos;
				}
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
parsers_GmlExtHyper.post = function(code) {
	if(!ui_Preferences.current.hyperMagic) {
		return code;
	}
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(HxOverrides.substr(q.source,p + 1,5) == "hyper") {
				q.skipLine();
				out += q.source.substring(start,p);
				out += "//!" + q.source.substring(p,q.pos);
				start = q.pos;
			} else if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
var parsers_GmlExtImport = function() { };
$hxClasses["parsers.GmlExtImport"] = parsers_GmlExtImport;
parsers_GmlExtImport.__name__ = "parsers.GmlExtImport";
parsers_GmlExtImport.parseRules = function(imp,mt,out) {
	var path = mt[1];
	var alias = mt[2];
	var nsOnly = mt[3] == ":";
	var flat;
	var flen;
	var short;
	var check;
	var errors = "";
	var add_cache;
	if(path == "_") {
		if(alias != null) {
			imp.ensureNamespace(alias);
			if(out != null) {
				out.push(parsers__$GmlExtImport_GmlExtImportRule.EnsureNS(alias));
			}
		}
	} else if(path.endsWith("*")) {
		flat = path.substring(0,path.length - 1).replace(parsers_GmlExtImport.rxPeriod,"_");
		flen = flat.length;
		var check1 = function(kind,comp,docs) {
			var q = kind;
			var fd = null;
			var has = Object.prototype.hasOwnProperty;
			for (fd in q) {
			if(has.call(q,fd)) {
				var fd1 = fd;
				if(fd1.startsWith(flat) && fd1 != flat) {
					var comps = comp.filter(function(comp1) {
						return comp1.name == fd1;
					});
					short = fd1.substring(flen);
					var kind1 = kind[fd1];
					var comp2 = comps[0];
					var doc = docs[fd1];
					if(out != null) {
						add_cache = { };
						out.push(parsers__$GmlExtImport_GmlExtImportRule.Import(fd1,short,kind1,comp2,doc,alias,nsOnly,add_cache));
					} else {
						add_cache = null;
					}
					imp.add(fd1,short,kind1,comp2,doc,alias,nsOnly,add_cache);
				}
			}
			}
		};
		check1(gml_GmlAPI.stdKind,gml_GmlAPI.stdComp,gml_GmlAPI.stdDoc);
		check1(gml_GmlAPI.extKind,gml_GmlAPI.extComp,gml_GmlAPI.extDoc);
		check1(gml_GmlAPI.gmlKind,gml_GmlAPI.gmlComp,gml_GmlAPI.gmlDoc);
	} else if(path.startsWith("global.")) {
		flat = path.substring(7);
		var ns = null;
		if(alias == null) {
			alias = flat;
		} else if(mt[3] != null) {
			ns = alias;
			alias = mt[3];
		}
		var comp3 = { name : path, value : path, score : 0, meta : "global", doc : null};
		if(out != null) {
			add_cache = { };
			out.push(parsers__$GmlExtImport_GmlExtImportRule.Import(path,alias,"globalfield",comp3,null,ns,null,add_cache));
		} else {
			add_cache = null;
		}
		imp.add(path,alias,"globalfield",comp3,null,ns,null,add_cache);
	} else {
		flat = path.replace(parsers_GmlExtImport.rxPeriod,"_");
		var ns1 = null;
		if(alias == null) {
			var p = path.lastIndexOf(".");
			if(p < 0) {
				return;
			}
			alias = flat.substring(p + 1);
		} else if(mt[4] != null) {
			ns1 = alias;
			alias = mt[4];
		}
		var check2 = function(kind2,comp4,docs1) {
			var fdk = kind2[flat];
			if(fdk == null) {
				return false;
			}
			var comp5 = comp4.filter(function(comp6) {
				return comp6.name == flat;
			})[0];
			var doc1 = docs1[flat];
			if(out != null) {
				add_cache = { };
				out.push(parsers__$GmlExtImport_GmlExtImportRule.Import(flat,alias,fdk,comp5,doc1,ns1,nsOnly,add_cache));
			} else {
				add_cache = null;
			}
			imp.add(flat,alias,fdk,comp5,doc1,ns1,nsOnly,add_cache);
			return true;
		};
		if(!check2(gml_GmlAPI.stdKind,gml_GmlAPI.stdComp,gml_GmlAPI.stdDoc) && !check2(gml_GmlAPI.extKind,gml_GmlAPI.extComp,gml_GmlAPI.extDoc) && !check2(gml_GmlAPI.gmlKind,gml_GmlAPI.gmlComp,gml_GmlAPI.gmlDoc)) {
			errors += "Couldn't find " + flat + "\n";
		}
	}
};
parsers_GmlExtImport.parseFile = function(imp,rel,found,cache) {
	var fp = haxe_io_Path.withoutExtension(rel.toLowerCase());
	if(found[fp]) {
		return true;
	}
	var rules;
	if(cache != null) {
		rules = cache[rel];
		if(rules != null) {
			var _g = 0;
			while(_g < rules.length) {
				var rule = rules[_g];
				++_g;
				switch(rule._hx_index) {
				case 0:
					imp.ensureNamespace(rule.name);
					break;
				case 1:
					imp.add(rule.long,rule.short,rule.kind,rule.comp,rule.doc,rule.space,rule.spaceOnly,rule.cache);
					break;
				}
			}
			return true;
		} else {
			rules = [];
			cache[rel] = rules;
		}
	} else {
		rules = null;
	}
	var full = haxe_io_Path.join([gml_Project.current.dir,"#import",rel]);
	if(!electron_FileWrap.existsSync(full)) {
		full += ".gml";
		if(!electron_FileWrap.existsSync(full)) {
			return false;
		}
	}
	var code = electron_FileWrap.readTextFileSync(full);
	found[fp] = true;
	var q = new parsers_GmlReader(code);
	var version = gml_GmlAPI.version;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				if(q.source.charCodeAt(p + 2) == 33 && q.source.charCodeAt(p + 3) == 35 && HxOverrides.substr(q.source,p + 4,6) == "import") {
					parsers_GmlExtImport.parseLine(imp,q.source.substring(p + 3,q.pos),found,cache,rules);
				}
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	return true;
};
parsers_GmlExtImport.parseLine = function(imp,txt,found,cache,rules) {
	var mt = parsers_GmlExtImport.rxImport.exec(txt);
	if(mt != null) {
		parsers_GmlExtImport.parseRules(imp,mt,rules);
		return true;
	}
	mt = parsers_GmlExtImport.rxImportFile.exec(txt);
	if(mt != null) {
		var rel = mt[1];
		parsers_GmlExtImport.parseFile(imp,rel.substring(1,rel.length - 1),found,cache);
		return true;
	}
	return false;
};
parsers_GmlExtImport.pre_mapIdent_local = function(q,imp,ident,t,p0) {
	var ns = imp.namespaces[t];
	var e;
	if(ns == null) {
		e = gml_GmlAPI.gmlEnums[t];
		if(e == null) {
			return null;
		}
	} else {
		e = null;
	}
	q.skipSpaces0();
	if(q.source.charCodeAt(q.pos++) != 91) {
		return null;
	}
	var acc = q.source.charCodeAt(q.pos) == 64;
	if(acc) {
		q.pos += 1;
	}
	q.skipSpaces0();
	var posIndexStart = q.pos;
	q.skipIdent1();
	var index1 = q.source.substring(posIndexStart,q.pos);
	var indexField;
	if(ns != null) {
		indexField = ns.shorten[index1];
		if(indexField == null) {
			if(q.source.charCodeAt(q.pos++) != 46) {
				return null;
			}
			q.skipIdent1();
			indexField = ns.shorten[q.source.substring(posIndexStart,q.pos)];
			if(indexField == null) {
				return null;
			}
		}
	} else {
		if(index1 != t) {
			return null;
		}
		if(q.source.charCodeAt(q.pos++) != 46) {
			return null;
		}
		var indexDot = q.pos;
		q.skipIdent1();
		indexField = q.source.substring(indexDot,q.pos);
		if(!Object.prototype.hasOwnProperty.call(e.items,indexField)) {
			return null;
		}
	}
	if(q.source.charCodeAt(q.pos++) != 93) {
		return null;
	}
	if(acc != q.checkWrites(p0,q.pos)) {
		return null;
	}
	return ident + "." + indexField;
};
parsers_GmlExtImport.pre_mapIdent = function(imp,q,ident,p0) {
	var next = null;
	var t = imp.localTypes[ident];
	var p1 = q.pos;
	if(t != null) {
		next = parsers_GmlExtImport.pre_mapIdent_local(q,imp,ident,t,p0);
		if(next == null) {
			q.pos = p1;
		}
	} else if(ident != "global") {
		next = imp.shorten[ident];
		while(true) {
			q.skipSpaces1();
			if(q.source.charCodeAt(q.pos++) != 40) {
				break;
			}
			if(next != null && next.endsWith(".create")) {
				return "new " + next.substring(0,next.length - 7) + "(";
			}
			q.skipSpaces1();
			var this1 = q.source.charCodeAt(q.pos);
			if(!(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90)) {
				break;
			}
			var selfPos = q.pos;
			q.skipIdent1();
			if(q.source.charCodeAt(q.pos) == 91) {
				break;
			}
			var self = q.source.substring(selfPos,q.pos);
			var selfType = imp.localTypes[self];
			if(selfType == null) {
				if(ident != "array_create") {
					break;
				}
				var selfEnumName = self;
				var selfEnum = gml_GmlAPI.gmlEnums[self];
				if(selfEnum == null) {
					selfEnumName = imp.shorten[self];
					selfEnum = gml_GmlAPI.gmlEnums[selfEnumName];
				}
				if(selfEnum == null) {
					break;
				}
				if(q.source.charCodeAt(q.pos++) != 46) {
					break;
				}
				var selfDot = q.pos;
				q.skipIdent1();
				if(q.source.substring(selfDot,q.pos) != selfEnum.lastItem) {
					break;
				}
				q.skipSpaces1();
				if(q.source.charCodeAt(q.pos++) != 41) {
					break;
				}
				return selfEnumName + "()";
			}
			var selfNs = imp.namespaces[selfType];
			if(selfNs == null) {
				break;
			}
			var selfFunc = selfNs.shorten[ident];
			if(selfFunc == null) {
				break;
			}
			var selfEnd = q.pos;
			q.skipSpaces1();
			if(q.source.charCodeAt(q.pos++) == 44) {
				q.skipSpaces1();
			} else {
				q.pos = selfEnd;
			}
			return self + "." + selfFunc + "(";
		}
		q.pos = p1;
	} else if(imp.hasGlobal) {
		q.skipSpaces0();
		if(q.source.charCodeAt(q.pos) == 46) {
			q.pos += 1;
			q.skipSpaces0();
			p1 = q.pos;
			q.skipIdent1();
			next = imp.shortenGlobal[q.source.substring(p1,q.pos)];
		}
	}
	return next;
};
parsers_GmlExtImport.pre = function(code,path) {
	var seekData = parsers_GmlSeekData.map[path];
	if(!ui_Preferences.current.importMagic) {
		if(seekData != null) {
			seekData.imports = null;
		}
		return code;
	}
	var globalExists = electron_FileWrap.existsSync(haxe_io_Path.join([gml_Project.current.dir,"#import","global.gml"]));
	if(code.indexOf("//!#import") < 0 && !parsers_GmlExtImport.rxHasType.test(code) && !globalExists) {
		if(seekData != null) {
			seekData.imports = null;
		}
		return code;
	}
	var cache = parsers_GmlExtImport.pre_needsCache.test(code) ? Object.create(null) : null;
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	var imp = new gml_GmlImports();
	var imps = Object.create(null);
	var files = Object.create(null);
	if(globalExists) {
		parsers_GmlExtImport.parseFile(imp,"global.gml",files,cache);
	}
	imps[""] = imp;
	while(q.get_loop()) {
		var p = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				var ctx = q.readContextName(null);
				if(ctx != null) {
					imp = new gml_GmlImports();
					imps[ctx] = imp;
					files = Object.create(null);
					if(globalExists) {
						parsers_GmlExtImport.parseFile(imp,"global.gml",files,cache);
					}
				} else {
					q.pos = p + 1;
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				if(q.source.charCodeAt(p + 2) == 33 && q.source.charCodeAt(p + 3) == 35 && HxOverrides.substr(q.source,p + 4,6) == "import") {
					var txt = q.source.substring(p + 3,q.pos);
					if(parsers_GmlExtImport.parseLine(imp,txt,files,cache,null)) {
						out += q.source.substring(start,p);
						out += txt;
						start = q.pos;
					}
				}
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				var p1 = q.pos;
				var ident = q.source.substring(p,p1);
				var next = null;
				if(ident == "var" || ident == "args" && q.source.charCodeAt(p - 1) == 35) {
					var isVar = ident == "var";
					next = isVar ? imp.shorten[ident] : null;
					if(next != null) {
						out += q.source.substring(start,p);
						out += next;
						start = q.pos;
						next = null;
					}
					q.skipVars(function(d) {
						var p2 = q.pos;
						out += q.source.substring(start,d.type0);
						if(d.type != null) {
							imp.localTypes[d.name] = d.type;
							out += ":" + d.type;
						}
						out += q.source.substring(d.type1,d.expr0);
						q.pos = d.expr0;
						start = q.pos;
						while(q.pos < d.expr1) {
							var p0 = q.pos;
							var c1 = q.source.charCodeAt(q.pos++);
							switch(c1) {
							case 47:
								switch(q.source.charCodeAt(q.pos)) {
								case 42:
									q.pos += 1;
									q.skipComment();
									break;
								case 47:
									q.skipLine();
									break;
								default:
								}
								break;
							case 34:case 39:case 64:case 96:
								q.skipStringAuto(c1,version);
								break;
							default:
								if(c1 == 95 || c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90) {
									q.skipIdent1();
									var idn = parsers_GmlExtImport.pre_mapIdent(imp,q,q.source.substring(p0,q.pos),p0);
									if(idn != null) {
										out += q.source.substring(start,p0);
										out += idn;
										start = q.pos;
									}
								}
							}
						}
						q.pos = p2;
					},version,!isVar);
				} else {
					next = parsers_GmlExtImport.pre_mapIdent(imp,q,ident,p1);
				}
				if(next != null) {
					out += q.source.substring(start,p);
					out += next;
					start = q.pos;
				}
			}
		}
	}
	out += q.source.substring(start,q.pos);
	if(seekData == null && version == -1) {
		seekData = new parsers_GmlSeekData();
		parsers_GmlSeekData.map[path] = seekData;
	}
	if(seekData != null) {
		seekData.imports = imps;
	}
	return out;
};
parsers_GmlExtImport.post_procIdent = function(q,imp,p0,dot,full) {
	var p1 = q.pos;
	var one = dot != -1 ? q.source.substring(p0,dot) : null;
	if(full == "new") {
		q.skipSpaces1_local();
		var typePos = q.pos;
		if(tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos++))) {
			q.skipIdent1();
			one = q.source.substring(typePos,q.pos);
			full = one + ".create";
			dot = q.pos;
			p1 = q.pos;
		} else {
			q.pos = p1;
		}
	}
	var type = dot != -1 ? imp.localTypes[one] : null;
	if(type != null) {
		var ns = imp.namespaces[type];
		var en;
		var ind = null;
		var fd = q.source.substring(dot + 1,p1);
		if(ns != null) {
			ind = ns.longen[fd];
			en = null;
		} else {
			en = gml_GmlAPI.gmlEnums[type];
			if(en != null && Object.prototype.hasOwnProperty.call(en.items,fd)) {
				ind = type + "." + fd;
			}
		}
		if(ind != null) {
			q.skipSpaces1_local();
			if(q.source.charCodeAt(q.pos++) == 40) {
				var argPos = q.pos;
				q.skipSpaces0();
				var argPre = q.source.charCodeAt(q.pos) != 41 ? ", " : "";
				q.pos = argPos;
				parsers_GmlExtImport.post_procIdent_p1 = argPos;
				return ind + "(" + one + argPre;
			} else {
				q.pos = p1;
			}
			parsers_GmlExtImport.post_procIdent_p1 = p1;
			return one + (q.checkWrites(p0,p1) ? "[@" : "[") + ind + "]";
		} else if(en != null || ns != null && ns.isStruct) {
			if(parsers_GmlExtImport.errorText != "") {
				parsers_GmlExtImport.errorText += "\n";
			}
			var tmp = parsers_GmlExtImport.errorText;
			var this1 = q.getPos(dot + 1);
			parsers_GmlExtImport.errorText = tmp + ("[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]" + (" Could not find field " + fd + " in ") + (ns != null ? "namespace" : en != null ? "enum" : "unknown type") + " " + type + ".");
			return null;
		}
	}
	var id = imp.longen[full];
	var en1 = dot == -1 ? gml_GmlAPI.gmlEnums[(id || full)] : null;
	if(en1 != null) {
		while(true) {
			var ep = q.pos;
			q.skipSpaces1();
			if(q.source.charCodeAt(q.pos) != 40) {
				q.pos = ep;
				break;
			} else {
				q.pos += 1;
			}
			q.skipSpaces1();
			if(q.source.charCodeAt(q.pos) != 41) {
				q.pos = ep;
				break;
			} else {
				q.pos += 1;
			}
			parsers_GmlExtImport.post_procIdent_p1 = q.pos;
			return "array_create(" + en1.name + "." + en1.lastItem + ")";
		}
	}
	if(id != null) {
		parsers_GmlExtImport.post_procIdent_p1 = p1;
		return id;
	}
	if(one != null) {
		id = imp.longen[one];
		if(id != null) {
			parsers_GmlExtImport.post_procIdent_p1 = dot;
			return id;
		}
	}
	return null;
};
parsers_GmlExtImport.post = function(code,path) {
	parsers_GmlExtImport.errorText = "";
	if(!ui_Preferences.current.importMagic) {
		parsers_GmlExtImport.post_numImports = 0;
		return code;
	}
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	var data = parsers_GmlSeekData.map[path];
	var imps = data != null ? data.imports : null;
	var imp = imps != null ? imps[""] : null;
	var impc = 0;
	while(q.get_loop()) {
		var p = q.pos;
		var c = [q.source.charCodeAt(q.pos++)];
		switch(c[0]) {
		case 35:
			if(HxOverrides.substr(q.source,p + 1,6) == "import") {
				q.skipLine();
				var txt = q.source.substring(p,q.pos);
				if(parsers_GmlExtImport.rxImport.test(txt) || parsers_GmlExtImport.rxImportFile.test(txt)) {
					out += q.source.substring(start,p);
					out += "//!" + txt;
					start = q.pos;
					++impc;
				}
			} else if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
				var ctx = q.readContextName(null);
				if(ctx != null) {
					imp = imps != null ? imps[ctx] : null;
				} else {
					q.pos = p + 1;
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				if(q.source.charCodeAt(p + 2) == 33 && q.source.charCodeAt(p + 3) == 35 && HxOverrides.substr(q.source,p + 4,6) == "import") {
					out += q.source.substring(start,p + 3);
					out += " ";
					start = p + 3;
				}
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c[0],version);
			break;
		default:
			if((c[0] == 95 || c[0] >= 97 && c[0] <= 122 || c[0] >= 65 && c[0] <= 90) && imp != null) {
				var dotStart = [];
				var dotPos = [];
				var dotFull = [];
				var procIdent_next = [];
				q.pos -= 1;
				dotStart[0] = q.pos;
				dotPos[0] = -1;
				while(q.get_loop()) {
					var tmp = q.source.charCodeAt(q.pos);
					c[0] = tmp;
					if(c[0] == 95 || c[0] >= 97 && c[0] <= 122 || c[0] >= 65 && c[0] <= 90 || c[0] >= 48 && c[0] <= 57) {
						q.pos += 1;
					} else if(c[0] == 46) {
						if(dotPos[0] == -1) {
							dotPos[0] = q.pos;
							q.pos += 1;
						} else {
							break;
						}
					} else {
						break;
					}
				}
				dotFull[0] = q.source.substring(dotStart[0],q.pos);
				if(dotFull[0] == "var" || dotFull[0] == "args" && q.source.charCodeAt(p - 1) == 35) {
					var isVar = [dotFull[0] == "var"];
					procIdent_next[0] = isVar[0] ? imp.longen["var"] : null;
					if(procIdent_next[0] != null) {
						out += q.source.substring(start,p);
						out += procIdent_next[0];
						start = q.pos;
					}
					var tmp1 = (function(isVar1,procIdent_next1,dotFull1,dotPos1,dotStart1,c1) {
						return function(d) {
							var p1 = q.pos;
							out += q.source.substring(start,d.type0);
							if(d.type != null) {
								out += isVar1[0] ? "/*:" + d.type + "*/" : ":" + d.type;
							}
							out += q.source.substring(d.type1,d.expr0);
							q.pos = d.expr0;
							start = q.pos;
							while(q.pos < d.expr1) {
								var c2 = q.source.charCodeAt(q.pos++);
								switch(c2) {
								case 47:
									switch(q.source.charCodeAt(q.pos)) {
									case 42:
										q.pos += 1;
										q.skipComment();
										break;
									case 47:
										q.skipLine();
										break;
									default:
									}
									break;
								case 34:case 39:case 64:case 96:
									q.skipStringAuto(c2,version);
									break;
								default:
									if(c2 == 95 || c2 >= 97 && c2 <= 122 || c2 >= 65 && c2 <= 90) {
										q.pos -= 1;
										dotStart1[0] = q.pos;
										dotPos1[0] = -1;
										while(q.get_loop()) {
											var tmp2 = q.source.charCodeAt(q.pos);
											c1[0] = tmp2;
											if(c1[0] == 95 || c1[0] >= 97 && c1[0] <= 122 || c1[0] >= 65 && c1[0] <= 90 || c1[0] >= 48 && c1[0] <= 57) {
												q.pos += 1;
											} else if(c1[0] == 46) {
												if(dotPos1[0] == -1) {
													dotPos1[0] = q.pos;
													q.pos += 1;
												} else {
													break;
												}
											} else {
												break;
											}
										}
										dotFull1[0] = q.source.substring(dotStart1[0],q.pos);
										var tmp3 = parsers_GmlExtImport.post_procIdent(q,imp,dotStart1[0],dotPos1[0],dotFull1[0]);
										procIdent_next1[0] = tmp3;
										if(procIdent_next1[0] != null) {
											out += q.source.substring(start,dotStart1[0]);
											out += procIdent_next1[0];
											start = parsers_GmlExtImport.post_procIdent_p1;
										}
									}
								}
							}
							q.pos = p1;
						};
					})(isVar,procIdent_next,dotFull,dotPos,dotStart,c);
					q.skipVars(tmp1,version,!isVar[0]);
				} else {
					var tmp4 = parsers_GmlExtImport.post_procIdent(q,imp,dotStart[0],dotPos[0],dotFull[0]);
					procIdent_next[0] = tmp4;
					if(procIdent_next[0] != null) {
						out += q.source.substring(start,dotStart[0]);
						out += procIdent_next[0];
						start = parsers_GmlExtImport.post_procIdent_p1;
					}
				}
				if(parsers_GmlExtImport.errorText != "") {
					return null;
				}
			}
		}
	}
	parsers_GmlExtImport.post_numImports = impc;
	out += q.source.substring(start,q.pos);
	return out;
};
var parsers__$GmlExtImport_GmlExtImportRule = $hxEnums["parsers._GmlExtImport.GmlExtImportRule"] = { __ename__ : true, __constructs__ : ["EnsureNS","Import"]
	,EnsureNS: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"parsers._GmlExtImport.GmlExtImportRule",toString:$estr}; },$_.__params__ = ["name"],$_)
	,Import: ($_=function(long,short,kind,comp,doc,space,spaceOnly,cache) { return {_hx_index:1,long:long,short:short,kind:kind,comp:comp,doc:doc,space:space,spaceOnly:spaceOnly,cache:cache,__enum__:"parsers._GmlExtImport.GmlExtImportRule",toString:$estr}; },$_.__params__ = ["long","short","kind","comp","doc","space","spaceOnly","cache"],$_)
};
var parsers_GmlSeekData = function() {
	this.hasGMLive = false;
	this.hasCoroutines = false;
	this.imports = null;
	this.docMap = Object.create(null);
	this.docList = [];
	this.compMap = Object.create(null);
	this.compList = [];
	this.kindMap = Object.create(null);
	this.kindList = [];
	this.locals = Object.create(null);
	this.mfuncMap = Object.create(null);
	this.mfuncList = [];
	this.macroMap = Object.create(null);
	this.macroList = [];
	this.instFieldComp = [];
	this.instFieldList = [];
	this.instFieldMap = Object.create(null);
	this.globalFullComp = [];
	this.globalFullMap = Object.create(null);
	this.globalFieldComp = [];
	this.globalFieldMap = Object.create(null);
	this.globalFieldList = [];
	this.globalVarMap = Object.create(null);
	this.globalVarList = [];
	this.enumMap = Object.create(null);
	this.enumList = [];
};
$hxClasses["parsers.GmlSeekData"] = parsers_GmlSeekData;
parsers_GmlSeekData.__name__ = "parsers.GmlSeekData";
parsers_GmlSeekData.add = function(path) {
	if(Object.prototype.hasOwnProperty.call(parsers_GmlSeekData.map,path)) {
		return;
	}
	var next = new parsers_GmlSeekData();
	parsers_GmlSeekData.map[path] = next;
	parsers_GmlSeekData.apply(path,null,next);
};
parsers_GmlSeekData.remove = function(path) {
	var curr = parsers_GmlSeekData.map[path];
	if(curr != null) {
		parsers_GmlSeekData.apply(path,curr,null);
		var this1 = parsers_GmlSeekData.map;
		delete this1[path];
	}
};
parsers_GmlSeekData.rename = function(pathOld,pathNew) {
	var curr = parsers_GmlSeekData.map[pathOld];
	if(curr != null) {
		var this1 = parsers_GmlSeekData.map;
		delete this1[pathOld];
		parsers_GmlSeekData.map[pathNew] = curr;
	}
};
parsers_GmlSeekData.apply = function(path,prev,next) {
	if(prev == null) {
		prev = parsers_GmlSeekData.blank;
	}
	if(next == null) {
		next = parsers_GmlSeekData.blank;
	}
	if(next.imports == null) {
		next.imports = prev.imports;
	}
	if(gml_GmlAPI.version == -1) {
		return;
	}
	var _g = 0;
	var _g1 = prev.docList;
	while(_g < _g1.length) {
		var d = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(next.docMap,d.name)) {
			var this1 = gml_GmlAPI.gmlDoc;
			var k = d.name;
			delete this1[k];
		}
	}
	var _g2 = 0;
	var _g3 = next.docList;
	while(_g2 < _g3.length) {
		var d1 = _g3[_g2];
		++_g2;
		gml_GmlAPI.gmlDoc[d1.name] = d1;
	}
	var _g4 = 0;
	var _g5 = prev.kindList;
	while(_g4 < _g5.length) {
		var k1 = _g5[_g4];
		++_g4;
		if(!Object.prototype.hasOwnProperty.call(next.kindMap,k1)) {
			var this2 = gml_GmlAPI.gmlKind;
			delete this2[k1];
		}
	}
	var _g6 = 0;
	var _g7 = next.kindList;
	while(_g6 < _g7.length) {
		var k2 = _g7[_g6];
		++_g6;
		gml_GmlAPI.gmlKind[k2] = next.kindMap[k2];
	}
	var _g8 = 0;
	var _g9 = prev.compList;
	while(_g8 < _g9.length) HxOverrides.remove(gml_GmlAPI.gmlComp,_g9[_g8++]);
	var _g10 = 0;
	var _g11 = next.compList;
	while(_g10 < _g11.length) gml_GmlAPI.gmlComp.push(_g11[_g10++]);
	var _g12 = 0;
	var _g13 = prev.enumList;
	while(_g12 < _g13.length) {
		var e = _g13[_g12];
		++_g12;
		var _g121 = 0;
		var _g131 = e.compList;
		while(_g121 < _g131.length) HxOverrides.remove(gml_GmlAPI.gmlComp,_g131[_g121++]);
		var this3 = gml_GmlAPI.gmlKind;
		var k3 = e.name;
		delete this3[k3];
		var this4 = gml_GmlAPI.gmlEnums;
		var k4 = e.name;
		delete this4[k4];
		HxOverrides.remove(gml_GmlAPI.gmlEnumTypeComp,e.typeComp);
	}
	var _g14 = 0;
	var _g15 = next.enumList;
	while(_g14 < _g15.length) {
		var e1 = _g15[_g14];
		++_g14;
		var _g141 = 0;
		var _g151 = e1.compList;
		while(_g141 < _g151.length) gml_GmlAPI.gmlComp.push(_g151[_g141++]);
		gml_GmlAPI.gmlEnums[e1.name] = e1;
		gml_GmlAPI.gmlKind[e1.name] = "enum";
		gml_GmlAPI.gmlEnumTypeComp.push(e1.typeComp);
	}
	var _g16 = 0;
	var _g17 = prev.macroList;
	while(_g16 < _g17.length) {
		var m = _g17[_g16];
		++_g16;
		if(!Object.prototype.hasOwnProperty.call(next.macroMap,m.name)) {
			var this5 = gml_GmlAPI.gmlMacros;
			var k5 = m.name;
			delete this5[k5];
		}
	}
	var _g18 = 0;
	var _g19 = next.macroList;
	while(_g18 < _g19.length) {
		var m1 = _g19[_g18];
		++_g18;
		gml_GmlAPI.gmlMacros[m1.name] = m1;
	}
	var _g20 = 0;
	var _g21 = prev.mfuncList;
	while(_g20 < _g21.length) {
		var m2 = _g21[_g20];
		++_g20;
		if(!Object.prototype.hasOwnProperty.call(next.mfuncMap,m2.name)) {
			var this6 = gml_GmlAPI.gmlMFuncs;
			var k6 = m2.name;
			delete this6[k6];
		}
	}
	var _g22 = 0;
	var _g23 = next.mfuncList;
	while(_g22 < _g23.length) {
		var m3 = _g23[_g22];
		++_g22;
		gml_GmlAPI.gmlMFuncs[m3.name] = m3;
	}
	var _g24 = 0;
	var _g25 = prev.globalFieldList;
	while(_g24 < _g25.length) {
		var g = _g25[_g24];
		++_g24;
		if(next.globalFieldMap[g.name] == g) {
			continue;
		}
		if(--g.refs <= 0) {
			var this7 = gml_GmlAPI.gmlGlobalFieldMap;
			var k7 = g.name;
			delete this7[k7];
			HxOverrides.remove(gml_GmlAPI.gmlGlobalFieldComp,g.comp);
			var this8 = gml_GmlAPI.gmlGlobalFullMap;
			var k8 = g.name;
			delete this8[k8];
			HxOverrides.remove(gml_GmlAPI.gmlGlobalFullComp,g.fullComp);
		}
	}
	var _g26 = 0;
	var _g27 = next.globalFieldList;
	while(_g26 < _g27.length) {
		var g1 = _g27[_g26];
		++_g26;
		if(prev.globalFieldMap[g1.name] == g1) {
			continue;
		}
		if(++g1.refs == 1) {
			gml_GmlAPI.gmlGlobalFieldMap[g1.name] = g1;
			gml_GmlAPI.gmlGlobalFieldComp.push(g1.comp);
			gml_GmlAPI.gmlGlobalFullMap[g1.name] = g1;
			gml_GmlAPI.gmlGlobalFullComp.push(g1.fullComp);
		}
	}
	var _g28 = 0;
	var _g29 = prev.instFieldList;
	while(_g28 < _g29.length) {
		var fd = _g29[_g28];
		++_g28;
		if(next.instFieldMap[fd.name] == fd) {
			continue;
		}
		if(--fd.refs <= 0) {
			var this9 = gml_GmlAPI.gmlInstFieldMap;
			var k9 = fd.name;
			delete this9[k9];
			HxOverrides.remove(gml_GmlAPI.gmlInstFieldComp,fd.comp);
		}
	}
	var _g30 = 0;
	var _g31 = next.instFieldList;
	while(_g30 < _g31.length) {
		var fd1 = _g31[_g30];
		++_g30;
		if(prev.instFieldMap[fd1.name] == fd1) {
			continue;
		}
		if(++fd1.refs == 1) {
			gml_GmlAPI.gmlInstFieldMap[fd1.name] = fd1;
			gml_GmlAPI.gmlInstFieldComp.push(fd1.comp);
		}
	}
	if(prev.hasGMLive || next.hasGMLive) {
		ui_GMLive.update(path,next.hasGMLive);
	}
	var file = gml_file_GmlFile.current;
	if(file != null && file.path == path) {
		var update = false;
		if(prev.hasCoroutines != next.hasCoroutines) {
			var enable = next.hasCoroutines;
			parsers_GmlExtCoroutines.enabled = enable;
			parsers_GmlExtCoroutines.keywordMap = enable ? parsers_GmlExtCoroutines.keywordMap1 : parsers_GmlExtCoroutines.keywordMap0;
			update = true;
		}
		if(update) {
			Main.aceEditor.getSession().bgTokenizer.start(0);
		}
	}
};
parsers_GmlSeekData.prototype = {
	__class__: parsers_GmlSeekData
};
var parsers_GmlExtLambda = function() {
	this.remap = Object.create(null);
	this.docs = Object.create(null);
	this.kind = Object.create(null);
	this.comp = [];
};
$hxClasses["parsers.GmlExtLambda"] = parsers_GmlExtLambda;
parsers_GmlExtLambda.__name__ = "parsers.GmlExtLambda";
parsers_GmlExtLambda.rxExtScript = function(name) {
	if(gml_Project.current.properties.lambdaMode == 1) {
		name = name.replace(parsers_GmlExtLambda.rxlfPrefix,"__lc_");
	}
	return new RegExp("((?:^|\n)#define " + name + "\r?\n)([\\s\\S]*?)($|\r?\n#define)");
};
parsers_GmlExtLambda.preImpl = function(code,data) {
	var project = data.project;
	var lambdaMap = project.lambdaMap;
	var version = data.version;
	var list = data.list;
	var map = data.map;
	var scope = data.scope;
	var q = new parsers_GmlReader(code);
	var out = "";
	var start = 0;
	var proc = function(s,def,p) {
		var impl;
		var mt;
		if(data.useScripts) {
			var path = "scripts/" + s + "/" + s + ".gml";
			if(!data.project.existsSync(path)) {
				return false;
			}
			try {
				impl = data.project.readTextFileSync(path);
			} catch( x ) {
				console.error("Failed to fetch lambda from " + path,((x) instanceof js__$Boot_HaxeError) ? x.val : x);
				return false;
			}
		} else {
			if(data.gml == null) {
				data.gml = electron_FileWrap.readTextFileSync(project.lambdaGml);
			}
			mt = parsers_GmlExtLambda.rxExtScript(s).exec(data.gml);
			if(mt == null) {
				return false;
			}
			impl = mt[2];
		}
		impl = parsers_GmlExtArgs.pre(impl);
		mt = parsers_GmlExtLambda.rxLambdaPre.exec(impl);
		if(mt == null) {
			return false;
		}
		out += q.source.substring(start,p);
		var laName = mt[3];
		if(mt[5] != null && mt[7] == null) {
			mt[7] = "";
		}
		var laArgs = mt[7] != null ? "(" + mt[5] + mt[7] + mt[6] + ")" : "";
		if(laName != "$") {
			scope.remap[s] = laName;
			scope.kind[laName] = "lambda.function";
			scope.comp.push({ name : laName, value : laName, score : 0, meta : "lambda", doc : laArgs != "" ? laName + laArgs : null});
			scope.docs[laName] = gml_GmlFuncDoc.parse(laName + laArgs);
		}
		var laCode = mt[8];
		laCode = parsers_GmlExtLambda.preImpl(laCode,data);
		out += def + mt[2] + (laName != "$" ? laName : "") + mt[4] + laArgs + laCode;
		list.push(s);
		map[s] = laCode;
		return true;
	};
	while(q.get_loop()) {
		var p1 = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			var ctx = q.readContextName(null);
			if(ctx != null) {
				scope = new parsers_GmlExtLambda();
				data.scopes[ctx] = scope;
				data.scope = scope;
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		case 123:
			if(q.source.substring(q.pos,q.pos + 10) == "/*!#lamdef") {
				var p11 = q.source.indexOf("}",q.pos);
				if(p11 < 0) {
					continue;
				}
				var mt1 = parsers_GmlExtLambda.rxLambdaDef.exec(q.source.substring(p1 + 1,p11));
				if(mt1 == null) {
					continue;
				}
				if(proc(mt1[1],"#lamdef",p1)) {
					q.pos = p11 + 1;
					start = q.pos;
				}
			}
			break;
		default:
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
				q.skipIdent1();
				var s1 = q.source.substring(p1,q.pos);
				if(!lambdaMap[s1]) {
					continue;
				}
				var rs = scope.remap[s1];
				if(rs != null) {
					out += q.source.substring(start,p1);
					out += rs;
					start = q.pos;
					continue;
				}
				if(proc(s1,"#lambda",p1)) {
					start = q.pos;
				}
			}
		}
	}
	out += q.source.substring(start,q.pos);
	return out;
};
parsers_GmlExtLambda.preInit = function(pj) {
	var scopes = Object.create(null);
	var scope = new parsers_GmlExtLambda();
	scopes[""] = scope;
	return { project : pj, version : pj.version, list : [], map : Object.create(null), scopes : scopes, scope : scope, useScripts : pj.properties.lambdaMode == 2, gml : null};
};
parsers_GmlExtLambda.pre = function(edit,code) {
	var pj = gml_Project.current;
	if(!(ui_Preferences.current.lambdaMagic && (pj.lambdaGml != null || pj.properties.lambdaMode == 2))) {
		return code;
	}
	if(edit.file.path != null && edit.file.path == pj.lambdaGml) {
		return code;
	}
	var d = parsers_GmlExtLambda.preInit(pj);
	var out = parsers_GmlExtLambda.preImpl(code,d);
	edit.lambdaList = d.list;
	edit.lambdaMap = d.map;
	edit.lambdas = d.scopes;
	return out;
};
parsers_GmlExtLambda.post_1 = function(fileName,code,prefix,data,parent) {
	if(parent == null) {
		parent = "";
	}
	var project = data.project;
	var version = data.version;
	var map0 = data.map0;
	var list1 = data.list1;
	var parent1 = data.parent1;
	var map1 = data.map1;
	var scope = data.scope;
	var q = new parsers_GmlReader(code);
	var row = 0;
	var out = "";
	var start = 0;
	var flush = function(till) {
		out += q.source.substring(start,till);
	};
	var proc = function() {
		var p0 = q.pos;
		q.skipSpaces1();
		var p;
		var laName = null;
		var laNamePre = "";
		var this1 = q.source.charCodeAt(q.pos);
		if(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90) {
			p = q.pos;
			q.skipIdent1();
			laNamePre = q.source.substring(p0,p);
			if(laNamePre.indexOf("\n") != -1) {
				parsers_GmlExtLambda.errorText = "[row " + row + "]: " + "You can't have a linebreak between #lambda and name";
				return null;
			}
			laName = q.source.substring(p,q.pos);
			p0 = q.pos;
			q.skipSpaces1();
		}
		var laArgs = null;
		var laArgsPre = "";
		if(q.source.charCodeAt(q.pos) == 40) {
			p = q.pos + 1;
			var depth = 0;
			_hx_loop1: while(q.get_loop()) {
				var c = q.source.charCodeAt(q.pos++);
				switch(c) {
				case 10:case 13:
					parsers_GmlExtLambda.errorText = "[row " + row + "]: " + "Expected a closing `)`";
					return null;
				case 40:
					++depth;
					break;
				case 41:
					if(--depth <= 0) {
						q.pos -= 1;
						break _hx_loop1;
					}
					break;
				case 47:
					switch(q.source.charCodeAt(q.pos)) {
					case 42:
						q.pos += 1;
						q.skipComment();
						break;
					case 47:
						q.skipLine();
						break;
					default:
					}
					break;
				case 34:case 39:case 64:case 96:
					row += q.skipStringAuto(c,version);
					break;
				default:
				}
			}
			if(q.get_loop()) {
				laArgsPre = q.source.substring(p0,p - 1);
				laArgs = q.source.substring(p,q.pos);
				q.pos += 1;
				p0 = q.pos;
				q.skipSpaces1();
			} else {
				parsers_GmlExtLambda.errorText = "[row " + row + "]: " + "Expected a closing `)`";
				return null;
			}
		}
		if(q.source.charCodeAt(q.pos) != 123) {
			var opts = ["{code}"];
			if(laName != null) {
				opts.push("name");
			}
			if(laArgs != null) {
				opts.push("(args)");
			}
			if(opts.length > 1) {
				var optl = opts.pop();
				var s = "Expected a " + opts.join(", ") + " or " + optl + ".";
				parsers_GmlExtLambda.errorText = "[row " + row + "]: " + s;
				return null;
			} else {
				parsers_GmlExtLambda.errorText = "[row " + row + "]: " + ("Expected a " + opts[0] + ".");
				return null;
			}
		} else {
			p = q.pos + 1;
			var depth1 = 0;
			_hx_loop2: while(q.get_loop()) {
				var c1 = q.source.charCodeAt(q.pos++);
				switch(c1) {
				case 47:
					switch(q.source.charCodeAt(q.pos)) {
					case 42:
						q.pos += 1;
						q.skipComment();
						break;
					case 47:
						q.skipLine();
						break;
					default:
					}
					break;
				case 34:case 39:case 64:case 96:
					row += q.skipStringAuto(c1,version);
					break;
				case 123:
					++depth1;
					break;
				case 125:
					if(--depth1 <= 0) {
						q.pos -= 1;
						break _hx_loop2;
					}
					break;
				default:
				}
			}
			if(!q.get_loop()) {
				parsers_GmlExtLambda.errorText = "[row " + row + "]: " + "Expected a closing `}`";
				return null;
			}
			q.pos += 1;
			var laCode = q.source.substring(p0,q.pos);
			var laArgsMt;
			var laArgsDoc;
			if(laArgs != null) {
				laArgsMt = parsers_GmlExtLambda.rxLambdaArgsSp.exec(laArgs);
				if(laArgsMt[2] != "") {
					laCode = "#args " + laArgs + "\n" + laCode;
					laCode = parsers_GmlExtArgs.post(laCode);
				}
				laArgsDoc = laArgs;
				if(laCode == null) {
					parsers_GmlExtLambda.errorText = "[row " + row + "]: " + ("Arguments error:\n" + parsers_GmlExtArgs.errorText);
					return null;
				}
			} else {
				laArgsMt = null;
				laArgsDoc = gml_GmlFuncDoc.autoArgs(laCode);
			}
			var laFull_0 = "__lf_" + prefix + "_" + (laName != null ? laName : "");
			var laFull_i = 0;
			var laFull;
			while(true) {
				laFull = laFull_0;
				if(laFull_i > 0) {
					laFull = laFull_0 + laFull_i;
				}
				++laFull_i;
				if(!(Object.prototype.hasOwnProperty.call(map1,laFull) || !Object.prototype.hasOwnProperty.call(map0,laFull) && Object.prototype.hasOwnProperty.call(project.lambdaMap,laFull))) {
					break;
				}
			}
			laCode = "/// " + laFull + "(" + laArgsDoc + ")\n" + "//!#lambda" + laNamePre + (laName != null ? laName : "$") + laArgsPre + (laArgsMt != null ? "(" + laArgsMt[1] + "$" + laArgsMt[3] + ")" : "") + "\n" + laCode;
			if(laName != null) {
				if(Object.prototype.hasOwnProperty.call(scope.remap,laName)) {
					parsers_GmlExtLambda.errorText = "[row " + row + "]: " + ("There's already a lambda named " + laName + " in this scope!");
					return null;
				}
				scope.remap[laName] = laFull;
				scope.kind[laName] = "lambda.function";
				scope.comp.push({ name : laName, value : laName, score : 0, meta : "lambda", doc : laArgs != null ? "" + laName + "(" + laArgs + ")" : null});
				scope.docs[laName] = gml_GmlFuncDoc.parse(laName + ("(" + (laArgs != null ? laArgs : "") + ")"));
			}
			laCode = parsers_GmlExtLambda.post_1(fileName,laCode,laFull.substring("__lf_".length),data,laFull);
			if(laCode == null) {
				return null;
			}
			list1.push(laFull);
			map1[laFull] = laCode;
			parent1[laFull] = parent;
			return laFull;
		}
	};
	while(q.get_loop()) {
		var p1 = q.pos;
		var c2 = q.source.charCodeAt(q.pos++);
		switch(c2) {
		case 35:
			q.skipIdent1();
			var hash = q.source.substring(p1,q.pos);
			var isDef = hash == "#lamdef";
			if(isDef || hash == "#lambda") {
				var full = proc();
				if(full == null) {
					return null;
				}
				flush(p1);
				if(isDef) {
					out += "{/*!#lamdef " + full + "*/}";
				} else {
					out += full;
				}
				start = q.pos;
			} else if(p1 == 0 || q.source.charCodeAt(p1 - 1) == 10) {
				switch(hash) {
				case "#define":case "#event":case "#moment":case "#target":
					q.skipSpaces0();
					var p11 = q.pos;
					var ct;
					scope = new parsers_GmlExtLambda();
					data.scope = scope;
					switch(hash) {
					case "#define":
						q.skipIdent1();
						ct = q.source.substring(p11,q.pos);
						prefix = ct;
						break;
					case "#event":
						q.skipEventName();
						ct = q.source.substring(p11,q.pos);
						prefix = fileName + "_" + StringTools.replace(ct,":","_");
						break;
					case "#moment":case "#target":
						q.skipIdent1();
						ct = q.source.substring(p11,q.pos);
						prefix = fileName + "_" + ct;
						break;
					default:
						ct = null;
					}
					data.scopes[ct] = scope;
					break;
				default:
					q.pos = p1 + 1;
				}
			} else {
				q.pos = p1 + 1;
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				row += q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			row += q.skipStringAuto(c2,version);
			break;
		default:
			if(c2 == 95 || c2 >= 97 && c2 <= 122 || c2 >= 65 && c2 <= 90) {
				q.skipIdent1();
				var rs = scope.remap[q.source.substring(p1,q.pos)];
				if(rs != null) {
					var z = true;
					var p12 = p1;
					_hx_loop2: while(--p12 >= 0) switch(q.source.charCodeAt(p12)) {
					case 9:case 10:case 13:case 32:
						break;
					case 46:
						z = false;
						break _hx_loop2;
					default:
						break _hx_loop2;
					}
					if(z) {
						flush(p1);
						out += rs;
						start = q.pos;
					}
				}
			}
		}
	}
	flush(q.pos);
	return out;
};
parsers_GmlExtLambda.postGMS1 = function(d) {
	var pj = d.project;
	var ext = electron_FileWrap.readGmxFileSync(pj.lambdaExt);
	var file = null;
	var _g1 = ext.find("files").findAll("file");
	while(0 < _g1.length) {
		file = _g1[0];
		break;
	}
	var fns = file.find("functions");
	var mcs = file.find("constants");
	var extz = false;
	var useVars = gml_Project.current.properties.lambdaMode == 1;
	var _g2 = 0;
	var _g3 = d.list0;
	while(_g2 < _g3.length) {
		var s = _g3[_g2];
		++_g2;
		if(!Object.prototype.hasOwnProperty.call(d.map1,s)) {
			extz = true;
			if(useVars) {
				var _g21 = 0;
				var _g31 = mcs.findAll("constant");
				while(_g21 < _g31.length) {
					var mc = _g31[_g21];
					++_g21;
					if(mc.findText("name") == s) {
						HxOverrides.remove(mcs.children,mc);
						break;
					}
				}
				s = s.replace(parsers_GmlExtLambda.rxlfPrefix,"__lc_");
			}
			var _g22 = 0;
			var _g32 = fns.findAll("function");
			while(_g22 < _g32.length) {
				var f = _g32[_g22];
				++_g22;
				if(f.findText("name") == s) {
					HxOverrides.remove(fns.children,f);
					break;
				}
			}
		}
	}
	var makeFn = function(s1) {
		var fn = new gmx_SfGmx("function");
		fn.addTextChild("name",s1);
		fn.addTextChild("externalName",s1);
		fn.addTextChild("kind","11");
		fn.addTextChild("help","");
		fn.addTextChild("returnType","2");
		fn.addTextChild("argCount","-1");
		fn.children.push(new gmx_SfGmx("args"));
		return fn;
	};
	var _g4 = 0;
	var _g5 = d.list1;
	while(_g4 < _g5.length) {
		var s2 = _g5[_g4];
		++_g4;
		if(!Object.prototype.hasOwnProperty.call(d.map0,s2)) {
			var skip = false;
			if(useVars) {
				var _g41 = 0;
				var _g51 = mcs.findAll("constant");
				while(_g41 < _g51.length) if(_g51[_g41++].findText("name") == s2) {
					skip = true;
					break;
				}
				if(skip) {
					continue;
				}
				var mc1 = new gmx_SfGmx("constant");
				mc1.addTextChild("name",s2);
				mc1.addTextChild("value","global.g" + s2);
				mc1.addTextChild("hidden","-1");
				mcs.children.push(mc1);
				s2 = s2.replace(parsers_GmlExtLambda.rxlfPrefix,"__lc_");
			}
			var _g42 = 0;
			var _g52 = fns.findAll("function");
			while(_g42 < _g52.length) if(_g52[_g42++].findText("name") == s2) {
				skip = true;
				break;
			}
			if(skip) {
				continue;
			}
			extz = true;
			var q = makeFn(s2);
			fns.children.push(q);
		}
	}
	if(file.findText("init") == "") {
		file.find("init").text = "__lf_";
		fns.children.unshift(makeFn("__lf_"));
		extz = true;
		d.checkInit = true;
	}
	if(extz) {
		electron_FileWrap.writeTextFileSync(pj.lambdaExt,ext.toGmxString());
	}
};
parsers_GmlExtLambda.postGMS2 = function(d) {
	var pj = d.project;
	var ext = electron_FileWrap.readJsonFileSync(pj.lambdaExt);
	var file = ext.files[0];
	var fns = file.functions;
	var mcs = file.constants;
	var order = file.order;
	var extz = false;
	var i;
	var useVars = gml_Project.current.properties.lambdaMode == 1;
	var _g = 0;
	var _g1 = d.list0;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(d.map1,s)) {
			extz = true;
			if(useVars) {
				i = mcs.length;
				while(--i >= 0) {
					if(mcs[i].constantName != s) {
						continue;
					}
					mcs.splice(i,1);
					break;
				}
				s = s.replace(parsers_GmlExtLambda.rxlfPrefix,"__lc_");
			}
			i = fns.length;
			while(--i >= 0) {
				var fn = fns[i];
				if(fn.name != s) {
					continue;
				}
				HxOverrides.remove(order,fn.id);
				fns.splice(i,1);
				break;
			}
		}
	}
	var makeFn = function(s1) {
		return { id : yy__$YyGUID_YyGUID_$Impl_$.create(), modelName : "GMExtensionFunction", mvc : "1.0", argCount : -1, args : [], externalName : s1, help : "", hidden : true, kind : 11, name : s1, returnType : 2};
	};
	var _g2 = 0;
	var _g3 = d.list1;
	while(_g2 < _g3.length) {
		var s2 = _g3[_g2];
		++_g2;
		if(!Object.prototype.hasOwnProperty.call(d.map0,s2)) {
			var skip = false;
			if(useVars) {
				var _g21 = 0;
				while(_g21 < mcs.length) if(mcs[_g21++].constantName == s2) {
					skip = true;
					break;
				}
				if(skip) {
					continue;
				}
				mcs.push({ id : yy__$YyGUID_YyGUID_$Impl_$.create(), modelName : "GMExtensionConstant", mvc : "1.0", constantName : s2, hidden : true, value : "global.g" + s2});
				s2 = s2.replace(parsers_GmlExtLambda.rxlfPrefix,"__lc_");
			}
			var _g22 = 0;
			while(_g22 < fns.length) if(fns[_g22++].name == s2) {
				skip = true;
				break;
			}
			if(skip) {
				continue;
			}
			extz = true;
			var fn1 = makeFn(s2);
			order.push(fn1.id);
			fns.push(fn1);
		}
	}
	if(file.init == "") {
		file.init = "__lf_";
		var fn2 = makeFn("__lf_");
		order.unshift(fn2.id);
		fns.unshift(fn2);
		extz = true;
		d.checkInit = true;
	}
	if(extz) {
		electron_FileWrap.writeTextFileSync(pj.lambdaExt,tools_NativeString.yyJson(ext));
	}
};
parsers_GmlExtLambda.postGMS2_scripts = function(d) {
	var pj = d.project;
	var py = d.project.readJsonFileSync(pj.name);
	var ry = py.resources;
	var saveProject = false;
	if(pj.lambdaView == null) {
		var tv = ui_treeview_TreeView.find(false,{ rel : "Scripts/"});
		ui_treeview_TreeViewItemMenus.updatePrefix(tv);
		var td = ui_treeview_TreeViewItemMenus.getItemData(tv);
		var md = { prefix : td.prefix, plural : td.plural, single : td.single, last : td.last, tvDir : tv, tvRef : tv, chain : ["Scripts"], order : 0, mkdir : true, name : "#gmedit-lambda", py : py};
		yy_YyManip.add(md);
		pj.lambdaView = "views\\" + md.outGUID + ".yy";
		saveProject = true;
	}
	var pyBefore = null;
	var _g = 0;
	var _g1 = py.resources;
	while(_g < _g1.length) {
		var r = _g1[_g];
		++_g;
		if(r.Value.resourcePath != pj.lambdaView) {
			continue;
		}
		pyBefore = r;
		break;
	}
	var ltv = ui_treeview_TreeView.find(false,{ rel : "Scripts/#gmedit-lambda/"});
	ui_treeview_TreeViewItemMenus.updatePrefix(ltv);
	var saveView = false;
	var lview = null;
	var _g2 = 0;
	var _g3 = d.list0;
	while(_g2 < _g3.length) {
		var s = _g3[_g2];
		++_g2;
		if(!Object.prototype.hasOwnProperty.call(d.map1,s)) {
			var path = "scripts\\" + s + "\\" + s + ".yy";
			var _g21 = 0;
			var _g31 = ry.length;
			while(_g21 < _g31) {
				var i = _g21++;
				var r1 = ry[i];
				if(r1.Value.resourcePath != path) {
					continue;
				}
				var this1 = pj.yyResourceGUIDs;
				delete this1[s];
				var this2 = pj.yyResources;
				var k = r1.Value.id;
				delete this2[k];
				if(lview == null) {
					lview = pj.readJsonFileSync(pj.lambdaView);
				}
				if(HxOverrides.remove(lview.children,r1.Value.id)) {
					saveView = true;
				}
				ry.splice(i,1);
				saveProject = true;
				break;
			}
			pj.unlinkSync(path);
			pj.unlinkSync("scripts\\" + s + "\\" + s + ".gml");
			pj.rmdirSync("scripts\\" + s);
			var stv = ui_treeview_TreeView.find(true,{ rel : "Scripts/#gmedit-lambda/" + s});
			if(stv != null) {
				stv.parentElement.removeChild(stv);
			}
		}
	}
	if(saveView) {
		pj.writeTextFileSync(pj.lambdaView,tools_NativeString.yyJson(lview));
	}
	var _g4 = 0;
	var _g5 = d.list1;
	while(_g4 < _g5.length) {
		var s1 = _g5[_g4];
		++_g4;
		if(!Object.prototype.hasOwnProperty.call(d.map0,s1)) {
			var td1 = ui_treeview_TreeViewItemMenus.getItemData(ltv);
			yy_YyManip.add({ prefix : td1.prefix, plural : td1.plural, single : td1.single, last : td1.last, tvDir : ltv, tvRef : ltv, chain : ["Scripts","#gmedit-lambda"], order : 0, mkdir : false, name : s1, py : py, pyBefore : pyBefore, openFile : false});
			saveProject = true;
		}
	}
	var _g6 = 0;
	var _g7 = d.list1;
	while(_g6 < _g7.length) {
		var s2 = _g7[_g6];
		++_g6;
		pj.writeTextFileSync("scripts\\" + s2 + "\\" + s2 + ".gml",d.map1[s2]);
	}
	if(saveProject) {
		pj.writeTextFileSync(pj.name,tools_NativeString.yyJson(py));
	}
};
parsers_GmlExtLambda.postImpl = function(code,data) {
	if(!ui_Preferences.current.lambdaMagic) {
		return code;
	}
	var hasLambda = data.hasLambda;
	if(hasLambda == null) {
		hasLambda = code.indexOf("#lambda") != -1 || code.indexOf("#lamdef") != -1;
		data.hasLambda = hasLambda;
	}
	if(!hasLambda && data.list0.length == 0) {
		return code;
	}
	var out = hasLambda ? parsers_GmlExtLambda.post_1(data.name,code,data.name,data) : code;
	if(out == null) {
		return null;
	}
	var pj = data.project;
	if(data.list0.length == 0 && data.list1.length == 0) {
		return out;
	}
	switch(pj.version) {
	case 1:case 2:
		break;
	default:
		parsers_GmlExtLambda.errorText = "Lambdas are not supported for this version of GM.";
		return null;
	}
	var isScripts = pj.properties.lambdaMode == 2;
	var remList = [];
	var setList = [];
	var indexList = [];
	var indexForce = isScripts ? Object.create(null) : null;
	var _g1 = 0;
	var _g2 = data.list0;
	while(_g1 < _g2.length) {
		var s = _g2[_g1];
		++_g1;
		if(!Object.prototype.hasOwnProperty.call(data.map1,s)) {
			remList.push(s);
		}
	}
	var _g3 = 0;
	var _g4 = data.list0;
	while(_g3 < _g4.length) {
		var s1 = _g4[_g3];
		++_g3;
		if(data.map1[s1] == null) {
			remList.push(s1);
		}
	}
	var _g5 = 0;
	var _g6 = data.list1;
	while(_g5 < _g6.length) {
		var s2 = _g6[_g5];
		++_g5;
		var changed = data.map1[s2] != data.map0[s2];
		if(changed) {
			setList.push(s2);
		}
		if(isScripts) {
			if(changed || indexForce[s2]) {
				indexList.push(s2);
			}
			if(changed) {
				var p = data.parent1[s2];
				var depth = 0;
				while(p != "" && ++depth <= 128) {
					indexForce[p] = true;
					p = data.parent1[p];
				}
			}
		} else if(changed) {
			indexList.push(s2);
		}
	}
	var changed1 = remList.length > 0 || setList.length > 0;
	var _g7 = 0;
	while(_g7 < remList.length) {
		var s3 = remList[_g7];
		++_g7;
		var this1 = pj.lambdaMap;
		delete this1[s3];
		if(isScripts) {
			var this2 = gml_GmlAPI.gmlDoc;
			delete this2[s3];
		} else {
			var this3 = gml_GmlAPI.extDoc;
			delete this3[s3];
		}
		var this4 = parsers_GmlExtLambda.seekData.locals;
		delete this4[s3];
	}
	var _g8 = 0;
	while(_g8 < setList.length) pj.lambdaMap[setList[_g8++]] = true;
	var _g9 = 0;
	while(_g9 < indexList.length) {
		var s4 = indexList[_g9];
		++_g9;
		var lgml = data.map1[s4];
		var locals = new gml_GmlLocals();
		parsers_GmlExtLambda.seekData.locals[s4] = locals;
		parsers_GmlSeeker.runSyncImpl(isScripts ? pj.fullPath("scripts/" + s4 + "/" + s4 + ".gml") : parsers_GmlExtLambda.seekPath,lgml,s4,parsers_GmlExtLambda.seekData,locals,file_kind_gml_KGmlLambdas.inst);
		parsers_GmlExtLambda.readDefs_1(lgml);
	}
	if(isScripts) {
		parsers_GmlExtLambda.postGMS2_scripts(data);
		return out;
	}
	if(pj.lambdaExt == null || pj.lambdaGml == null) {
		parsers_GmlExtLambda.errorText = "Please add an extension called `" + "gmedit_lambda" + "` to the project," + " add a placeholder GML file to it, and reload (Ctrl+R) in GMEdit.";
		if(pj.version == 1) {
			parsers_GmlExtLambda.errorText += "\n\nAs this is GMS1, you'll also need to reload the project after you save a file with lambdas for the first time. Sorry about that.";
		}
		return null;
	}
	var gml1 = null;
	if(changed1) {
		switch(pj.version) {
		case 1:
			parsers_GmlExtLambda.postGMS1(data);
			break;
		case 2:
			parsers_GmlExtLambda.postGMS2(data);
			break;
		default:
			parsers_GmlExtLambda.errorText = "Lambdas are not supported in this version of GM.";
			return null;
		}
	}
	if(data.checkInit) {
		if(gml1 == null) {
			gml1 = electron_FileWrap.readTextFileSync(pj.lambdaGml);
		}
		if(!new RegExp("^#define " + "__lf_" + "$","m").test(gml1)) {
			gml1 = "#define " + "__lf_" + "\n" + "// https://bugs.yoyogames.com/view.php?id=29984" + (gml1 != "" ? "\n" + gml1 : "");
		}
	}
	if(changed1) {
		if(gml1 == null) {
			gml1 = electron_FileWrap.readTextFileSync(pj.lambdaGml);
		}
		var _g10 = 0;
		while(_g10 < remList.length) {
			var s5 = remList[_g10];
			++_g10;
			var what = parsers_GmlExtLambda.rxExtScript(s5);
			gml1 = gml1.replace(what,"$3");
			var what1 = new RegExp("\n" + s5 + " = .+");
			gml1 = gml1.replace(what1,"");
		}
		var useVars = gml_Project.current.properties.lambdaMode == 1;
		var _g11 = 0;
		while(_g11 < setList.length) {
			var s6 = setList[_g11];
			++_g11;
			var scr = [data.map1[s6]];
			var add = [true];
			var what2 = parsers_GmlExtLambda.rxExtScript(s6);
			gml1 = gml1.replace(what2,(function(add1,scr1) {
				return function(_,s0,c,s11) {
					add1[0] = false;
					return s0 + scr1[0] + s11;
				};
			})(add,scr));
			if(add[0]) {
				var scrName = s6;
				if(useVars) {
					scrName = s6.replace(parsers_GmlExtLambda.rxlfPrefix,"__lc_");
					var p1 = gml1.indexOf("\n#define",gml1.indexOf("#define " + "__lf_") + 1);
					if(gml1.charCodeAt(p1 - 1) == 13) {
						--p1;
					} else if(p1 < 0) {
						p1 = gml1.length;
					}
					gml1 = tools_NativeString.insert(gml1,p1,"\n" + s6 + " = asset_get_index(\"" + scrName + "\");");
				}
				gml1 += "\n#define " + scrName + "\n" + scr[0];
			}
		}
		electron_FileWrap.writeTextFileSync(pj.lambdaGml,gml1);
	}
	return out;
};
parsers_GmlExtLambda.postInit = function(name,pj,lambdaList,lambdaMap) {
	var scopes = Object.create(null);
	var scope = new parsers_GmlExtLambda();
	scopes[""] = scope;
	return { name : name, project : pj, version : pj.version, list0 : lambdaList, map0 : lambdaMap, list1 : [], map1 : Object.create(null), parent1 : Object.create(null), scopes : scopes, scope : scope, checkInit : false, hasLambda : null};
};
parsers_GmlExtLambda.post = function(edit,code) {
	if(!ui_Preferences.current.lambdaMagic) {
		return code;
	}
	var hasLambda = code.indexOf("#lambda") != -1 || code.indexOf("#lamdef") != -1;
	if(!hasLambda && edit.lambdaList.length == 0) {
		return code;
	}
	var data = parsers_GmlExtLambda.postInit(edit.file.name,gml_Project.current,edit.lambdaList,edit.lambdaMap);
	data.hasLambda = hasLambda;
	var out = parsers_GmlExtLambda.postImpl(code,data);
	edit.lambdas = data.scopes;
	edit.lambdaList = data.list1;
	edit.lambdaMap = data.map1;
	return out;
};
parsers_GmlExtLambda.readDefs_1 = function(code) {
	var rx = parsers_GmlExtLambda.readDefs_rx;
	rx.lastIndex = 0;
	var mt = rx.exec(code);
	while(mt != null) {
		var this1 = gml_GmlAPI.extDoc;
		var v = gml_GmlFuncDoc.parse(mt[1]);
		this1[mt[2]] = v;
		mt = rx.exec(code);
	}
};
parsers_GmlExtLambda.readDefs = function(path) {
	try {
		var code = electron_FileWrap.readTextFileSync(path);
		var props = gml_Project.current.properties;
		if(code.indexOf("//!usevars") >= 0) {
			var _g = props.lambdaMode;
			if(_g == null) {
				props.lambdaMode = 1;
			} else if(_g == 0) {
				props.lambdaMode = 1;
			}
		}
		parsers_GmlSeeker.runSync(path,code,"",file_kind_gml_KGmlLambdas.inst);
		parsers_GmlExtLambda.seekPath = path;
		parsers_GmlExtLambda.seekData = parsers_GmlSeekData.map[path];
		if(gml_Project.current.properties.lambdaMode == 1) {
			var locals = parsers_GmlExtLambda.seekData.locals;
			var _g1 = 0;
			var _g11 = Reflect.fields(locals);
			while(_g1 < _g11.length) {
				var fd = _g11[_g1];
				++_g1;
				if(StringTools.startsWith(fd,"__lc_")) {
					var v = locals[fd];
					delete locals[fd];
					locals["__lf_" + fd.substring("__lc_".length)] = v;
				}
			}
		}
	} catch( e ) {
	}
	electron_FileWrap.readTextFile(path,function(e1,code1) {
		if(e1 != null) {
			return;
		}
		parsers_GmlExtLambda.readDefs_1(code1);
	});
};
parsers_GmlExtLambda.prototype = {
	__class__: parsers_GmlExtLambda
};
var parsers_GmlExtMFunc = function(name,json) {
	this.name = name;
	this.args = json.args;
	this.order = json.order;
	this.comp = { name : name, value : name, score : 0, meta : "macro", doc : name + "(" + this.args.join(",") + ")"};
	this.hasRest = this.args.length > 0 && this.args[this.args.length - 1].trim() == "...";
};
$hxClasses["parsers.GmlExtMFunc"] = parsers_GmlExtMFunc;
parsers_GmlExtMFunc.__name__ = "parsers.GmlExtMFunc";
parsers_GmlExtMFunc.__magicMap_init = function() {
	var map = Object.create(null);
	var rx = "(@@)(__(?:";
	var rxSep = false;
	var add = function(name,fn) {
		if(rxSep) {
			rx += "|";
		} else {
			rxSep = true;
		}
		rx += name + "__";
		map["__" + name + "__"] = fn;
	};
	add("FILE",function(e,_) {
		return JSON.stringify(e.file.name);
	});
	add("HERE",function(e1,_1) {
		return e1.file.name;
	});
	add("DATE",function(e2,_2) {
		return JSON.stringify(DateTools.format(new Date(),"%F"));
	});
	add("TIME",function(e3,_3) {
		return JSON.stringify(DateTools.format(new Date(),"%T"));
	});
	var getLine = function(q) {
		var n = 0;
		var i = q.pos;
		while(i >= 0) {
			++n;
			i = q.source.lastIndexOf("\n",i - 1);
		}
		return n;
	};
	add("LINE",function(e4,q1) {
		return "" + getLine(q1);
	});
	add("LINE_STR",function(e5,q2) {
		return "\"" + getLine(q2) + "\"";
	});
	map["argument"] = function(e6,q3) {
		return "argument";
	};
	map["argument_count"] = function(e7,q4) {
		return "argument_count";
	};
	var makeArgFun = function(i1) {
		return function(e8,q5) {
			return "argument" + i1;
		};
	};
	var v = makeArgFun(0);
	map["argument" + 0] = v;
	var v1 = makeArgFun(1);
	map["argument" + 1] = v1;
	var v2 = makeArgFun(2);
	map["argument" + 2] = v2;
	var v3 = makeArgFun(3);
	map["argument" + 3] = v3;
	var v4 = makeArgFun(4);
	map["argument" + 4] = v4;
	var v5 = makeArgFun(5);
	map["argument" + 5] = v5;
	var v6 = makeArgFun(6);
	map["argument" + 6] = v6;
	var v7 = makeArgFun(7);
	map["argument" + 7] = v7;
	var v8 = makeArgFun(8);
	map["argument" + 8] = v8;
	var v9 = makeArgFun(9);
	map["argument" + 9] = v9;
	var v10 = makeArgFun(10);
	map["argument" + 10] = v10;
	var v11 = makeArgFun(11);
	map["argument" + 11] = v11;
	var v12 = makeArgFun(12);
	map["argument" + 12] = v12;
	var v13 = makeArgFun(13);
	map["argument" + 13] = v13;
	var v14 = makeArgFun(14);
	map["argument" + 14] = v14;
	var v15 = makeArgFun(15);
	map["argument" + 15] = v15;
	rx += "))";
	parsers_GmlExtMFunc.magicRegex = rx;
	return map;
};
parsers_GmlExtMFunc.pre = function(editor,code) {
	if(!ui_Preferences.current.mfuncMagic) {
		return code;
	}
	var q = new parsers_GmlReader(code);
	var v = q.version;
	var proc = null;
	proc = function(mf,pre) {
		if(mf.order.length == 0) {
			return mf.name + "()";
		}
		var orig_pos = q.pos;
		var c = q.source.charCodeAt(q.pos);
		var beforeParOpen = "";
		if(c == 32 || c == 9) {
			q.pos += 1;
		} else if(c == 47 && q.source.charCodeAt(q.pos + 1) == 42) {
			q.pos = q.source.indexOf("*/",q.pos);
			if(q.pos < 0) {
				q.pos = orig_pos;
				return pre + "0";
			} else {
				beforeParOpen = q.source.substring(orig_pos + 2,q.pos);
				q.pos += 2;
			}
		}
		var start = q.pos;
		var ind = 1;
		var next = pre + 1;
		var args = new Array(mf.args.length);
		var order = mf.order;
		var out = "";
		_hx_loop1: while(q.get_loop()) {
			var p = q.pos;
			c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 35:
				if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
					q.readContextName(null);
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					q.skipComment();
					break;
				case 47:
					q.skipLine();
					break;
				}
				break;
			case 34:case 39:case 64:case 96:
				q.skipStringAuto(c,v);
				break;
			default:
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					if(q.source.charCodeAt(q.pos + (-4)) == 95 && q.source.charCodeAt(q.pos + (-3)) == 109 && q.source.charCodeAt(q.pos + (-2)) == 102 && q.source.charCodeAt(q.pos + (-1)) == 48) {
						var mf1 = gml_GmlAPI.gmlMFuncs[q.source.substring(p,q.pos - 4)];
						if(mf1 != null) {
							out += q.source.substring(start,p) + proc(mf1,q.source.substring(p,q.pos - 1));
							start = q.pos;
						}
					} else if(q.source.substring(p,q.pos) == next) {
						c = q.source.charCodeAt(p - 1);
						if(c == 32 || c == 9) {
							--p;
						}
						var arg = out + q.source.substring(start,p);
						out = "";
						var ai;
						var s;
						var pad;
						var trim;
						var ord = order[ind - 1];
						if(typeof(ord) == "number") {
							ai = ord;
						} else {
							switch(ord[0]) {
							case 0:
								ai = ord[1];
								break;
							case 1:
								ai = ord[1];
								try {
									arg = JSON.parse(arg);
								} catch( x ) {
									console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai + "] `" + arg + "` is invalid JSON."));
									break _hx_loop1;
								}
								break;
							case 2:
								ai = -1;
								break;
							case 3:case 4:case 5:
								ai = ord[1];
								s = ord[2];
								if(ord[0] != 4) {
									trim = arg.trimLeft();
									pad = arg.substring(0,arg.length - trim.length);
									if(trim.startsWith(s)) {
										arg = pad + trim.substring(s.length);
									} else {
										console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai + "] `" + arg + "` is supposed " + ("to start with `" + s + "` but does not.")));
										break _hx_loop1;
									}
								}
								if(ord[0] == 5) {
									s = ord[3];
								}
								if(ord[0] != 3) {
									trim = arg.trimRight();
									pad = arg.substring(trim.length);
									if(trim.endsWith(s)) {
										arg = trim.substring(0,trim.length - s.length) + pad;
									} else {
										console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai + "] `" + arg + "` is supposed " + ("to end with `" + s + "` but does not.")));
										break _hx_loop1;
									}
								}
								break;
							}
						}
						if(ai >= 0) {
							var oldArg = args[ai];
							if(oldArg != null) {
								if(oldArg != arg) {
									console.error("[mfunc] for " + mf.name + ": " + ("argument[" + ai + "]" + (" is already set to `" + oldArg + "` but new value is `" + arg + "`")));
									break _hx_loop1;
								}
							} else {
								args[ai] = arg;
							}
						}
						if(++ind > order.length) {
							ai = args.length;
							while(--ai >= 0) if(args[ai] == null) {
								args[ai] = "undefined";
							}
							var proc1 = mf.name + beforeParOpen + "(";
							var b_b = "";
							var len = args.length;
							var _g = 0;
							while(_g < len) {
								var i = _g++;
								b_b += Std.string(Std.string(args[i]));
								if(i < len - 1) {
									b_b += ",";
								}
							}
							return proc1 + b_b + ")";
						} else {
							c = q.source.charCodeAt(q.pos);
							if(c == 32 || c == 9) {
								q.pos += 1;
							}
							start = q.pos;
							next = pre + ind;
						}
					}
				}
			}
		}
		console.error("Unclosed mfunc " + mf.name);
		q.pos = orig_pos;
		return pre + "0";
	};
	var start1 = 0;
	var out1 = "";
	while(q.get_loop()) {
		var p1 = q.pos;
		var c1 = q.source.charCodeAt(q.pos++);
		switch(c1) {
		case 35:
			if(q.source.charCodeAt(q.pos) == 109 && q.source.charCodeAt(q.pos + 1) == 97 && q.source.charCodeAt(q.pos + 2) == 99 && q.source.charCodeAt(q.pos + 3) == 114 && q.source.charCodeAt(q.pos + 4) == 111 && tools__$CharCode_CharCode_$Impl_$.isSpace1_ni(q.source.charCodeAt(q.pos + 5))) {
				q.pos += 5;
				q.skipSpaces1();
				q.skipIdent();
				q.skipSpaces1();
				if(q.source.charCodeAt(q.pos) == 58) {
					q.pos += 1;
					q.skipSpaces1();
					q.skipIdent();
				}
			} else if(p1 == 0 || q.source.charCodeAt(p1 - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				if(q.source.charCodeAt(p1 + 2) == 33 && q.source.charCodeAt(p1 + 3) == 35 && HxOverrides.substr(q.source,p1 + 4,6) == "mfunc ") {
					out1 += q.source.substring(start1,p1);
					var line = q.source.substring(p1 + 10,q.pos);
					var nameEnd = line.indexOf(" ");
					var name = line.substring(0,nameEnd);
					var json = JSON.parse(line.substring(nameEnd + 1));
					var args1 = json.args;
					var order1 = json.order;
					var mf2 = "#mfunc " + name + "(" + args1.join(",") + ")";
					var i1 = 0;
					var n = order1.length;
					var pre1 = "#macro " + name + "_mf";
					while(i1 <= n) {
						q.skipSpaces1();
						var cpre = pre1 + i1 + " ";
						if(q.source.substring(q.pos,q.pos + cpre.length) != cpre) {
							break;
						}
						var cvp = q.pos += cpre.length;
						q.skipLine();
						while(q.source.charCodeAt(q.pos + (-1)) == 92 && q.get_loop()) {
							q.skipLineEnd();
							q.skipLine();
						}
						var cval = q.source.substring(cvp,q.pos);
						if(cval.endsWith("//")) {
							cval = cval.substring(0,cval.length - 2);
						}
						mf2 += cval;
						if(i1 < n) {
							var ord1 = order1[i1];
							var ai1;
							if(ord1 == null) {
								ai1 = -1;
							} else if(typeof(ord1) == "number") {
								ai1 = ord1;
							} else {
								switch(ord1[0]) {
								case 0:
									ai1 = ord1[1];
									break;
								case 1:
									ai1 = ord1[1];
									mf2 += "@@";
									break;
								case 2:
									mf2 += "@@" + Std.string(ord1[1]);
									ai1 = -1;
									break;
								case 3:
									mf2 += Std.string(ord1[2]) + "##";
									ai1 = ord1[1];
									break;
								case 4:
									ai1 = -1;
									mf2 += args1[ord1[1]].trim() + "##" + Std.string(ord1[2]);
									break;
								case 5:
									ai1 = -1;
									mf2 += Std.string(ord1[2]) + "##" + args1[ord1[1]].trim() + "##" + Std.string(ord1[3]);
									break;
								}
							}
							if(ai1 >= 0) {
								mf2 += args1[ai1].trim();
							}
						}
						++i1;
					}
					if(i1 > n) {
						out1 += mf2;
						start1 = q.pos;
					}
				}
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c1,v);
			break;
		default:
			if(c1 == 95 || c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90) {
				q.skipIdent1();
				if(q.source.charCodeAt(q.pos + (-4)) == 95 && q.source.charCodeAt(q.pos + (-3)) == 109 && q.source.charCodeAt(q.pos + (-2)) == 102 && q.source.charCodeAt(q.pos + (-1)) == 48) {
					var mf3 = gml_GmlAPI.gmlMFuncs[q.source.substring(p1,q.pos - 4)];
					if(mf3 != null) {
						out1 += q.source.substring(start1,p1);
						out1 += proc(mf3,q.source.substring(p1,q.pos - 1));
						start1 = q.pos;
					}
				}
			}
		}
	}
	if(start1 == 0) {
		return code;
	}
	out1 += q.source.substring(start1,q.pos);
	return out1;
};
parsers_GmlExtMFunc.post = function(editor,code) {
	if(!ui_Preferences.current.mfuncMagic) {
		return code;
	}
	var version = gml_GmlAPI.version;
	var q = new parsers_GmlReader(code);
	var nextMap = Object.create(null);
	var proc = null;
	proc = function(mf) {
		var orig_pos = q.pos;
		var name = mf.name;
		var start = q.pos;
		q.skipSpaces0();
		var spacesBeforeParOpen = q.source.substring(start,q.pos);
		if(q.source.charCodeAt(q.pos++) != 40) {
			parsers_GmlExtMFunc.errorText = "Expected a `(` after " + name;
			return null;
		}
		start = q.pos;
		var depth = 1;
		var args = [];
		var out = "";
		while(q.get_loop()) {
			var p = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 44:
				if(depth == 1) {
					args.push(out + q.source.substring(start,p));
					out = "";
					start = q.pos;
				}
				break;
			case 40:case 91:case 123:
				++depth;
				break;
			case 41:case 93:case 125:
				if(--depth <= 0) {
					args.push(out + q.source.substring(start,p));
					out = "";
					var mfl = mf.args.length;
					if(mfl == 0 && args.length == 1 && args[0].trimRight() == "") {
						args.pop();
					}
					if(mf.hasRest) {
						if(args.length < mfl) {
							parsers_GmlExtMFunc.errorText = "" + name + " requires at least " + mf.args.length + " arguments" + (", " + args.length + " provided.");
							return null;
						}
						if(args.length > mf.args.length) {
							var i = mfl - 1;
							var rest = args[i];
							while(++i < args.length) rest += "," + args[i];
							args.splice(mfl,args.length - mfl);
							args[mfl - 1] = rest;
						}
					} else if(args.length != mfl) {
						parsers_GmlExtMFunc.errorText = "" + name + " requires " + mf.args.length + " arguments" + (", " + args.length + " provided.");
						return null;
					}
					var pre = name + "_mf";
					var out1 = pre + "0";
					var order = mf.order;
					var nosep = spacesBeforeParOpen != "";
					if(nosep) {
						out1 += "/*" + spacesBeforeParOpen + "*/";
					}
					var _g = 0;
					var _g1 = order.length;
					while(_g < _g1) {
						var i1 = _g++;
						if(nosep) {
							nosep = false;
						} else {
							out1 += " ";
						}
						var ord = order[i1];
						if(typeof(ord) == "number") {
							out1 += args[ord];
						} else {
							switch(ord[0]) {
							case 0:
								break;
							case 1:
								out1 += JSON.stringify(args[ord[1]]);
								break;
							case 2:
								var _q_pos = q.pos;
								q.pos = orig_pos;
								out1 += parsers_GmlExtMFunc.magicMap[ord[1]](editor,q);
								q.pos = _q_pos;
								break;
							case 3:
								out1 += tools_NativeString.insertAtPadLeft(args[ord[1]],ord[2]);
								break;
							case 4:
								out1 += tools_NativeString.insertAtPadRight(args[ord[1]],ord[2]);
								break;
							case 5:
								out1 += tools_NativeString.insertAtPadBoth(args[ord[1]],ord[2],ord[3]);
								break;
							}
						}
						out1 += " " + pre + (i1 + 1);
					}
					c = q.source.charCodeAt(q.pos);
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
						out1 += " ";
					}
					return out1;
				}
				break;
			default:
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					var name1 = q.source.substring(p,q.pos);
					var mf1 = nextMap[name1];
					if(mf1 == null) {
						mf1 = gml_GmlAPI.gmlMFuncs[name1];
					}
					if(mf1 != null) {
						out += q.source.substring(start,p);
						var call = proc(mf1);
						if(call == null) {
							return null;
						}
						out += call;
						start = q.pos;
					}
				}
			}
		}
		parsers_GmlExtMFunc.errorText = "Unclosed() after " + name;
		return null;
	};
	var out2 = "";
	var start1 = 0;
	while(q.get_loop()) {
		var p1 = q.pos;
		var c1 = q.source.charCodeAt(q.pos++);
		switch(c1) {
		case 35:
			var tmp;
			if(HxOverrides.substr(q.source,p1 + 1,5) == "mfunc") {
				var this1 = q.source.charCodeAt(p1 + 6);
				tmp = !(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90 || this1 >= 48 && this1 <= 57);
			} else {
				tmp = false;
			}
			if(tmp) {
				out2 += q.source.substring(start1,p1);
				q.pos += 6;
				q.skipSpaces0();
				var nameStart = q.pos;
				q.skipIdent();
				var name2 = q.source.substring(nameStart,q.pos);
				if(name2 == "") {
					parsers_GmlExtMFunc.errorText = "No name provided";
					return null;
				}
				q.skipSpaces0();
				if(q.source.charCodeAt(q.pos++) != 40) {
					parsers_GmlExtMFunc.errorText = "Expected a `(` after " + name2;
					return null;
				}
				var argFulls = [];
				var argMap = Object.create(null);
				var argsOK = false;
				var seenRest = false;
				q.skipSpaces0();
				if(q.source.charCodeAt(q.pos) == 41) {
					q.pos += 1;
					argsOK = true;
				} else {
					_hx_loop2: while(q.get_loop()) {
						var argStart = q.pos;
						q.skipSpaces0();
						var argNameStart = q.pos;
						if(seenRest) {
							parsers_GmlExtMFunc.errorText = "Can't have arguments after `...`" + (" argument in " + name2);
							return null;
						}
						if(q.source.charCodeAt(q.pos) == 46 && q.source.charCodeAt(q.pos + 1) == 46 && q.source.charCodeAt(q.pos + 2) == 46) {
							q.pos += 3;
							seenRest = true;
						} else {
							q.skipIdent();
						}
						var argName = q.source.substring(argNameStart,q.pos);
						if(argName == "") {
							parsers_GmlExtMFunc.errorText = "Expected an argument name for argument[" + argFulls.length + ("] in " + name2);
							return null;
						}
						q.skipSpaces0();
						var argFull = q.source.substring(argStart,q.pos);
						if(Object.prototype.hasOwnProperty.call(argMap,argName)) {
							parsers_GmlExtMFunc.errorText = "Argument redefinition for `" + argName + "` in `" + name2 + "`";
							return null;
						} else {
							argMap[argName] = argFulls.length;
						}
						argFulls.push(argFull);
						switch(q.source.charCodeAt(q.pos++)) {
						case 41:
							argsOK = true;
							break _hx_loop2;
						case 44:
							break;
						default:
							var code1 = q.source.charCodeAt(q.pos + (-1));
							parsers_GmlExtMFunc.errorText = "Unexpected character `" + String.fromCodePoint(code1) + ("` in arguments for " + name2);
							return null;
						}
					}
				}
				if(!argsOK) {
					parsers_GmlExtMFunc.errorText = "Expected a `(` after " + name2 + "'s arguments";
					return null;
				}
				var argStart1 = q.pos;
				var mfArgs = "";
				var order1 = [];
				_hx_loop3: while(q.get_loop()) {
					p1 = q.pos;
					c1 = q.source.charCodeAt(q.pos++);
					var s1;
					var s2;
					var s3;
					switch(c1) {
					case 10:case 13:
						switch(q.source.charCodeAt(p1 - 1)) {
						case 13:
							break;
						case 92:
							break;
						default:
							q.pos--;
							break _hx_loop3;
						}
						break;
					case 46:
						if(q.source.charCodeAt(q.pos) == 46 && q.source.charCodeAt(q.pos + 1) == 46) {
							q.pos += 2;
							var arg = q.source.substring(argStart1,p1);
							if(arg.trimRight() == "") {
								arg += "//";
							}
							mfArgs += "\n#macro " + name2 + "_mf" + order1.length + (" " + arg);
							var i2 = argMap["..."];
							if(i2 != null) {
								order1.push(i2);
							} else {
								parsers_GmlExtMFunc.errorText = "Using a `...` argument that is not defined.";
								return null;
							}
							argStart1 = q.pos;
						} else if(c1 == 95 || c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90) {
							q.skipIdent1();
							s1 = q.source.substring(p1,q.pos);
							var i3 = argMap[s1];
							if(i3 != null) {
								var arg1 = q.source.substring(argStart1,p1);
								if(arg1.trimRight() == "") {
									arg1 += "//";
								}
								mfArgs += "\n#macro " + name2 + "_mf" + order1.length + (" " + arg1);
								if(q.source.charCodeAt(q.pos) == 35 && q.source.charCodeAt(q.pos + 1) == 35 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 2))) {
									q.pos += 2;
									p1 = q.pos;
									q.skipIdent1();
									s2 = q.source.substring(p1,q.pos);
									if(Object.prototype.hasOwnProperty.call(argMap,s2)) {
										parsers_GmlExtMFunc.errorText = "Argument concatenation" + (" (" + s1 + "##" + s2 + ", in " + name2 + ") is not supported.");
										return null;
									}
									if(q.source.charCodeAt(q.pos) == 35 && q.source.charCodeAt(q.pos + 1) == 35 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 2))) {
										parsers_GmlExtMFunc.errorText = "Cannot concat more than two identifiers" + (" (" + s1 + "##" + s2 + "##, in #name)");
										return null;
									}
									order1.push([4,i3,s2]);
								} else {
									order1.push(i3);
								}
								argStart1 = q.pos;
							} else if(q.source.charCodeAt(q.pos) == 35 && q.source.charCodeAt(q.pos + 1) == 35 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 2))) {
								var arg2 = q.source.substring(argStart1,p1);
								if(arg2.trimRight() == "") {
									arg2 += "//";
								}
								mfArgs += "\n#macro " + name2 + "_mf" + order1.length + (" " + arg2);
								q.pos += 2;
								p1 = q.pos;
								q.skipIdent1();
								s2 = q.source.substring(p1,q.pos);
								i3 = argMap[s2];
								if(i3 == null) {
									parsers_GmlExtMFunc.errorText = "One of the concat arguments" + (" should be a variable (" + s1 + "##" + s2 + ", in " + name2 + ").");
									return null;
								}
								if(q.source.charCodeAt(q.pos) == 35 && q.source.charCodeAt(q.pos + 1) == 35 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 2))) {
									q.pos += 2;
									p1 = q.pos;
									q.skipIdent1();
									s3 = q.source.substring(p1,q.pos);
									if(Object.prototype.hasOwnProperty.call(argMap,s3)) {
										parsers_GmlExtMFunc.errorText = "Can only concat prefix+var+suffix" + (" (" + s1 + "##" + s2 + "##" + s3 + ", in " + name2 + ")");
										return null;
									}
									if(q.source.charCodeAt(q.pos) == 35 && q.source.charCodeAt(q.pos + 1) == 35 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 2))) {
										parsers_GmlExtMFunc.errorText = "Cannot concat more than two identifiers" + (" (" + s1 + "##" + s2 + "##, in " + name2 + ")");
										return null;
									}
									order1.push([5,i3,s1,s3]);
								} else {
									order1.push([3,i3,s1]);
								}
								argStart1 = q.pos;
							}
						}
						break;
					case 47:
						switch(q.source.charCodeAt(q.pos)) {
						case 42:case 47:
							parsers_GmlExtMFunc.errorText = "Comments are not supported in macro-functions, for " + name2;
							return null;
						default:
						}
						break;
					case 64:
						if(q.source.charCodeAt(q.pos) == 64 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 1))) {
							var arg3 = q.source.substring(argStart1,p1);
							if(arg3.trimRight() == "") {
								arg3 += "//";
							}
							mfArgs += "\n#macro " + name2 + "_mf" + order1.length + (" " + arg3);
							q.pos += 1;
							p1 = q.pos;
							q.skipIdent1();
							s1 = q.source.substring(p1,q.pos);
							if(q.source.charCodeAt(q.pos) == 35 && q.source.charCodeAt(q.pos + 1) == 35 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 2))) {
								parsers_GmlExtMFunc.errorText = "Can't concat to a literal (@@" + s1 + "## in " + name2 + ")";
								return null;
							}
							var i4 = argMap[s1];
							if(i4 != null) {
								order1.push([1,i4]);
							} else if(Object.prototype.hasOwnProperty.call(parsers_GmlExtMFunc.magicMap,s1)) {
								order1.push([2,s1]);
							} else {
								parsers_GmlExtMFunc.errorText = "Unknown variable/global for literal " + ("(" + s1 + " in " + name2 + ")");
								return null;
							}
							argStart1 = q.pos;
						} else {
							q.skipStringAuto(c1,version);
						}
						break;
					case 34:case 39:case 96:
						q.skipStringAuto(c1,version);
						break;
					default:
						if(c1 == 95 || c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90) {
							q.skipIdent1();
							s1 = q.source.substring(p1,q.pos);
							var i5 = argMap[s1];
							if(i5 != null) {
								var arg4 = q.source.substring(argStart1,p1);
								if(arg4.trimRight() == "") {
									arg4 += "//";
								}
								mfArgs += "\n#macro " + name2 + "_mf" + order1.length + (" " + arg4);
								if(q.source.charCodeAt(q.pos) == 35 && q.source.charCodeAt(q.pos + 1) == 35 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 2))) {
									q.pos += 2;
									p1 = q.pos;
									q.skipIdent1();
									s2 = q.source.substring(p1,q.pos);
									if(Object.prototype.hasOwnProperty.call(argMap,s2)) {
										parsers_GmlExtMFunc.errorText = "Argument concatenation" + (" (" + s1 + "##" + s2 + ", in " + name2 + ") is not supported.");
										return null;
									}
									if(q.source.charCodeAt(q.pos) == 35 && q.source.charCodeAt(q.pos + 1) == 35 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 2))) {
										parsers_GmlExtMFunc.errorText = "Cannot concat more than two identifiers" + (" (" + s1 + "##" + s2 + "##, in #name)");
										return null;
									}
									order1.push([4,i5,s2]);
								} else {
									order1.push(i5);
								}
								argStart1 = q.pos;
							} else if(q.source.charCodeAt(q.pos) == 35 && q.source.charCodeAt(q.pos + 1) == 35 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 2))) {
								var arg5 = q.source.substring(argStart1,p1);
								if(arg5.trimRight() == "") {
									arg5 += "//";
								}
								mfArgs += "\n#macro " + name2 + "_mf" + order1.length + (" " + arg5);
								q.pos += 2;
								p1 = q.pos;
								q.skipIdent1();
								s2 = q.source.substring(p1,q.pos);
								i5 = argMap[s2];
								if(i5 == null) {
									parsers_GmlExtMFunc.errorText = "One of the concat arguments" + (" should be a variable (" + s1 + "##" + s2 + ", in " + name2 + ").");
									return null;
								}
								if(q.source.charCodeAt(q.pos) == 35 && q.source.charCodeAt(q.pos + 1) == 35 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 2))) {
									q.pos += 2;
									p1 = q.pos;
									q.skipIdent1();
									s3 = q.source.substring(p1,q.pos);
									if(Object.prototype.hasOwnProperty.call(argMap,s3)) {
										parsers_GmlExtMFunc.errorText = "Can only concat prefix+var+suffix" + (" (" + s1 + "##" + s2 + "##" + s3 + ", in " + name2 + ")");
										return null;
									}
									if(q.source.charCodeAt(q.pos) == 35 && q.source.charCodeAt(q.pos + 1) == 35 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 2))) {
										parsers_GmlExtMFunc.errorText = "Cannot concat more than two identifiers" + (" (" + s1 + "##" + s2 + "##, in " + name2 + ")");
										return null;
									}
									order1.push([5,i5,s1,s3]);
								} else {
									order1.push([3,i5,s1]);
								}
								argStart1 = q.pos;
							}
						}
					}
				}
				var arg6 = q.source.substring(argStart1,p1);
				if(arg6.trimRight() == "") {
					arg6 += "//";
				}
				mfArgs += "\n#macro " + name2 + "_mf" + order1.length + (" " + arg6);
				var json = { args : argFulls, order : order1};
				var mf2 = new parsers_GmlExtMFunc(name2,json);
				nextMap[name2] = mf2;
				out2 += "//!#mfunc " + name2 + " " + JSON.stringify(json) + mfArgs;
				start1 = q.pos;
			} else if(p1 == 0 || q.source.charCodeAt(p1 - 1) == 10) {
				q.readContextName(null);
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c1,version);
			break;
		default:
			if(c1 == 95 || c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90) {
				q.skipIdent1();
				var name3 = q.source.substring(p1,q.pos);
				var mf3 = nextMap[name3];
				if(mf3 == null) {
					mf3 = gml_GmlAPI.gmlMFuncs[name3];
				}
				if(mf3 != null) {
					out2 += q.source.substring(start1,p1);
					var call1 = proc(mf3);
					if(call1 == null) {
						return null;
					}
					out2 += call1;
					start1 = q.pos;
				}
			}
		}
	}
	out2 += q.source.substring(start1,q.pos);
	return out2;
};
parsers_GmlExtMFunc.prototype = {
	__class__: parsers_GmlExtMFunc
};
var parsers_GmlHeader = function() { };
$hxClasses["parsers.GmlHeader"] = parsers_GmlHeader;
parsers_GmlHeader.__name__ = "parsers.GmlHeader";
parsers_GmlHeader.parse = function(code,version) {
	var mt;
	var name = null;
	if(version == 2) {
		mt = parsers_GmlHeader.rx2.exec(code);
		if(mt != null) {
			name = mt[2];
			if(mt[1] == "desc") {
				name = "|" + name.substring(1);
			}
		}
	} else {
		mt = parsers_GmlHeader.rx1.exec(code);
		if(mt != null) {
			name = mt[1];
			if(HxOverrides.cca(name,0) != 32) {
				name = "|" + name;
			}
		}
	}
	if(mt != null) {
		return { name : name, code : code.substring(mt[0].length)};
	} else {
		return { name : null, code : code};
	}
};
var parsers_GmlKeycode = function() { };
$hxClasses["parsers.GmlKeycode"] = parsers_GmlKeycode;
parsers_GmlKeycode.__name__ = "parsers.GmlKeycode";
parsers_GmlKeycode.initNames = function() {
	var r = [];
	r.length = 0;
	r.length = 256;
	var i = 65;
	while(i <= 90) {
		r[i] = String.fromCodePoint(i);
		++i;
	}
	i = 48;
	while(i <= 57) {
		r[i] = String.fromCodePoint(i);
		++i;
	}
	var add = function(k,s) {
		r[k] = s;
		parsers_GmlKeycode.comp.push({ name : s, value : s, score : 0, meta : "key", doc : "key" + k});
	};
	add(0,"vk_nokey");
	add(1,"vk_anykey");
	add(8,"vk_backspace");
	add(9,"vk_tab");
	add(13,"vk_return");
	add(16,"vk_shift");
	add(17,"vk_control");
	add(18,"vk_alt");
	add(19,"vk_pause");
	add(27,"vk_escape");
	add(32,"vk_space");
	add(33,"vk_pageup");
	add(34,"vk_pagedown");
	add(35,"vk_end");
	add(36,"vk_home");
	add(37,"vk_left");
	add(38,"vk_up");
	add(39,"vk_right");
	add(40,"vk_down");
	add(44,"vk_printscreen");
	add(45,"vk_insert");
	add(46,"vk_delete");
	add(96,"vk_numpad0");
	add(97,"vk_numpad1");
	add(98,"vk_numpad2");
	add(99,"vk_numpad3");
	add(100,"vk_numpad4");
	add(101,"vk_numpad5");
	add(102,"vk_numpad6");
	add(103,"vk_numpad7");
	add(104,"vk_numpad8");
	add(105,"vk_numpad9");
	add(106,"vk_multiply");
	add(107,"vk_add");
	add(109,"vk_subtract");
	add(110,"vk_decimal");
	add(111,"vk_divide");
	add(112,"vk_f1");
	add(113,"vk_f2");
	add(114,"vk_f3");
	add(115,"vk_f4");
	add(116,"vk_f5");
	add(117,"vk_f6");
	add(118,"vk_f7");
	add(119,"vk_f8");
	add(120,"vk_f9");
	add(121,"vk_f10");
	add(122,"vk_f11");
	add(123,"vk_f12");
	add(160,"vk_lshift");
	add(161,"vk_rshift");
	add(162,"vk_lcontrol");
	add(163,"vk_rcontrol");
	add(164,"vk_lalt");
	add(165,"vk_ralt");
	return r;
};
parsers_GmlKeycode.initCodes = function(names) {
	var r = Object.create(null);
	var _g = 0;
	var _g1 = names.length;
	while(_g < _g1) {
		var k = _g++;
		var name = names[k];
		if(name != null) {
			r[name] = k;
		}
	}
	var _g2 = 65;
	var _g3 = 91;
	while(_g2 < _g3) {
		var k1 = _g2++;
		r[String.fromCodePoint(k1 + 32)] = k1;
	}
	return r;
};
parsers_GmlKeycode.toName = function(k) {
	var r = parsers_GmlKeycode.names[k];
	if(r == null) {
		return "key" + k;
	} else {
		return r;
	}
};
var parsers_GmlMultifile = function() { };
$hxClasses["parsers.GmlMultifile"] = parsers_GmlMultifile;
parsers_GmlMultifile.__name__ = "parsers.GmlMultifile";
parsers_GmlMultifile.split = function(gmlCode,first) {
	var q = new parsers_GmlReader(gmlCode);
	var start = 0;
	var out = [];
	var scriptName = first;
	var errors = "";
	var version = gml_GmlAPI.version;
	var flush = function(till) {
		if(start > 0 || till > start) {
			var next = q.source.substring(start,till);
			next = next.trimRight();
			out.push({ name : scriptName, code : next});
		}
	};
	var row = 1;
	while(q.get_loop()) {
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 10:
			++row;
			break;
		case 35:
			if(q.pos == 1 || q.source.charCodeAt(q.pos - 2) == 10) {
				if(HxOverrides.substr(q.source,q.pos,6) == "define") {
					flush(q.pos - 1);
					q.pos += 6;
					q.skipSpaces0();
					var p = q.pos;
					q.skipIdent1();
					scriptName = q.source.substring(p,q.pos);
					if(scriptName == "") {
						errors += "Expected a script name at line " + row + ".\n";
					}
					q.skipLine();
					p = q.pos;
					q.skipLineEnd();
					if(q.pos > p) {
						++row;
					}
					start = q.pos;
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				row += q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			row += q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	flush(q.pos);
	if(errors != "") {
		parsers_GmlMultifile.errorText = errors;
		return null;
	} else {
		return out;
	}
};
var parsers_GmlObjectProperties = function() { };
$hxClasses["parsers.GmlObjectProperties"] = parsers_GmlObjectProperties;
parsers_GmlObjectProperties.__name__ = "parsers.GmlObjectProperties";
parsers_GmlObjectProperties.parse = function(code,v,fn,vfn) {
	var q = new parsers_GmlReader(code);
	var state = 1;
	var key = null;
	var type = null;
	var params = null;
	var err;
	var val;
	var s;
	var call = function(v1) {
		if(type != null) {
			var guid = null;
			while(q.get_loop()) {
				switch(q.source.charCodeAt(q.pos)) {
				case 9:case 32:case 59:
					q.pos += 1;
					continue;
				}
				break;
			}
			if(q.source.charCodeAt(q.pos) == 47 && q.source.charCodeAt(q.pos + 1) == 47) {
				var start = q.pos += 2;
				q.skipLine();
				var raw = q.source.substring(start,q.pos).trim();
				if(yy__$YyGUID_YyGUID_$Impl_$.test.test(raw)) {
					guid = raw;
				}
			}
			err = vfn(key,type,guid,params,v1);
		} else {
			err = fn(key,v1);
		}
	};
	while(q.get_loop()) {
		var c = q.source.charCodeAt(q.pos);
		var start1 = [];
		var readString = (function(start2) {
			return function() {
				var c1 = q.source.charCodeAt(q.pos);
				start2[0] = q.pos++;
				var s1 = null;
				val = null;
				switch(c1) {
				case 34:
					if(v == 2) {
						q.skipString2();
						s1 = code.substring(start2[0],q.pos);
						try {
							s1 = JSON.parse(s1);
						} catch( x ) {
							var s2 = "Invalid string, " + Std.string(((x) instanceof js__$Boot_HaxeError) ? x.val : x);
							var this1 = tools_NativeString.offsetToPos(code,start2[0]);
							return "[Ln " + (this1.row + 1) + ", col " + (this1.column + 1) + "]" + " " + s2;
						}
					} else {
						q.skipString1(34);
					}
					break;
				case 39:
					if(v != 2) {
						q.skipString1(39);
					} else {
						var this2 = tools_NativeString.offsetToPos(code,start2[0]);
						return "[Ln " + (this2.row + 1) + ", col " + (this2.column + 1) + "]" + " " + "Unexpected '";
					}
					break;
				case 64:
					if(v == 2) {
						start2[0]++;
						c1 = q.source.charCodeAt(q.pos++);
						if(c1 == 34 || c1 == 39) {
							q.skipString1(c1);
						} else {
							var s3 = "Unexpected " + String.fromCodePoint(c1);
							var this3 = tools_NativeString.offsetToPos(code,start2[0]);
							return "[Ln " + (this3.row + 1) + ", col " + (this3.column + 1) + "]" + " " + s3;
						}
					} else {
						var this4 = tools_NativeString.offsetToPos(code,start2[0]);
						return "[Ln " + (this4.row + 1) + ", col " + (this4.column + 1) + "]" + " " + "Unexpected @";
					}
					break;
				}
				if(s1 == null) {
					s1 = code.substring(start2[0] + 1,q.pos - 1);
				}
				val = parsers_GmlObjectPropertiesValue.CString(s1);
				return null;
			};
		})(start1);
		switch(c) {
		case 35:
			if(q.source.charCodeAt(q.pos + 1) == 34) {
				q.pos += 1;
				s = readString();
				if(s != null) {
					return s;
				}
				if(val._hx_index == 1) {
					val = parsers_GmlObjectPropertiesValue.EString(val.s);
				}
				switch(state) {
				case 4:
					call(val);
					if(err != null) {
						var this5 = tools_NativeString.offsetToPos(code,start1[0]);
						return "[Ln " + (this5.row + 1) + ", col " + (this5.column + 1) + "]" + " " + err;
					}
					state = 1;
					key = null;
					break;
				case 7:
					params.push(val);
					state = 8;
					break;
				default:
					var this6 = tools_NativeString.offsetToPos(code,start1[0]);
					return "[Ln " + (this6.row + 1) + ", col " + (this6.column + 1) + "]" + " " + "Unexpected code string";
				}
			} else if((c >= 48 && c <= 57 || c == 46 || c == 45) && (state == 4 || state == 7)) {
				start1[0] = q.pos;
				q.pos += 1;
				q.skipNumber();
				s = code.substring(start1[0],q.pos);
				var f = parseFloat(s);
				if(isNaN(f)) {
					var this7 = tools_NativeString.offsetToPos(code,start1[0]);
					return "[Ln " + (this7.row + 1) + ", col " + (this7.column + 1) + "]" + " " + ("Invalid number " + s);
				}
				val = parsers_GmlObjectPropertiesValue.Number(f);
				if(state == 7) {
					params.push(val);
					state = 8;
				} else {
					call(val);
					if(err != null) {
						var this8 = tools_NativeString.offsetToPos(code,start1[0]);
						return "[Ln " + (this8.row + 1) + ", col " + (this8.column + 1) + "]" + " " + err;
					}
					state = 1;
					key = null;
				}
			} else if((c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) && (state == 4 || state == 1 || state == 5 || state == 7)) {
				start1[0] = q.pos++;
				while(q.get_loop()) {
					c = q.source.charCodeAt(q.pos);
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
						q.pos += 1;
					} else {
						break;
					}
				}
				s = code.substring(start1[0],q.pos);
				switch(state) {
				case 4:
					val = parsers_GmlObjectPropertiesValue.Ident(s);
					call(val);
					if(err != null) {
						var this9 = tools_NativeString.offsetToPos(code,start1[0]);
						return "[Ln " + (this9.row + 1) + ", col " + (this9.column + 1) + "]" + " " + err;
					}
					state = 1;
					key = null;
					break;
				case 5:
					type = s;
					state = 6;
					break;
				case 7:
					params.push(parsers_GmlObjectPropertiesValue.Ident(s));
					state = 8;
					break;
				default:
					key = s;
					type = null;
					params = null;
					state = 3;
				}
			} else {
				var p = q.pos;
				var s4 = "Unexpected " + String.fromCodePoint(c);
				var this10 = tools_NativeString.offsetToPos(code,p);
				return "[Ln " + (this10.row + 1) + ", col " + (this10.column + 1) + "]" + " " + s4;
			}
			break;
		case 40:
			var start3 = ++q.pos;
			q.skipVarExpr(q.version,41);
			if(q.get_eof()) {
				var this11 = tools_NativeString.offsetToPos(code,start3);
				return "[Ln " + (this11.row + 1) + ", col " + (this11.column + 1) + "]" + " " + "Unclosed ()";
			}
			var val1 = parsers_GmlObjectPropertiesValue.EString(q.source.substring(start3,q.pos++));
			switch(state) {
			case 4:
				call(val1);
				if(err != null) {
					var this12 = tools_NativeString.offsetToPos(code,start3);
					return "[Ln " + (this12.row + 1) + ", col " + (this12.column + 1) + "]" + " " + err;
				}
				state = 1;
				key = null;
				break;
			case 7:
				params.push(val1);
				state = 8;
				break;
			default:
				var this13 = tools_NativeString.offsetToPos(code,start3);
				return "[Ln " + (this13.row + 1) + ", col " + (this13.column + 1) + "]" + " " + "Unexpected code literal";
			}
			break;
		case 44:
			if(state == 8) {
				state = 7;
				q.pos += 1;
			} else {
				var this14 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this14.row + 1) + ", col " + (this14.column + 1) + "]" + " " + "Unexpected ,";
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos + 1)) {
			case 42:
				q.pos += 2;
				q.skipComment();
				break;
			case 47:
				q.pos += 2;
				q.skipLine();
				break;
			default:
				var this15 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this15.row + 1) + ", col " + (this15.column + 1) + "]" + " " + "Unexpected /";
			}
			break;
		case 58:
			if(state == 3 && vfn != null) {
				state = 5;
				q.pos += 1;
			} else {
				var this16 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this16.row + 1) + ", col " + (this16.column + 1) + "]" + " " + "Unexpected :";
			}
			break;
		case 9:case 10:case 13:case 32:case 59:
			q.pos += 1;
			break;
		case 60:
			if(state == 6) {
				state = 7;
				params = [];
				q.pos += 1;
			} else {
				var this17 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this17.row + 1) + ", col " + (this17.column + 1) + "]" + " " + "Unexpected <";
			}
			break;
		case 61:
			switch(state) {
			case 2:case 3:case 6:
				state = 4;
				q.pos += 1;
				break;
			default:
				var this18 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this18.row + 1) + ", col " + (this18.column + 1) + "]" + " " + "Unexpected =";
			}
			break;
		case 62:
			if(state == 8) {
				state = 2;
				q.pos += 1;
			} else {
				var this19 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this19.row + 1) + ", col " + (this19.column + 1) + "]" + " " + "Unexpected >";
			}
			break;
		case 91:
			if(state != 4) {
				var this20 = tools_NativeString.offsetToPos(code,q.pos);
				return "[Ln " + (this20.row + 1) + ", col " + (this20.column + 1) + "]" + " " + "Unexpected [";
			}
			start1[0] = q.pos++;
			state = 7;
			var vals = [];
			_hx_loop3: while(q.get_loop()) {
				c = q.source.charCodeAt(q.pos);
				switch(c) {
				case 9:case 10:case 13:case 32:
					q.pos += 1;
					break;
				case 44:
					if(state != 8) {
						var this21 = tools_NativeString.offsetToPos(code,q.pos);
						return "[Ln " + (this21.row + 1) + ", col " + (this21.column + 1) + "]" + " " + "Unexpected ,";
					}
					q.pos += 1;
					state = 7;
					break;
				case 93:
					if(state != 8) {
						var this22 = tools_NativeString.offsetToPos(code,q.pos);
						return "[Ln " + (this22.row + 1) + ", col " + (this22.column + 1) + "]" + " " + "Unexpected ]";
					}
					q.pos += 1;
					state = 4;
					break _hx_loop3;
				case 34:case 39:case 64:case 96:
					s = readString();
					if(s != null) {
						return s;
					}
					vals.push(val);
					state = 8;
					break;
				default:
					var p1 = q.pos;
					var s5 = "Unexpected " + String.fromCodePoint(c);
					var this23 = tools_NativeString.offsetToPos(code,p1);
					return "[Ln " + (this23.row + 1) + ", col " + (this23.column + 1) + "]" + " " + s5;
				}
			}
			if(state != 4) {
				var this24 = tools_NativeString.offsetToPos(code,start1[0]);
				return "[Ln " + (this24.row + 1) + ", col " + (this24.column + 1) + "]" + " " + "Unclosed [";
			}
			val = parsers_GmlObjectPropertiesValue.Values(vals);
			call(val);
			if(err != null) {
				var this25 = tools_NativeString.offsetToPos(code,start1[0]);
				return "[Ln " + (this25.row + 1) + ", col " + (this25.column + 1) + "]" + " " + err;
			}
			state = 1;
			key = null;
			break;
		case 34:case 39:case 64:case 96:
			s = readString();
			if(s != null) {
				return s;
			}
			switch(state) {
			case 4:
				call(val);
				if(err != null) {
					var this26 = tools_NativeString.offsetToPos(code,start1[0]);
					return "[Ln " + (this26.row + 1) + ", col " + (this26.column + 1) + "]" + " " + err;
				}
				state = 1;
				key = null;
				break;
			case 7:
				params.push(val);
				state = 8;
				break;
			default:
				var this27 = tools_NativeString.offsetToPos(code,start1[0]);
				return "[Ln " + (this27.row + 1) + ", col " + (this27.column + 1) + "]" + " " + "Unexpected string";
			}
			break;
		default:
			if((c >= 48 && c <= 57 || c == 46 || c == 45) && (state == 4 || state == 7)) {
				start1[0] = q.pos;
				q.pos += 1;
				q.skipNumber();
				s = code.substring(start1[0],q.pos);
				var f1 = parseFloat(s);
				if(isNaN(f1)) {
					var this28 = tools_NativeString.offsetToPos(code,start1[0]);
					return "[Ln " + (this28.row + 1) + ", col " + (this28.column + 1) + "]" + " " + ("Invalid number " + s);
				}
				val = parsers_GmlObjectPropertiesValue.Number(f1);
				if(state == 7) {
					params.push(val);
					state = 8;
				} else {
					call(val);
					if(err != null) {
						var this29 = tools_NativeString.offsetToPos(code,start1[0]);
						return "[Ln " + (this29.row + 1) + ", col " + (this29.column + 1) + "]" + " " + err;
					}
					state = 1;
					key = null;
				}
			} else if((c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) && (state == 4 || state == 1 || state == 5 || state == 7)) {
				start1[0] = q.pos++;
				while(q.get_loop()) {
					c = q.source.charCodeAt(q.pos);
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
						q.pos += 1;
					} else {
						break;
					}
				}
				s = code.substring(start1[0],q.pos);
				switch(state) {
				case 4:
					val = parsers_GmlObjectPropertiesValue.Ident(s);
					call(val);
					if(err != null) {
						var this30 = tools_NativeString.offsetToPos(code,start1[0]);
						return "[Ln " + (this30.row + 1) + ", col " + (this30.column + 1) + "]" + " " + err;
					}
					state = 1;
					key = null;
					break;
				case 5:
					type = s;
					state = 6;
					break;
				case 7:
					params.push(parsers_GmlObjectPropertiesValue.Ident(s));
					state = 8;
					break;
				default:
					key = s;
					type = null;
					params = null;
					state = 3;
				}
			} else {
				var p2 = q.pos;
				var s6 = "Unexpected " + String.fromCodePoint(c);
				var this31 = tools_NativeString.offsetToPos(code,p2);
				return "[Ln " + (this31.row + 1) + ", col " + (this31.column + 1) + "]" + " " + s6;
			}
		}
	}
	return null;
};
var parsers_GmlObjectPropertiesValue = $hxEnums["parsers.GmlObjectPropertiesValue"] = { __ename__ : true, __constructs__ : ["Number","CString","EString","Ident","Values"]
	,Number: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"parsers.GmlObjectPropertiesValue",toString:$estr}; },$_.__params__ = ["f"],$_)
	,CString: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"parsers.GmlObjectPropertiesValue",toString:$estr}; },$_.__params__ = ["s"],$_)
	,EString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"parsers.GmlObjectPropertiesValue",toString:$estr}; },$_.__params__ = ["s"],$_)
	,Ident: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"parsers.GmlObjectPropertiesValue",toString:$estr}; },$_.__params__ = ["s"],$_)
	,Values: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"parsers.GmlObjectPropertiesValue",toString:$estr}; },$_.__params__ = ["a"],$_)
};
var parsers_GmlParseAPI = function() { };
$hxClasses["parsers.GmlParseAPI"] = parsers_GmlParseAPI;
parsers_GmlParseAPI.__name__ = "parsers.GmlParseAPI";
parsers_GmlParseAPI.loadStd = function(src,data) {
	var stdKind = data.kind;
	var stdComp = data.comp;
	var stdDoc = data.doc;
	var ukSpelling = data.ukSpelling;
	var kindPrefix = data.kindPrefix != null ? data.kindPrefix + "." : "";
	var version = data.version != null ? data.version : 0;
	var lwArg0 = data.lwArg0;
	var lwArg1 = data.lwArg1;
	var lwInst = data.lwInst;
	var lwConst = data.lwConst;
	var lwFlags = data.lwFlags;
	tools_ERegTools.each(new EReg("^(:*(\\w+)\\((.*?)\\))([ ~\\$#*@&£!:]*);?[ \t]*$","gm"),src,function(rx) {
		var comp = rx.matched(1);
		var name = rx.matched(2);
		var args = rx.matched(3);
		var flags = rx.matched(4);
		if(flags.includes("&")) {
			return;
		}
		var orig = name;
		var show = true;
		var doc = gml_GmlFuncDoc.parse(comp);
		if(version == 2) {
			if(ukSpelling) {
				if(flags.indexOf("$") >= 0) {
					show = false;
				}
			} else if(flags.indexOf("£") >= 0) {
				show = false;
			}
		} else if(version != 0) {
			var usn = name.replace("colour","color");
			if(ukSpelling) {
				orig = usn;
			} else {
				name = usn;
			}
			if(orig != name) {
				stdKind[orig] = "function";
				stdDoc[orig] = doc;
			}
		}
		if(lwInst != null && (HxOverrides.cca(comp,0) == 58 || flags.includes("@"))) {
			lwInst[name] = true;
			if(orig != name) {
				lwInst[orig] = true;
			}
		}
		if(lwArg0 != null) {
			var argc;
			if(args.includes("...") || args.includes("?")) {
				argc = -1;
			} else if(args.includes(",")) {
				argc = args.split(",").length;
			} else {
				argc = args.trim().length > 0 ? 1 : 0;
			}
			var arg0;
			var arg1;
			if(argc == -1) {
				arg0 = 0;
				arg1 = 2147483647;
			} else {
				arg0 = argc;
				arg1 = argc;
			}
			lwArg0[name] = arg0;
			lwArg1[name] = arg1;
			if(orig != name) {
				lwArg0[orig] = arg0;
				lwArg1[orig] = arg1;
			}
		}
		if(Object.prototype.hasOwnProperty.call(stdKind,name)) {
			return;
		}
		stdKind[name] = kindPrefix + "function";
		if(show) {
			stdComp.push({ name : name, value : name, score : 0, meta : "function", doc : comp});
		}
		stdDoc[name] = doc;
	});
	tools_ERegTools.each(new EReg("^((\\w+)(\\[[^\\]]*\\])?([~\\*\\$£#@&]*))(?::\\w+)?;?[ \t]*$","gm"),src,function(rx1) {
		var comp1 = rx1.matched(1);
		var name1 = rx1.matched(2);
		var flags1 = rx1.matched(4);
		if(flags1.includes("&")) {
			return;
		}
		var isConst = flags1.indexOf("#") >= 0;
		var kind = isConst ? "constant" : "variable";
		var orig1 = name1;
		if(version != 2 && version != 0) {
			var usn1 = name1.replace("colour","color");
			if(ukSpelling) {
				orig1 = usn1;
			} else {
				name1 = usn1;
			}
			if(orig1 != name1) {
				stdKind[orig1] = kindPrefix + kind;
			}
		}
		if(isConst && lwConst != null) {
			lwConst[name1] = true;
			if(orig1 != name1) {
				lwConst[orig1] = true;
			}
		}
		if(lwFlags != null) {
			var lwBits = 0;
			if(flags1.includes("*")) {
				lwBits = 1;
			}
			if(rx1.matched(3) != null) {
				lwBits |= 2;
			}
			if(flags1.includes("@")) {
				lwBits |= 4;
			}
			lwFlags[name1] = lwBits;
			if(orig1 != name1) {
				lwFlags[orig1] = lwBits;
			}
		}
		stdKind[name1] = kindPrefix + kind;
		stdComp.push({ name : name1, value : name1, score : 0, meta : kind, doc : comp1});
	});
	tools_ERegTools.each(new EReg("^(\\w+)[ \t]*=[ \t]*(.+)$","gm"),src,function(rx2) {
		var name2 = rx2.matched(1);
		var expr = rx2.matched(2);
		stdKind[name2] = kindPrefix + "constant";
		stdComp.push({ name : name2, value : name2, score : 0, meta : "constant", doc : expr});
	});
};
parsers_GmlParseAPI.loadAssets = function(src,out) {
	var stdKind = out.kind;
	var stdComp = out.comp;
	tools_ERegTools.each(new EReg("(\\w+)","g"),src,function(rx) {
		var name = rx.matched(1);
		stdKind[name] = "asset";
		stdComp.push({ name : name, value : name, score : 0, meta : "asset", doc : null});
	});
};
var tools_StringReader = function(src) {
	this.source = src;
	this.length = this.source.length;
	this.pos = 0;
};
$hxClasses["tools.StringReader"] = tools_StringReader;
tools_StringReader.__name__ = "tools.StringReader";
tools_StringReader.prototype = {
	__class__: tools_StringReader
};
var parsers_GmlReader = function(gmlCode,version) {
	tools_StringReader.call(this,gmlCode);
	this.version = version != null ? version : gml_Project.current.version;
};
$hxClasses["parsers.GmlReader"] = parsers_GmlReader;
parsers_GmlReader.__name__ = "parsers.GmlReader";
parsers_GmlReader.skipComment_1 = function(s,p) {
	if(s.substr(p,5) == "event") {
		return true;
	}
	switch(s.substr(p,6)) {
	case "action":case "moment":case "target":
		return true;
	}
	if(s.substr(p,7) == "section") {
		return true;
	}
	return false;
};
parsers_GmlReader.__super__ = tools_StringReader;
parsers_GmlReader.prototype = $extend(tools_StringReader.prototype,{
	get_loop: function() {
		return this.pos < this.length;
	}
	,get_eof: function() {
		return this.pos >= this.length;
	}
	,skipLine: function() {
		while(this.pos < this.length) {
			switch(this.source.charCodeAt(this.pos)) {
			case 10:case 13:
				break;
			default:
				this.pos += 1;
				continue;
			}
			break;
		}
	}
	,skipLineEnd: function() {
		if(this.pos < this.length) {
			switch(this.source.charCodeAt(this.pos)) {
			case 10:
				this.pos += 1;
				break;
			case 13:
				this.pos += 1;
				if(this.source.charCodeAt(this.pos) == 10) {
					this.pos += 1;
				}
				break;
			}
		}
	}
	,skipComment: function() {
		var n = 0;
		while(this.pos < this.length) {
			var c = this.source.charCodeAt(this.pos++);
			if(c == 10) {
				++n;
				if(this.source.charCodeAt(this.pos) == 35 && parsers_GmlReader.skipComment_1(this.source,this.pos + 1)) {
					break;
				}
			} else if(c == 42 && this.source.charCodeAt(this.pos) == 47) {
				this.pos += 1;
				break;
			}
		}
		return n;
	}
	,skipString1: function(qc) {
		var c = this.source.charCodeAt(this.pos);
		var n = 0;
		while(c != qc && this.pos < this.length) {
			this.pos += 1;
			c = this.source.charCodeAt(this.pos);
			if(c == 10) {
				++n;
			}
		}
		if(this.pos < this.length) {
			this.pos += 1;
		}
		return n;
	}
	,skipString2: function() {
		var n = 0;
		var c = this.source.charCodeAt(this.pos);
		while(c != 34 && this.pos < this.length) {
			if(c == 92) {
				this.pos += 1;
				c = this.source.charCodeAt(this.pos);
				switch(c) {
				case 10:
					++n;
					this.pos += 1;
					break;
				case 117:
					this.pos += 4;
					break;
				case 120:
					this.pos += 2;
					break;
				default:
					this.pos += 1;
				}
			} else {
				this.pos += 1;
			}
			c = this.source.charCodeAt(this.pos);
		}
		if(this.pos < this.length) {
			this.pos += 1;
		}
		return n;
	}
	,skipNumber: function(canDot) {
		if(canDot == null) {
			canDot = true;
		}
		var c = this.source.charCodeAt(this.pos);
		while(this.pos < this.length) {
			if(c == 46) {
				if(canDot) {
					canDot = false;
					this.pos += 1;
				} else {
					break;
				}
			} else if(c >= 48 && c <= 57) {
				this.pos += 1;
			} else {
				break;
			}
			c = this.source.charCodeAt(this.pos);
		}
	}
	,skipHex: function() {
		var c = this.source.charCodeAt(this.pos);
		while(this.pos < this.length) if(tools__$CharCode_CharCode_$Impl_$.isHex(c)) {
			this.pos += 1;
			c = this.source.charCodeAt(this.pos);
		} else {
			break;
		}
	}
	,skipStringAuto: function(startquote,version) {
		switch(startquote) {
		case 34:
			if(version == 2) {
				return this.skipString2();
			} else {
				return this.skipString1(34);
			}
			break;
		case 39:
			if(version != 2) {
				return this.skipString1(39);
			} else {
				return 0;
			}
			break;
		case 64:
			if(version == 2) {
				var c = this.source.charCodeAt(this.pos++);
				if(c == 34 || c == 39) {
					return this.skipString1(c);
				} else {
					return 0;
				}
			} else {
				return 0;
			}
			break;
		case 96:
			return this.skipString1(96);
		default:
			return 0;
		}
	}
	,skipSpaces0: function() {
		while(this.get_loop()) {
			switch(this.source.charCodeAt(this.pos)) {
			case 9:case 32:
				this.pos += 1;
				continue;
			}
			break;
		}
	}
	,skipSpaces1: function() {
		while(this.get_loop()) {
			switch(this.source.charCodeAt(this.pos)) {
			case 9:case 10:case 13:case 32:
				this.pos += 1;
				continue;
			}
			break;
		}
	}
	,skipSpaces1_local: function() {
		while(this.pos < this.length) {
			switch(this.source.charCodeAt(this.pos)) {
			case 9:case 10:case 13:case 32:
				this.pos += 1;
				continue;
			}
			break;
		}
	}
	,skipSpaces1x: function(till) {
		_hx_loop1: while(this.pos < till) switch(this.source.charCodeAt(this.pos)) {
		case 9:case 10:case 13:case 32:
			this.pos += 1;
			break;
		default:
			break _hx_loop1;
		}
	}
	,skipIdent: function() {
		var this1 = this.source.charCodeAt(this.pos);
		if(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90) {
			while(this.pos < this.length) {
				var this2 = this.source.charCodeAt(this.pos);
				if(this2 == 95 || this2 >= 97 && this2 <= 122 || this2 >= 65 && this2 <= 90 || this2 >= 48 && this2 <= 57) {
					this.pos += 1;
				} else {
					break;
				}
			}
		}
	}
	,skipIdent1: function() {
		while(this.pos < this.length) {
			var this1 = this.source.charCodeAt(this.pos);
			if(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90 || this1 >= 48 && this1 <= 57) {
				this.pos += 1;
			} else {
				break;
			}
		}
	}
	,skipEventName: function() {
		while(this.pos < this.length) {
			var c = this.source.charCodeAt(this.pos);
			if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58) {
				this.pos += 1;
			} else {
				break;
			}
		}
	}
	,readContextName: function(name) {
		var _gthis = this;
		var p = this.pos;
		this.skipIdent1();
		var preproc = this.source.substring(p - 1,this.pos);
		switch(preproc) {
		case "#define":case "#event":case "#moment":case "#target":
			this.skipSpaces0();
			p = this.pos;
			switch(preproc) {
			case "#event":
				this.skipEventName();
				if(name != null) {
					return name + "(" + _gthis.source.substring(p,_gthis.pos) + ")";
				} else {
					return _gthis.source.substring(p,_gthis.pos);
				}
				break;
			case "#moment":
				this.skipIdent1();
				if(name != null) {
					return name + "(" + _gthis.source.substring(p,_gthis.pos) + ")";
				} else {
					return _gthis.source.substring(p,_gthis.pos);
				}
				break;
			case "#define":case "#target":
				this.skipIdent1();
				return _gthis.source.substring(p,_gthis.pos);
			default:
				return null;
			}
			break;
		default:
			return null;
		}
	}
	,skipNops: function(till) {
		var n = 0;
		if(till == null) {
			till = this.length;
		}
		_hx_loop1: while(this.pos < till) switch(this.source.charCodeAt(this.pos)) {
		case 10:
			this.pos += 1;
			++n;
			break;
		case 9:case 13:case 32:
			this.pos += 1;
			break;
		case 47:
			switch(this.source.charCodeAt(this.pos + 1)) {
			case 42:
				this.pos += 2;
				n += this.skipComment();
				break;
			case 47:
				this.skipLine();
				break;
			default:
				break _hx_loop1;
			}
			break;
		default:
			break _hx_loop1;
		}
		return n;
	}
	,skipVarExpr: function(v,sep) {
		var depth = 0;
		var n = 0;
		_hx_loop1: while(this.pos < this.length) {
			var p = this.pos;
			var c = this.source.charCodeAt(this.pos++);
			if(c == sep && depth == 0) {
				this.pos = p;
				break;
			} else {
				switch(c) {
				case 10:
					++n;
					break;
				case 9:case 13:case 32:
					break;
				case 35:
					if(p == 0 || this.source.charCodeAt(p - 1) == 10) {
						if(this.readContextName(null) != null) {
							this.pos = p;
							break _hx_loop1;
						}
					}
					break;
				case 47:
					switch(this.source.charCodeAt(this.pos)) {
					case 42:
						this.pos += 1;
						this.skipComment();
						break;
					case 47:
						this.skipLine();
						break;
					default:
					}
					break;
				case 59:
					this.pos = p;
					break _hx_loop1;
				case 40:case 91:case 123:
					++depth;
					break;
				case 41:case 93:case 125:
					--depth;
					break;
				case 34:case 39:case 64:case 96:
					this.skipStringAuto(c,v);
					break;
				default:
					if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
						this.skipIdent1();
						if(gml_GmlAPI.kwFlow[this.source.substring(p,this.pos)]) {
							this.pos = p;
							break _hx_loop1;
						}
					}
				}
			}
		}
		return n;
	}
	,skipTypeParams: function(till) {
		if(till == null) {
			till = this.length;
		}
		var p2 = this.pos;
		var depth = 1;
		this.pos += 1;
		_hx_loop1: while(this.pos < till) {
			var c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 32:
				break;
			case 44:
				break;
			case 60:
				++depth;
				break;
			case 62:
				if(--depth <= 0) {
					break _hx_loop1;
				}
				break;
			default:
				if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57)) {
					break _hx_loop1;
				}
			}
		}
		if(depth > 0) {
			this.pos = p2;
			return false;
		} else {
			return true;
		}
	}
	,skipCommon_inline: function() {
		switch(this.source.charCodeAt(this.pos)) {
		case 47:
			switch(this.source.charCodeAt(this.pos + 1)) {
			case 42:
				this.pos += 2;
				return this.skipComment();
			case 47:
				this.pos += 2;
				this.skipLine();
				return 0;
			default:
				return -1;
			}
			break;
		case 34:case 39:case 64:case 96:
			this.pos += 1;
			return this.skipStringAuto(this.source.charCodeAt(this.pos + (-1)),this.version);
		default:
			return -1;
		}
	}
	,skipVars: function(fn,v,isArgs) {
		var d = { name : null, name0 : 0, name1 : 0, type : null, type0 : 0, type1 : 0, expr0 : 0, expr1 : 0, opt : false};
		this.skipNops();
		var till;
		if(isArgs) {
			till = this.source.indexOf("\n",this.pos);
			if(till < 0) {
				till = this.length;
			}
		} else {
			till = this.length;
		}
		while(this.pos < till) {
			var c = this.source.charCodeAt(this.pos);
			if(!(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
				break;
			}
			var p = this.pos;
			d.name0 = p;
			if(this.source.charCodeAt(this.pos) == 63) {
				d.opt = true;
				this.pos += 1;
				this.skipNops();
			} else {
				d.opt = false;
			}
			this.skipIdent1();
			d.name1 = this.pos;
			d.name = this.source.substring(p,this.pos);
			this.skipSpaces1x(till);
			d.type0 = this.pos;
			if(this.source.charCodeAt(this.pos) == 58) {
				this.pos += 1;
				this.skipSpaces1x(till);
				var p1 = this.pos;
				this.skipIdent1();
				if(this.pos > p1) {
					if(this.source.charCodeAt(this.pos) == 60) {
						this.skipTypeParams(till);
					}
					d.type = this.source.substring(p1,this.pos);
				} else {
					d.type = null;
				}
			} else if(this.source.charCodeAt(this.pos) == 47 && this.source.charCodeAt(this.pos + 1) == 42) {
				p = this.pos;
				this.pos += 2;
				this.skipComment();
				var mt = parsers_GmlReader.rxVarType.exec(this.source.substring(p,this.pos));
				d.type = mt != null ? mt[1] : null;
			} else {
				d.type = null;
			}
			d.type1 = this.pos;
			this.skipSpaces1x(till);
			if(this.source.charCodeAt(this.pos) == 61) {
				this.pos += 1;
				this.skipSpaces1();
				d.expr0 = this.pos;
				this.skipVarExpr(v,44);
			} else {
				d.expr0 = this.pos;
			}
			d.expr1 = this.pos;
			this.skipNops(till);
			fn(d);
			if(this.source.charCodeAt(this.pos) != 44) {
				break;
			}
			this.pos += 1;
			this.skipNops(till);
		}
		return 0;
	}
	,checkWrites: function(p0,p1) {
		_hx_loop1: while(--p0 >= 0) switch(this.source.charCodeAt(p0)) {
		case 9:case 10:case 13:case 32:
			break;
		case 43:
			if(this.source.charCodeAt(--p0) == 43) {
				return true;
			} else {
				break _hx_loop1;
			}
			break;
		case 45:
			if(this.source.charCodeAt(--p0) == 45) {
				return true;
			} else {
				break _hx_loop1;
			}
			break;
		default:
			break _hx_loop1;
		}
		while(p1 < this.length) switch(this.source.charCodeAt(p1++)) {
		case 9:case 10:case 13:case 32:
			break;
		case 43:
			switch(this.source.charCodeAt(p1)) {
			case 43:case 61:
				return true;
			default:
				return false;
			}
			break;
		case 45:
			switch(this.source.charCodeAt(p1)) {
			case 45:case 61:
				return true;
			default:
				return false;
			}
			break;
		case 37:case 38:case 42:case 47:case 94:case 124:
			return this.source.charCodeAt(p1) == 61;
		case 61:
			return this.source.charCodeAt(p1) != 61;
		default:
			return false;
		}
		return false;
	}
	,getPos: function(p) {
		var row = 0;
		var rowStart = 0;
		var _g = 0;
		while(_g < p) {
			var i = _g++;
			if(this.source.charCodeAt(i) == 10) {
				++row;
				rowStart = i + 1;
			}
		}
		return { column : p - rowStart, row : row};
	}
	,__class__: parsers_GmlReader
});
var parsers_GmlReaderExt = function(gmlCode,version) {
	this.oldShowOnStack = [];
	this.oldName = [];
	this.oldRowStart = [];
	this.oldRow = [];
	this.oldLength = [];
	this.oldPos = [];
	this.oldSource = [];
	this.showOnStack = true;
	this.name = "";
	this.rowStart = 0;
	this.row = 0;
	parsers_GmlReader.call(this,gmlCode,version);
};
$hxClasses["parsers.GmlReaderExt"] = parsers_GmlReaderExt;
parsers_GmlReaderExt.__name__ = "parsers.GmlReaderExt";
parsers_GmlReaderExt.__super__ = parsers_GmlReader;
parsers_GmlReaderExt.prototype = $extend(parsers_GmlReader.prototype,{
	markLine: function() {
		this.row++;
		this.rowStart = this.pos;
	}
	,getStack: function() {
		var n = this.oldPos.length;
		var i = n + 1;
		var r = "";
		while(--i >= 0) {
			var _pos;
			var _rowStart;
			if(i == n) {
				_pos = this.pos;
				_rowStart = this.rowStart;
			} else {
				if(!this.oldShowOnStack[i]) {
					continue;
				}
				_pos = this.oldPos[i];
				_rowStart = this.oldRowStart[i];
			}
			var _col = _pos - _rowStart;
			var _name = i == n ? this.name : this.oldName[i];
			r += (_name != null ? "\nfrom " + _name : "\nfrom") + "[Ln " + ((i == n ? this.row : this.oldRow[i]) + 1) + ", col " + (_col + 1) + "]";
			if(i > 0) {
				var _source = i == n ? this.source : this.oldSource[i];
				var _rowEnd = _source.indexOf("\n",_rowStart);
				if(_rowEnd >= 0) {
					if(_source.charCodeAt(_rowEnd - 1) == 13) {
						--_rowEnd;
					}
				} else {
					_rowEnd = _source.length;
				}
				r += ": " + tools_NativeString.insert(_source.substring(_rowStart,_rowEnd),_col,"¦");
			}
		}
		return r;
	}
	,getTopPos: function() {
		if(this.oldPos.length > 0) {
			return { column : this.oldPos[0] - this.oldRowStart[0], row : this.oldRow[0]};
		} else {
			return { column : this.pos - this.rowStart, row : this.row};
		}
	}
	,get_loop: function() {
		if(this.pos < this.length) {
			return true;
		}
		while(this.oldSource.length > 0) {
			this.source = this.oldSource.pop();
			this.pos = this.oldPos.pop();
			this.length = this.oldLength.pop();
			this.row = this.oldRow.pop();
			this.rowStart = this.oldRowStart.pop();
			this.name = this.oldName.pop();
			this.showOnStack = this.oldShowOnStack.pop();
			if(this.pos < this.length) {
				return true;
			}
		}
		return false;
	}
	,get_eof: function() {
		return !this.get_loop();
	}
	,pushSource: function(code,_name) {
		this.oldSource.push(this.source);
		this.oldPos.push(this.pos);
		this.oldLength.push(this.length);
		this.oldRow.push(this.row);
		this.oldRowStart.push(this.rowStart);
		this.oldName.push(this.name);
		this.oldShowOnStack.push(this.showOnStack);
		this.source = code;
		this.pos = 0;
		this.row = 0;
		this.rowStart = 0;
		this.name = _name;
		this.length = code.length;
		this.showOnStack = true;
	}
	,pushSourceExt: function(code,pos,till,row,rowStart,name) {
		this.pushSource(code,name);
		this.pos = pos;
		this.length = till;
		this.row = row;
		this.rowStart = rowStart;
	}
	,setTo: function(q) {
		this.version = q.version;
		this.source = q.source;
		tools_NativeArray.setTo(this.oldSource,q.oldSource);
		this.pos = q.pos;
		tools_NativeArray.setTo(this.oldPos,q.oldPos);
		this.length = q.length;
		tools_NativeArray.setTo(this.oldLength,q.oldLength);
		this.row = q.row;
		tools_NativeArray.setTo(this.oldRow,q.oldRow);
		this.rowStart = q.rowStart;
		tools_NativeArray.setTo(this.oldRowStart,q.oldRowStart);
		this.name = q.name;
		tools_NativeArray.setTo(this.oldName,q.oldName);
		this.showOnStack = q.showOnStack;
		tools_NativeArray.setTo(this.oldShowOnStack,q.oldShowOnStack);
	}
	,clear: function() {
		this.source = "";
		this.oldSource.length = 0;
		this.name = null;
		this.oldName.length = 0;
		this.pos = 0;
		this.oldPos.length = 0;
		this.length = 0;
		this.oldLength.length = 0;
		this.row = 0;
		this.oldRow.length = 0;
		this.rowStart = 0;
		this.oldRowStart.length = 0;
		this.showOnStack = true;
		this.oldShowOnStack.length = 0;
	}
	,skipComment: function() {
		while(this.pos < this.length) {
			var c = this.source.charCodeAt(this.pos++);
			if(c == 10) {
				this.row++;
				this.rowStart = this.pos;
				if(this.source.charCodeAt(this.pos) == 35 && parsers_GmlReader.skipComment_1(this.source,this.pos + 1)) {
					break;
				}
			} else if(c == 42 && this.source.charCodeAt(this.pos) == 47) {
				this.pos += 1;
				break;
			}
		}
		return 0;
	}
	,skipString1: function(qc) {
		var c = this.source.charCodeAt(this.pos);
		while(c != qc && this.pos < this.length) {
			this.pos += 1;
			c = this.source.charCodeAt(this.pos);
			if(c == 10) {
				this.row++;
				this.rowStart = this.pos;
			}
		}
		if(this.pos < this.length) {
			this.pos += 1;
		}
		return 0;
	}
	,skipString2: function() {
		var c = this.source.charCodeAt(this.pos);
		while(c != 34 && this.pos < this.length) {
			if(c == 92) {
				this.pos += 1;
				c = this.source.charCodeAt(this.pos);
				switch(c) {
				case 10:
					this.pos += 1;
					this.row++;
					this.rowStart = this.pos;
					break;
				case 117:
					this.pos += 4;
					break;
				case 120:
					this.pos += 2;
					break;
				default:
					this.pos += 1;
				}
			} else {
				this.pos += 1;
			}
			c = this.source.charCodeAt(this.pos);
		}
		if(this.pos < this.length) {
			this.pos += 1;
		}
		return 0;
	}
	,__class__: parsers_GmlReaderExt
});
var parsers_GmlSeeker = function() { };
$hxClasses["parsers.GmlSeeker"] = parsers_GmlSeeker;
parsers_GmlSeeker.__name__ = "parsers.GmlSeeker";
parsers_GmlSeeker.start = function() {
	parsers_GmlSeeker.itemsLeft = 0;
	parsers_GmlSeeker.itemQueue.length = 0;
};
parsers_GmlSeeker.runItem = function(item) {
	parsers_GmlSeeker.itemsLeft++;
	var ready = function(err,text) {
		if(err != null) {
			console.error("Can't index ",item.path,err);
			parsers_GmlSeeker.runNext();
		} else {
			try {
				if(parsers_GmlSeeker.runSync(item.path,text,item.main,item.kind)) {
					parsers_GmlSeeker.runNext();
				}
			} catch( err1 ) {
				console.error("Can't index ",item.path,((err1) instanceof js__$Boot_HaxeError) ? err1.val : err1);
				parsers_GmlSeeker.runNext();
			}
		}
	};
	electron_FileWrap.readTextFile(item.path,ready);
};
parsers_GmlSeeker.run = function(path,main,kind) {
	var item = { path : StringTools.replace(path,"\\","/"), main : main, kind : kind};
	if(parsers_GmlSeeker.itemsLeft < 8) {
		parsers_GmlSeeker.runItem(item);
	} else {
		parsers_GmlSeeker.itemQueue.push(item);
	}
};
parsers_GmlSeeker.runNext = function() {
	var left = --parsers_GmlSeeker.itemsLeft;
	var item = parsers_GmlSeeker.itemQueue.shift();
	if(item != null) {
		parsers_GmlSeeker.runItem(item);
	} else if(left <= 0) {
		gml_GmlAPI.gmlComp.sort(function(a,b) {
			if(a.name < b.name) {
				return -1;
			} else {
				return 1;
			}
		});
		if(gml_Project.current != null) {
			gml_Project.current.finishedIndexing();
		}
		Main.aceEditor.getSession().bgTokenizer.start(0);
	}
};
parsers_GmlSeeker.parseConst = function(s) {
	var mt = parsers_GmlSeeker.parseConst_rx10.exec(s);
	if(mt != null) {
		return Std.parseInt(s);
	}
	mt = parsers_GmlSeeker.parseConst_rx16.exec(s);
	if(mt != null) {
		return Std.parseInt("0x" + mt[1]);
	}
	return null;
};
parsers_GmlSeeker.runSyncImpl = function(orig,src,main,out,locals,kind) {
	var mainTop = main;
	var sub = null;
	var q = new parsers_GmlReaderExt(src);
	var v = gml_GmlAPI.version;
	var row = 0;
	var project = gml_Project.current;
	var notLam = !((kind) instanceof file_kind_gml_KGmlLambdas);
	var canLam = notLam && (ui_Preferences.current.lambdaMagic && (project.lambdaGml != null || project.properties.lambdaMode == 2));
	var canDefineComp = ((kind) instanceof file_kind_KGml) && kind.canDefineComp;
	var localKind = notLam ? "local" : "sublocal";
	if(project.properties.lambdaMode == 2) {
		if(orig.includes("/" + "__lf_")) {
			canLam = true;
			localKind = "sublocal";
		}
	}
	if(main != null) {
		gml_GmlAPI.gmlLookup[main] = { path : orig, sub : sub, row : row, col : 0};
		if(main != mainTop) {
			gml_GmlAPI.gmlLookupText += main + "\n";
		}
	}
	var find = null;
	find = function(flags) {
		while(q.get_loop()) {
			var start = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			var s;
			switch(c) {
			case 10:
				row += 1;
				if((flags & 2048) != 0) {
					return "\n";
				}
				break;
			case 13:
				if((flags & 2048) != 0) {
					return "\n";
				}
				break;
			case 35:
				q.skipIdent1();
				if(q.pos > start + 1) {
					s = q.source.substring(start,q.pos);
					switch(s) {
					case "#macro":
						if((flags & 4) != 0) {
							return s;
						}
						break;
					case "#define":case "#target":
						if((flags & 2) != 0) {
							if(start == 0) {
								return s;
							}
							c = q.source.charCodeAt(start - 1);
							if(c == 13 || c == 10) {
								return s;
							}
						}
						break;
					default:
					}
				}
				break;
			case 40:
				if((flags & 4096) != 0) {
					return "(";
				}
				break;
			case 41:
				if((flags & 8192) != 0) {
					return ")";
				}
				break;
			case 44:
				if((flags & 128) != 0) {
					return ",";
				}
				break;
			case 46:
				if((flags & 256) != 0) {
					return ".";
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					row += q.skipComment();
					if((flags & 16) != 0) {
						return q.source.substring(start,q.pos);
					}
					break;
				case 47:
					q.pos += 1;
					q.skipLine();
					if(q.source.charCodeAt(start + 2) == 33 && q.source.charCodeAt(start + 3) == 35) {
						if(q.source.substring(start + 4,start + 9) == "mfunc") {
							while(true) {
								var c1 = q.source.charCodeAt(start + 9);
								if(!(c1 == 32 || c1 == 9)) {
									break;
								}
								var line = q.source.substring(start + 10,q.pos);
								var sp = line.indexOf(" ");
								var name = line.substring(0,sp);
								var json;
								try {
									json = JSON.parse(line.substring(sp + 1));
								} catch( _ ) {
									break;
								}
								var mf = new parsers_GmlExtMFunc(name,json);
								out.mfuncList.push(mf);
								out.mfuncMap[name] = mf;
								out.compList.push(mf.comp);
								out.compMap[name] = mf.comp;
								out.kindList.push(name);
								out.kindMap[name] = "macro.function";
								var mfd = new gml_GmlFuncDoc(name,name + "(",")",mf.args,false);
								out.docList.push(mfd);
								out.docMap[name] = mfd;
								break;
							}
						}
					} else if((flags & 8) != 0 && q.source.charCodeAt(start + 2) == 47) {
						return q.source.substring(start,q.pos);
					}
					break;
				default:
				}
				break;
			case 59:
				if((flags & 512) != 0) {
					return ";";
				}
				break;
			case 61:
				if((flags & 1024) != 0 && q.source.charCodeAt(q.pos) != 61) {
					return "=";
				}
				break;
			case 91:
				if((flags & 16384) != 0) {
					return "[";
				}
				break;
			case 93:
				if((flags & 32768) != 0) {
					return "]";
				}
				break;
			case 34:case 39:case 64:case 96:
				row += q.skipStringAuto(c,v);
				break;
			case 123:
				if((flags & 32) != 0) {
					return "{";
				}
				break;
			case 125:
				if((flags & 64) != 0) {
					return "}";
				}
				break;
			default:
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					var id = q.source.substring(start,q.pos);
					var m = (out.macroMap[id] || gml_GmlAPI.gmlMacros[id]);
					if(m != null) {
						if(q.oldSource.length < 16) {
							q.pushSource(m.expr);
							return find(flags);
						} else {
							return null;
						}
					}
					if((flags & 1) != 0) {
						return id;
					}
				}
			}
		}
		return null;
	};
	var mainComp = main != null ? gml_GmlAPI.gmlAssetComp[main] : null;
	var s1;
	var name1;
	var start1;
	var doc = null;
	var flushDoc = function() {
		if(doc == null && main != null) {
			doc = out.docMap[main];
			if(doc == null) {
				doc = new gml_GmlFuncDoc(main,main + "(",")",[],false);
				out.docList.push(doc);
				out.docMap[main] = doc;
			}
			doc.fromCode(src,start1,q.pos);
			if(mainComp != null) {
				mainComp.doc = doc.getAcText();
			}
		}
		doc = null;
	};
	var procLambdaIdent = function(s2,locals1) {
		var seekData = parsers_GmlExtLambda.seekData;
		var lfLocals = seekData.locals[s2];
		if(lfLocals == null && project.properties.lambdaMode == 2) {
			var rel = "scripts/" + s2 + "/" + s2 + ".gml";
			var full = project.fullPath(rel);
			var lgml;
			try {
				lgml = project.readTextFileSync(rel);
			} catch( _1 ) {
				lgml = null;
			}
			if(lgml == null) {
				console.warn("Lambda missing: " + s2);
				lgml = "";
			}
			parsers_GmlSeeker.runSync(full,lgml,"",file_kind_gml_KGmlLambdas.inst);
			var d = parsers_GmlSeekData.map[full];
			if(d == null) {
				console.warn("We just asked to index a lambda script and it's not there..?");
				lfLocals = new gml_GmlLocals();
			} else {
				lfLocals = d.locals[""];
			}
			seekData.locals[s2] = lfLocals;
		}
		if(lfLocals != null) {
			locals1.addLocals(lfLocals);
		}
	};
	var p;
	var c2;
	var mt;
	while(q.get_loop()) {
		s1 = find(15);
		if(s1 != null) {
			if(s1.charCodeAt(0) == 47) {
				if(main != null) {
					var check = true;
					var mt1;
					if(v == 2) {
						mt1 = parsers_GmlSeeker.jsDoc_param.exec(s1);
						if(mt1 != null) {
							doc = out.docMap[main];
							if(doc == null) {
								doc = gml_GmlFuncDoc.parse(main + "()");
								doc.acc = true;
								out.docList.push(doc);
								out.docMap[main] = doc;
							}
							if(doc.acc) {
								doc.args.push(mt1[1]);
								if(mainComp != null) {
									mainComp.doc = doc.getAcText();
								}
							}
							check = false;
						}
					}
					if(check) {
						mt1 = parsers_GmlSeeker.jsDoc_full.exec(s1);
						if(mt1 != null) {
							if(!Object.prototype.hasOwnProperty.call(out.docMap,main)) {
								doc = gml_GmlFuncDoc.parse(main + mt1[1]);
								out.docList.push(doc);
								out.docMap[main] = doc;
								if(mainComp != null && mainComp.doc == null) {
									mainComp.doc = s1;
								}
							}
							check = false;
						} else {
							s1 = s1.substring(3).trimLeft();
							doc = out.docMap[main];
							if(doc == null) {
								if(parsers_GmlSeeker.gmlDoc_full.test(s1)) {
									doc = gml_GmlFuncDoc.parse(s1);
									doc.name = main;
									doc.pre = main + "(";
								} else {
									doc = gml_GmlFuncDoc.parse(main + "(...) " + s1);
								}
								out.docList.push(doc);
								out.docMap[main] = doc;
							} else if(parsers_GmlSeeker.gmlDoc_full.test(s1)) {
								gml_GmlFuncDoc.parse(s1,doc);
								doc.name = main;
								doc.pre = main + "(";
							} else {
								doc.post += " " + s1;
							}
							mainComp.doc = doc.getAcText();
							check = false;
						}
					}
					if(check) {
						s1 = s1.substring(3).trim();
						if(mainComp != null) {
							mainComp.doc = tools_NativeString.nzcct(mainComp.doc,"\n",s1);
						}
					}
				}
			} else {
				switch(s1) {
				case "#macro":
					q.skipSpaces0();
					c2 = q.source.charCodeAt(q.pos);
					if(!(c2 == 95 || c2 >= 97 && c2 <= 122 || c2 >= 65 && c2 <= 90)) {
						continue;
					}
					p = q.pos;
					q.skipIdent1();
					name1 = q.source.substring(p,q.pos);
					q.skipSpaces0();
					var cfg;
					if(q.source.charCodeAt(q.pos) == 58) {
						cfg = name1;
						q.pos += 1;
						q.skipSpaces0();
						c2 = q.source.charCodeAt(q.pos);
						if(!(c2 == 95 || c2 >= 97 && c2 <= 122 || c2 >= 65 && c2 <= 90)) {
							continue;
						}
						p = q.pos;
						q.skipIdent1();
						name1 = q.source.substring(p,q.pos);
						q.skipSpaces0();
					} else {
						cfg = null;
					}
					p = q.pos;
					s1 = "";
					while(true) {
						q.skipLine();
						if(q.source.charCodeAt(q.pos + (-1)) == 92) {
							s1 += q.source.substring(p,q.pos - 1) + "\n";
							q.skipLineEnd();
							p = q.pos;
						} else {
							break;
						}
						if(!(q.pos < q.length)) {
							break;
						}
					}
					s1 += q.source.substring(p,q.pos);
					if(cfg == null || cfg == project.config) {
						var m1 = new gml_GmlMacro(name1,orig,s1,cfg);
						var old = out.macroMap[name1];
						if(old != null) {
							HxOverrides.remove(out.compList,out.compMap[name1]);
							HxOverrides.remove(out.macroList,old);
						} else {
							out.kindList.push(name1);
							out.kindMap[name1] = "macro";
						}
						if(!Object.prototype.hasOwnProperty.call(out.mfuncMap,name1.substring(0,name1.indexOf("_mf")))) {
							out.compList.push(m1.comp);
							out.compMap[name1] = m1.comp;
						}
						out.macroList.push(m1);
						out.macroMap[name1] = m1;
						gml_GmlAPI.gmlLookup[name1] = { path : orig, sub : sub, row : row, col : null};
						if(name1 != mainTop) {
							gml_GmlAPI.gmlLookupText += name1 + "\n";
						}
					}
					break;
				case "#define":case "#target":
					var isDefine = s1 == "#define";
					flushDoc();
					main = find(1);
					start1 = q.pos;
					sub = main;
					row = 0;
					gml_GmlAPI.gmlLookup[main] = { path : orig, sub : sub, row : row, col : null};
					if(main != mainTop) {
						gml_GmlAPI.gmlLookupText += main + "\n";
					}
					locals = new gml_GmlLocals();
					out.locals[main] = locals;
					if(isDefine) {
						s1 = find(6144);
						if(s1 == "(") {
							while(q.get_loop()) {
								s1 = find(10241);
								if(s1 == ")" || s1 == "\n" || s1 == null) {
									break;
								}
								locals.add(s1,localKind);
							}
							doc = gml_GmlFuncDoc.parse(main + q.source.substring(start1,q.pos));
							out.docList.push(doc);
							out.docMap[main] = doc;
						}
					}
					if(isDefine && canDefineComp) {
						mainComp = { name : main, value : main, score : 0, meta : "script", doc : q.pos > start1 ? main + q.source.substring(start1,q.pos) : null};
						out.compList.push(mainComp);
						out.compMap[main] = mainComp;
						out.kindList.push(main);
						out.kindMap[main] = "asset.script";
					}
					break;
				case "enum":
					name1 = find(1);
					if(name1 == null) {
						continue;
					}
					if(find(32) == null) {
						continue;
					}
					var en = new gml_GmlEnum(name1,orig);
					out.enumList.push(en);
					out.enumMap[name1] = en;
					out.compList.push({ name : name1, value : name1, score : 0, meta : "enum", doc : null});
					gml_GmlAPI.gmlLookup[name1] = { path : orig, sub : sub, row : row, col : 0};
					if(name1 != mainTop) {
						gml_GmlAPI.gmlLookupText += name1 + "\n";
					}
					var nextVal = 0;
					while(q.get_loop()) {
						s1 = find(65);
						if(s1 == null || s1 == "}") {
							break;
						}
						en.lastItem = s1;
						en.names.push(s1);
						en.items[s1] = true;
						var name2 = name1 + "." + s1;
						var ac = { name : name2, value : name2, score : 0, meta : "enum", doc : null};
						var acf = { name : s1, value : s1, score : 0, meta : "enum", doc : null};
						en.compList.push(ac);
						en.fieldComp.push(acf);
						en.compMap[s1] = ac;
						en.fieldLookup[s1] = { path : orig, sub : sub, row : row, col : 0};
						s1 = find(1216);
						if(s1 == "=") {
							var doc1 = null;
							var vp = q.pos;
							_hx_loop5: while(vp < q.length) {
								var c3 = q.source.charCodeAt(vp++);
								switch(c3) {
								case 10:case 13:
									break _hx_loop5;
								case 47:
									if(q.source.charCodeAt(vp) == 47) {
										var docStart = ++vp;
										while(vp < q.length) {
											c3 = q.source.charCodeAt(vp);
											if(c3 == 13 || c3 == 10) {
												break;
											}
											++vp;
										}
										doc1 = q.source.substring(docStart,vp).trim();
									}
									break;
								}
							}
							vp = q.pos;
							s1 = find(192);
							var val = parsers_GmlSeeker.parseConst(q.source.substring(vp,q.pos - 1).trim());
							if(val != null) {
								acf.doc = ac.doc = "" + val;
								nextVal = val + 1;
							} else {
								nextVal = null;
							}
							if(doc1 != null) {
								acf.doc = acf.doc != null ? acf.doc + "\t" + doc1 : doc1;
								ac.doc = acf.doc;
							}
						} else if(nextVal != null) {
							acf.doc = ac.doc = "" + nextVal++;
						}
						if(s1 == null || s1 == "}") {
							break;
						}
					}
					break;
				case "global":
					if(find(257) == ".") {
						s1 = find(1);
						if(s1 != null && out.globalFieldMap[s1] == null) {
							var gfd = gml_GmlAPI.gmlGlobalFieldMap[s1];
							if(gfd == null) {
								gfd = new gml_GmlGlobalField(s1);
								gml_GmlAPI.gmlGlobalFieldMap[s1] = gfd;
							}
							out.globalFieldList.push(gfd);
							out.globalFieldMap[s1] = gfd;
							out.globalFieldComp.push(gfd.comp);
						}
					}
					break;
				case "globalvar":
					while(q.get_loop()) {
						s1 = find(513);
						if(s1 == null || s1 == ";" || Object.prototype.hasOwnProperty.call(gml_GmlAPI.kwFlow,s1)) {
							break;
						}
						var g = new gml_GmlGlobalVar(s1,orig);
						out.globalVarList.push(g);
						out.globalVarMap[s1] = g;
						out.compList.push(g.comp);
						out.compMap[s1] = g.comp;
						out.kindList.push(s1);
						out.kindMap[s1] = "globalvar";
						gml_GmlAPI.gmlLookup[s1] = { path : orig, sub : sub, row : row, col : 0};
						if(s1 != mainTop) {
							gml_GmlAPI.gmlLookupText += s1 + "\n";
						}
					}
					break;
				case "var":
					while(q.get_loop()) {
						name1 = find(1);
						if(name1 == null) {
							break;
						}
						if(name1 == "var") {
							name1 = find(1);
						} else if(gml_GmlAPI.kwFlow[name1]) {
							break;
						}
						locals.add(name1,localKind);
						p = q.pos;
						s1 = find(1681);
						if(s1 != null && s1.startsWith("/*")) {
							mt = parsers_GmlSeeker.localType.exec(s1);
							if(mt != null) {
								locals.type[name1] = mt[1];
							}
							s1 = find(1681);
						}
						if(s1 != ",") {
							if(s1 == "=") {
								var depth = 0;
								var exit = false;
								_hx_loop9: while(q.get_loop()) {
									p = q.pos;
									s1 = find(62177);
									if(s1 == null) {
										exit = true;
										break;
									}
									switch(s1) {
									case "(":case "[":case "{":
										++depth;
										break;
									case ",":
										if(depth == 0) {
											break _hx_loop9;
										}
										break;
									case ";":
										exit = true;
										break _hx_loop9;
									case ")":case "]":case "}":
										--depth;
										break;
									default:
										if(gml_GmlAPI.kwFlow[s1]) {
											q.pos = p;
											exit = true;
											break _hx_loop9;
										} else if(canLam && s1.startsWith("__lf_")) {
											procLambdaIdent(s1,locals);
											continue;
										}
									}
								}
								if(exit) {
									break;
								}
							} else {
								q.pos = p;
								break;
							}
						}
					}
					break;
				default:
					if(locals.kind[s1] != null) {
						continue;
					}
					if(canLam && s1.startsWith("__lf_")) {
						procLambdaIdent(s1,locals);
						continue;
					}
					if(gml_GmlAPI.gmlKind[s1] != null) {
						continue;
					}
					if(gml_GmlAPI.extKind[s1] != null) {
						continue;
					}
					if(gml_GmlAPI.stdKind[s1] != null) {
						continue;
					}
					var skip = false;
					var i = q.pos - s1.length;
					_hx_loop10: while(--i >= 0) switch(q.source.charCodeAt(i)) {
					case 9:case 10:case 13:case 32:
						break;
					case 46:
						skip = true;
						break _hx_loop10;
					default:
						break _hx_loop10;
					}
					if(skip) {
						continue;
					}
					i = q.pos;
					_hx_loop11: while(i < q.length) switch(q.source.charCodeAt(i++)) {
					case 9:case 10:case 13:case 32:
						break;
					case 61:
						skip = q.source.charCodeAt(i) == 61;
						break _hx_loop11;
					default:
						skip = true;
						break _hx_loop11;
					}
					if(skip) {
						continue;
					}
					if(out.instFieldMap[s1] == null) {
						var fd = gml_GmlAPI.gmlInstFieldMap[s1];
						if(fd == null) {
							fd = new gml_GmlField(s1,"variable");
							gml_GmlAPI.gmlInstFieldMap[s1] = fd;
						}
						out.instFieldList.push(fd);
						out.instFieldMap[s1] = fd;
						out.instFieldComp.push(fd.comp);
					}
				}
			}
		}
	}
	flushDoc();
	if(project.hasGMLive) {
		var tmp = out.hasGMLive || ui_GMLive.check(src);
		out.hasGMLive = tmp;
	}
};
parsers_GmlSeeker.runYyObject = function(orig,src,allSync) {
	var obj = JSON.parse(src);
	var dir = haxe_io_Path.directory(orig);
	var project = gml_Project.current;
	var parentName = project.yyObjectNames[obj.parentObjectId];
	if(parentName != null) {
		var pj = gml_Project.current;
		var parChildren = pj.objectChildren[parentName];
		if(parChildren == null) {
			parChildren = [];
			pj.objectChildren[parentName] = parChildren;
		}
		parChildren.push(obj.name);
	}
	if(ui_Preferences.current.assetThumbs && !allSync) {
		var spriteId = obj.spriteId;
		if(spriteId != "00000000-0000-0000-0000-000000000000") {
			var res = project.yyResources[spriteId];
			ui_treeview_TreeView.setThumbSprite(orig,res != null ? res.Value.resourceName : null);
		} else {
			ui_treeview_TreeView.resetThumb(orig);
		}
	}
	var out = new parsers_GmlSeekData();
	var eventsLeft = 0;
	var eventFiles = [];
	var _g = 0;
	var _g1 = obj.eventList;
	while(_g < _g1.length) {
		var ev = _g1[_g];
		++_g;
		var full = haxe_io_Path.join([dir,yy_YyEvent.toPath(ev.eventtype,ev.enumb,ev.id)]);
		eventsLeft += 1;
		eventFiles.push({ name : yy_YyEvent.toString(ev.eventtype,ev.enumb,ev.collisionObjectId), full : full});
	}
	var locals = new gml_GmlLocals();
	out.locals["properties"] = locals;
	var _g2 = 0;
	var _g3 = yy_YyObjectProperties.propertyList;
	while(_g2 < _g3.length) locals.add(_g3[_g2++],"property.variable","(object property)");
	var _g4 = 0;
	var _g5 = yy_YyObjectProperties.typeList;
	while(_g4 < _g5.length) locals.add(_g5[_g4++],"property.namespace","(object variable type)");
	var _g6 = 0;
	var _g7 = yy_YyObjectProperties.assetTypes;
	while(_g6 < _g7.length) locals.add(_g7[_g6++].name,"property.namespace","(asset type)");
	if(eventFiles.length == 0) {
		parsers_GmlSeekData.apply(orig,parsers_GmlSeekData.map[orig],out);
		parsers_GmlSeekData.map[orig] = out;
		out.compList.sort(function(a,b) {
			if(a.name < b.name) {
				return -1;
			} else {
				return 1;
			}
		});
		return true;
	}
	var _g21 = 0;
	while(_g21 < eventFiles.length) {
		var file1 = eventFiles[_g21];
		++_g21;
		var name = [file1.name];
		var full1 = file1.full;
		if(!allSync) {
			electron_FileWrap.readTextFile(full1,(function(name1) {
				return function(err,code) {
					if(err == null) {
						try {
							var locals1 = new gml_GmlLocals();
							out.locals[name1[0]] = locals1;
							parsers_GmlSeeker.runSyncImpl(orig,code,null,out,locals1,file_kind_yy_KYyEvents.inst);
						} catch( _ ) {
						}
					}
					if((eventsLeft -= 1) <= 0) {
						parsers_GmlSeekData.apply(orig,parsers_GmlSeekData.map[orig],out);
						parsers_GmlSeekData.map[orig] = out;
						out.compList.sort((function() {
							return function(a1,b1) {
								if(a1.name < b1.name) {
									return -1;
								} else {
									return 1;
								}
							};
						})());
						parsers_GmlSeeker.runNext();
					}
				};
			})(name));
		} else {
			try {
				var code1 = electron_FileWrap.readTextFileSync(full1);
				var locals2 = new gml_GmlLocals();
				out.locals[name[0]] = locals2;
				parsers_GmlSeeker.runSyncImpl(orig,code1,null,out,locals2,file_kind_yy_KYyEvents.inst);
			} catch( _1 ) {
			}
		}
	}
	if(allSync) {
		parsers_GmlSeekData.apply(orig,parsers_GmlSeekData.map[orig],out);
		parsers_GmlSeekData.map[orig] = out;
		out.compList.sort(function(a2,b2) {
			if(a2.name < b2.name) {
				return -1;
			} else {
				return 1;
			}
		});
	}
	return false;
};
parsers_GmlSeeker.runGmxObject = function(orig,src) {
	var obj = gmx_SfGmx.parse(src);
	var out = new parsers_GmlSeekData();
	var parentName = obj.findText("parentName");
	if(parentName != "<undefined>") {
		var objectName = haxe_io_Path.withoutExtension(haxe_io_Path.withoutExtension(haxe_io_Path.withoutDirectory(orig)));
		var pj = gml_Project.current;
		var parChildren = pj.objectChildren[parentName];
		if(parChildren == null) {
			parChildren = [];
			pj.objectChildren[parentName] = parChildren;
		}
		parChildren.push(objectName);
	}
	if(ui_Preferences.current.assetThumbs) {
		var sprite = obj.findText("spriteName");
		if(sprite != "<undefined>") {
			var framePath = haxe_io_Path.join(["sprites","images",sprite + "_0.png"]);
			var frameURL = gml_Project.current.getImageURL(framePath);
			if(frameURL != null) {
				ui_treeview_TreeView.setThumb(orig,frameURL);
			}
		}
	}
	var _g = 0;
	var _g1 = obj.findAll("events");
	while(_g < _g1.length) {
		var _g2 = 0;
		var _g11 = _g1[_g++].findAll("event");
		while(_g2 < _g11.length) {
			var event = _g11[_g2];
			++_g2;
			var ename = event.attrMap["ename"];
			var locals = new gml_GmlLocals();
			out.locals[parsers_GmlEvent.toString(Std.parseInt(event.attrMap["eventtype"]),ename == null ? Std.parseInt(event.attrMap["enumb"]) : null,ename)] = locals;
			var _g3 = 0;
			var _g12 = event.findAll("action");
			while(_g3 < _g12.length) {
				var code = gmx_GmxAction.getCode(_g12[_g3++]);
				if(code != null) {
					parsers_GmlSeeker.runSyncImpl(orig,code,null,out,locals,file_kind_gmx_KGmxEvents.inst);
				}
			}
		}
	}
	parsers_GmlSeekData.apply(orig,parsers_GmlSeekData.map[orig],out);
	parsers_GmlSeekData.map[orig] = out;
	out.compList.sort(function(a,b) {
		if(a.name < b.name) {
			return -1;
		} else {
			return 1;
		}
	});
	return true;
};
parsers_GmlSeeker.runSync = function(orig,src,main,kind) {
	switch(haxe_io_Path.extension(orig)) {
	case "gmx":
		return parsers_GmlSeeker.runGmxObject(orig,src);
	case "yy":
		return parsers_GmlSeeker.runYyObject(orig,src);
	}
	var src_ncr = src;
	src = parsers_GmlExtCoroutines.pre(src);
	var out = new parsers_GmlSeekData();
	out.hasCoroutines = src_ncr != src;
	out.main = main;
	var locals = new gml_GmlLocals();
	out.locals[""] = locals;
	parsers_GmlSeeker.runSyncImpl(orig,src,main,out,locals,kind);
	parsers_GmlSeekData.apply(orig,parsers_GmlSeekData.map[orig],out);
	parsers_GmlSeekData.map[orig] = out;
	out.compList.sort(function(a,b) {
		if(a.name < b.name) {
			return -1;
		} else {
			return 1;
		}
	});
	return true;
};
var parsers_GmlTimeline = function() { };
$hxClasses["parsers.GmlTimeline"] = parsers_GmlTimeline;
parsers_GmlTimeline.__name__ = "parsers.GmlTimeline";
parsers_GmlTimeline.parse = function(gmlCode,version) {
	var out = [];
	var errors = "";
	var q = new parsers_GmlReader(gmlCode);
	var mmStart = 0;
	var mmTime = null;
	var mmCode = [];
	var sctName = null;
	var flush = function(till,cont) {
		var mmNext = q.source.substring(mmStart,till).trimRight();
		if(mmTime == null) {
			if(mmNext != "") {
				errors += "There's code prior to first moment definition.\n";
			}
		} else {
			if(sctName != null && sctName != "") {
				var pfx = version == 2 ? "/// @desc" : "///";
				pfx += sctName + "\r\n";
				mmNext = pfx + mmNext;
				sctName = null;
			}
			mmCode.push(mmNext);
			if(!cont) {
				out.push({ moment : mmTime, code : mmCode});
				mmCode = [];
			}
		}
	};
	while(q.get_loop()) {
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			if(q.pos == 1 || q.source.charCodeAt(q.pos - 2) == 10) {
				if(HxOverrides.substr(q.source,q.pos,6) == "moment") {
					flush(q.pos - 1);
					q.pos += 6;
					q.skipSpaces0();
					var timeStart = q.pos;
					while(q.get_loop()) {
						c = q.source.charCodeAt(q.pos);
						if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57) {
							q.pos += 1;
						} else {
							break;
						}
					}
					var timeString = q.source.substring(timeStart,q.pos);
					mmTime = Std.parseInt(timeString);
					if(mmTime == null) {
						errors += timeString + " is not a valid moment number.";
					}
					timeStart = q.pos;
					q.skipLine();
					sctName = q.source.substring(timeStart,q.pos);
					q.skipLineEnd();
					mmStart = q.pos;
				} else if(HxOverrides.substr(q.source,q.pos,7) == "section" && version == 1) {
					var nameStart = q.pos += 7;
					q.skipLine();
					var nameEnd = q.pos;
					q.skipLineEnd();
					flush(nameStart - 8,true);
					sctName = q.source.substring(nameStart,nameEnd);
					mmStart = q.pos;
				}
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,version);
			break;
		default:
		}
	}
	flush(q.pos);
	if(errors != "") {
		parsers_GmlTimeline.parseError = errors;
		return null;
	} else {
		return out;
	}
};
var parsers_linter_GmlLinter = function() {
	this.canContinue = false;
	this.canBreak = false;
	this.__skipAvail = false;
	this.__peekReader = new parsers_GmlReaderExt("",0);
	this.__next_isPeek = false;
	this.__nextVal_end = 0;
	this.__nextVal_start = 0;
	this.__nextVal_source = "";
	this.__nextVal_cache = null;
	this.nextKind = 0;
	this.seqStart = new parsers_GmlReaderExt("",0);
	this.isProperties = false;
	this.context = "";
	this.errors = [];
	this.warnings = [];
	this.errorPos = null;
	this.errorText = null;
	this.optRequireSemico = parsers_linter_GmlLinter.getOption(function(q) {
		return q.requireSemicolons;
	});
	this.optNoSingleEqu = parsers_linter_GmlLinter.getOption(function(q1) {
		return q1.noSingleEquals;
	});
	this.optRequireParentheses = parsers_linter_GmlLinter.getOption(function(q2) {
		return q2.requireParentheses;
	});
};
$hxClasses["parsers.linter.GmlLinter"] = parsers_linter_GmlLinter;
parsers_linter_GmlLinter.__name__ = "parsers.linter.GmlLinter";
parsers_linter_GmlLinter.getOption = function(fn) {
	var lp = gml_Project.current.properties.linterPrefs;
	var r = null;
	var _g = 0;
	while(_g < 1) {
		++_g;
		if(lp != null) {
			r = fn(lp);
			if(r != null) {
				break;
			}
		}
		r = fn(ui_Preferences.current.linterPrefs);
		if(r != null) {
			break;
		}
		r = fn(parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$.defValue);
	}
	return r;
};
parsers_linter_GmlLinter.runFor = function(editor,code) {
	var q = new parsers_linter_GmlLinter();
	var session = editor.session;
	if(session.gmlErrorMarkers != null) {
		var _g = 0;
		var _g1 = session.gmlErrorMarkers;
		while(_g < _g1.length) {
			var mk = _g1[_g];
			++_g;
			session.removeMarker(mk);
		}
		session.gmlErrorMarkers.length = 0;
		session.clearAnnotations();
	}
	var t = window.performance.now();
	if(code == null) {
		code = session.getValue();
	}
	var ohno = q.run(code,editor,gml_Project.current.version);
	t = window.performance.now() - t;
	if(session.gmlErrorMarkers == null) {
		session.gmlErrorMarkers = [];
	}
	var annotations = [];
	var addMarker = function(text,pos,isError) {
		var line = session.getLine(pos.row);
		var range = ace_extern__$AceRange_AceRange_$Impl_$._new(0,pos.row,line.length,pos.row);
		session.gmlErrorMarkers.push(session.addMarker(range,isError ? "ace_error-line" : "ace_warning-line","fullLine"));
		annotations.push({ row : pos.row, column : pos.column, type : isError ? "error" : "warning", text : text});
	};
	var _g2 = 0;
	var _g11 = q.warnings;
	while(_g2 < _g11.length) {
		var warn = _g11[_g2];
		++_g2;
		addMarker(warn.text,warn.pos,false);
	}
	var _g21 = 0;
	var _g3 = q.errors;
	while(_g21 < _g3.length) {
		var error = _g3[_g21];
		++_g21;
		addMarker(error.text,error.pos,true);
	}
	var msg;
	if(q.warnings.length == 0 && q.errors.length == 0) {
		msg = "OK!";
	} else {
		if(ohno) {
			msg = "⛔";
		} else if(q.errors.length > 0) {
			msg = "🛑";
		} else {
			msg = "⚠";
		}
		if(q.errors.length > 0) {
			msg += q.errors.length + " error";
			if(q.errors.length != 1) {
				msg += "s";
			}
		}
		if(q.warnings.length > 0) {
			if(q.errors.length > 0) {
				msg += ", ";
			}
			msg += q.warnings.length + " warning";
			if(q.warnings.length != 1) {
				msg += "s";
			}
		}
		msg += "!";
	}
	msg += " (lint time: " + (t.toFixed(2) + "ms)");
	window.setTimeout(function() {
		var statusBar = Main.aceEditor.statusBar;
		statusBar.ignoreUntil = window.performance.now() + statusBar.delayTime + 50;
		statusBar.setText(msg);
	},50);
	session.setAnnotations(annotations);
	return ohno;
};
parsers_linter_GmlLinter.prototype = {
	setError: function(text) {
		if(this.errorPos != null) {
			return;
		}
		this.errorText = text + this.reader.getStack();
		this.errorPos = this.reader.getTopPos();
	}
	,addWarning: function(text) {
		this.warnings.push(new parsers_linter_GmlLinterProblem(text + this.reader.getStack(),this.reader.getTopPos()));
	}
	,addError: function(text) {
		this.errors.push(new parsers_linter_GmlLinterProblem(text + this.reader.getStack(),this.reader.getTopPos()));
	}
	,readSeqStartError: function(text) {
		if(this.errorPos != null) {
			return true;
		}
		this.errorText = text + this.seqStart.getStack();
		this.errorPos = this.seqStart.getTopPos();
		return true;
	}
	,readSeqStartWarn: function(text) {
		if(this.errorPos != null) {
			return true;
		}
		this.warnings.push(new parsers_linter_GmlLinterProblem(text + this.seqStart.getStack(),this.seqStart.getTopPos()));
		return true;
	}
	,get_nextVal: function() {
		if(this.__nextVal_cache == null) {
			this.__nextVal_cache = this.__nextVal_source.substring(this.__nextVal_start,this.__nextVal_end);
		}
		return this.__nextVal_cache;
	}
	,nextDump: function() {
		var v = this.get_nextVal();
		if(v != "") {
			return "`" + v + "` (" + parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.getName(this.nextKind) + ")";
		} else {
			return parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.getName(this.nextKind);
		}
	}
	,__next_ret: function(nvk,src,nv0,nv1) {
		this.__nextVal_cache = null;
		this.__nextVal_source = src;
		this.__nextVal_start = nv0;
		this.__nextVal_end = nv1;
		this.nextKind = nvk;
		return nvk;
	}
	,__next_retv: function(nvk,nv) {
		this.__nextVal_cache = nv;
		this.nextKind = nvk;
		return nvk;
	}
	,initKeywords: function() {
		var q = Object.create(null);
		q["var"] = 5;
		q["globalvar"] = 6;
		q["enum"] = 8;
		q["undefined"] = 3;
		q["not"] = 20;
		q["and"] = 17;
		q["or"] = 18;
		q["xor"] = 19;
		q["div"] = 25;
		q["mod"] = 26;
		q["if"] = 51;
		q["then"] = 52;
		q["else"] = 53;
		q["return"] = 54;
		q["exit"] = 55;
		q["for"] = 63;
		q["while"] = 65;
		q["do"] = 64;
		q["until"] = 66;
		q["repeat"] = 67;
		q["with"] = 70;
		q["break"] = 68;
		q["continue"] = 69;
		q["switch"] = 56;
		q["case"] = 58;
		q["default"] = 57;
		q["try"] = 59;
		q["catch"] = 60;
		q["finally"] = 61;
		q["throw"] = 62;
		if(this.version == -1) {
			q["in"] = 80;
			q["wait"] = 81;
		}
		this.keywords = q;
	}
	,__next: function(q) {
		var _gthis = this;
		var nk;
		var nv;
		var _src;
		while(q.get_loop()) {
			var p = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 10:
				q.markLine();
				break;
			case 33:
				if(q.source.charCodeAt(q.pos) == 61) {
					q.pos += 1;
					return _gthis.__next_retv(12,"!=");
				} else {
					return _gthis.__next_retv(20,"!");
				}
				break;
			case 35:
				c = q.source.charCodeAt(q.pos);
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					++p;
					q.skipIdent1();
					nv = q.source.substring(p,q.pos);
					switch(nv) {
					case "args":
						q.skipLine();
						return _gthis.__next_retv(73,"#args");
					case "define":case "event":case "moment":case "target":
						if(p - 2 <= 0 || q.source.charCodeAt(p - 2) == 10) {
							q.pos = p;
							this.context = q.readContextName(null);
							this.isProperties = nv == "event" && this.context == "properties";
							q.skipLine();
						} else {
							q.pos = p;
							return _gthis.__next_retv(47,"#");
						}
						break;
					case "gmcr":
						if(this.keywords["yield"] == null) {
							this.keywords["yield"] = 77;
							this.keywords["label"] = 78;
							this.keywords["goto"] = 79;
						}
						break;
					case "hyper":case "import":
						q.skipLine();
						break;
					case "lambda":
						return _gthis.__next_retv(74,"#lambda");
					case "lamdef":
						return _gthis.__next_retv(75,"#lamdef");
					case "macro":case "mfunc":
						_src = q.source;
						while(q.pos < q.length) {
							q.skipLine();
							if(q.source.charCodeAt(q.pos + (-1)) != 92) {
								break;
							}
							q.skipLineEnd();
							q.markLine();
						}
						return _gthis.__next_ret(nv == "macro" ? 7 : 71,_src,p,q.pos);
					case "endregion":case "region":case "section":
						q.skipLine();
						break;
					default:
						q.pos = p;
						return _gthis.__next_retv(47,"#");
					}
				} else {
					return _gthis.__next_retv(47,"#");
				}
				break;
			case 36:
				_src = q.source;
				q.skipHex();
				return _gthis.__next_ret(2,_src,p,q.pos);
			case 37:
				if(q.source.charCodeAt(q.pos) == 61) {
					q.pos += 1;
					return _gthis.__next_retv(10,"%=");
				} else {
					return _gthis.__next_retv(26,"%");
				}
				break;
			case 38:
				switch(q.source.charCodeAt(q.pos)) {
				case 38:
					q.pos += 1;
					return _gthis.__next_retv(17,"&&");
				case 61:
					q.pos += 1;
					return _gthis.__next_retv(10,"&=");
				default:
					return _gthis.__next_retv(27,"&");
				}
				break;
			case 40:
				return _gthis.__next_retv(35,"(");
			case 41:
				return _gthis.__next_retv(36,")");
			case 42:
				if(q.source.charCodeAt(q.pos) == 61) {
					q.pos += 1;
					return _gthis.__next_retv(10,"*=");
				} else {
					return _gthis.__next_retv(23,"*");
				}
				break;
			case 43:
				switch(q.source.charCodeAt(q.pos)) {
				case 43:
					q.pos += 1;
					return _gthis.__next_retv(33,"++");
				case 61:
					q.pos += 1;
					return _gthis.__next_retv(10,"+=");
				default:
					return _gthis.__next_retv(21,"+");
				}
				break;
			case 44:
				return _gthis.__next_retv(46,",");
			case 45:
				switch(q.source.charCodeAt(q.pos)) {
				case 45:
					q.pos += 1;
					return _gthis.__next_retv(34,"--");
				case 61:
					q.pos += 1;
					return _gthis.__next_retv(10,"-=");
				default:
					return _gthis.__next_retv(22,"-");
				}
				break;
			case 46:
				c = q.source.charCodeAt(q.pos);
				if(c >= 48 && c <= 57) {
					_src = q.source;
					q.skipNumber(false);
					return _gthis.__next_ret(2,_src,p,q.pos);
				} else {
					return _gthis.__next_retv(45,".");
				}
				break;
			case 47:
				switch(q.source.charCodeAt(q.pos)) {
				case 42:
					q.pos += 1;
					q.skipComment();
					break;
				case 47:
					q.skipLine();
					break;
				default:
					if(q.source.charCodeAt(q.pos) == 61) {
						q.pos += 1;
						return _gthis.__next_retv(10,"/=");
					} else {
						return _gthis.__next_retv(24,"/");
					}
				}
				break;
			case 58:
				return _gthis.__next_retv(49,":");
			case 59:
				return _gthis.__next_retv(44,";");
			case 60:
				switch(q.source.charCodeAt(q.pos)) {
				case 60:
					q.pos += 1;
					return _gthis.__next_retv(30,"<<");
				case 61:
					q.pos += 1;
					return _gthis.__next_retv(14,"<=");
				case 62:
					q.pos += 1;
					return _gthis.__next_retv(12,"<>");
				default:
					return _gthis.__next_retv(13,"<");
				}
				break;
			case 61:
				if(q.source.charCodeAt(q.pos) == 61) {
					q.pos += 1;
					return _gthis.__next_retv(11,"==");
				} else {
					return _gthis.__next_retv(9,"=");
				}
				break;
			case 62:
				switch(q.source.charCodeAt(q.pos)) {
				case 61:
					q.pos += 1;
					return _gthis.__next_retv(16,">=");
				case 62:
					q.pos += 1;
					return _gthis.__next_retv(31,">>");
				default:
					return _gthis.__next_retv(15,">");
				}
				break;
			case 63:
				return _gthis.__next_retv(48,"?");
			case 64:
				if(this.version == 2) {
					c = q.source.charCodeAt(q.pos);
					if(c == 34 || c == 39) {
						_src = q.source;
						q.pos += 1;
						q.skipString1(c);
						return _gthis.__next_ret(1,_src,p,q.pos);
					}
				}
				return _gthis.__next_retv(50,"@");
			case 91:
				return _gthis.__next_retv(39,"[");
			case 93:
				return _gthis.__next_retv(40,"]");
			case 94:
				switch(q.source.charCodeAt(q.pos)) {
				case 38:
					q.pos += 1;
					return _gthis.__next_retv(19,"^^");
				case 61:
					q.pos += 1;
					return _gthis.__next_retv(10,"^=");
				default:
					return _gthis.__next_retv(29,"^");
				}
				break;
			case 34:case 39:case 96:
				_src = q.source;
				q.skipStringAuto(c,this.version);
				return _gthis.__next_ret(1,_src,p,q.pos);
			case 123:
				return _gthis.__next_retv(37,"{");
			case 124:
				switch(q.source.charCodeAt(q.pos)) {
				case 61:
					q.pos += 1;
					return _gthis.__next_retv(10,"|=");
				case 124:
					q.pos += 1;
					return _gthis.__next_retv(18,"||");
				default:
					return _gthis.__next_retv(28,"|");
				}
				break;
			case 125:
				return _gthis.__next_retv(38,"}");
			case 126:
				return _gthis.__next_retv(32,"~");
			default:
				if(c == 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90) {
					q.skipIdent1();
					nv = q.source.substring(p,q.pos);
					while(true) {
						if(nv != "var") {
							var imp = this.editor.imports[this.context];
							if(imp != null) {
								var ir = parsers_linter_GmlLinterImports.proc(this,p,imp,nv);
								if(ir) {
									return 0;
								}
								if(ir != null) {
									return this.__next(q);
								}
							}
						}
						if(gml_GmlAPI.gmlMFuncs[nv] != null) {
							return _gthis.__next_retv(72,nv);
						}
						var mcr = gml_GmlAPI.gmlMacros[nv];
						if(mcr != null) {
							if(q.oldSource.length > 128) {
								this.setError("Macro stack overflow");
								return 0;
							}
							q.pushSource(mcr.expr,mcr.name);
							break;
						}
						return _gthis.__next_retv(tools__$Dictionary_Dictionary_$Impl_$.defget(this.keywords,nv,4),nv);
					}
				} else if(c >= 48 && c <= 57) {
					_src = q.source;
					if(q.source.charCodeAt(q.pos) == 120) {
						q.pos += 1;
						q.skipHex();
					} else {
						q.skipNumber();
					}
					return _gthis.__next_ret(2,_src,p,q.pos);
				} else if(c > 32) {
					this.setError("Can't parse `" + String.fromCodePoint(c) + "`");
					return 0;
				}
			}
		}
		_src = q.source;
		return this.__next_retv(0,"");
	}
	,peek: function() {
		var q = this.__peekReader;
		q.setTo(this.reader);
		var wasPeek = this.__next_isPeek;
		this.__next_isPeek = true;
		var r = this.__next(q);
		this.__next_isPeek = wasPeek;
		this.__skipAvail = true;
		return r;
	}
	,skip: function() {
		if(this.__skipAvail) {
			this.__skipAvail = false;
			this.reader.setTo(this.__peekReader);
			return this.nextKind;
		} else {
			throw new js__$Boot_HaxeError("Can't skip - didn't peek");
		}
	}
	,skipIf: function(cond) {
		if(cond) {
			this.reader.setTo(this.__peekReader);
		}
		this.__skipAvail = false;
		return cond;
	}
	,readError: function(s) {
		this.setError(s);
		return true;
	}
	,readExpect: function(s) {
		this.setError("Expected " + s + ", got " + this.nextDump());
		return true;
	}
	,readCheckSkip: function(kind,expect) {
		if(this.__next(this.reader) == kind) {
			return false;
		}
		return this.readExpect(expect);
	}
	,__readExpr_invalid: function(flags) {
		return this.readExpect((flags & 2) != 0 ? "a statement" : "an expression");
	}
	,readOps: function() {
		var q = this.reader;
		while(q.get_loop()) {
			if(this.readExpr(1)) {
				return true;
			}
			var nk = this.peek();
			if(parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__isBinOp[nk] || nk == 9) {
				this.skip();
			} else {
				break;
			}
		}
		return false;
	}
	,readArgs: function(sqb) {
		var q = this.reader;
		this.seqStart.setTo(this.reader);
		var seenComma = true;
		var closed = false;
		var argc = 0;
		_hx_loop1: while(q.get_loop()) switch(this.peek()) {
		case 36:
			if(sqb) {
				this.readError("Unexpected `)`");
				return -1;
			}
			this.skip();
			closed = true;
			break _hx_loop1;
		case 40:
			if(!sqb) {
				this.readError("Unexpected `]`");
				return -1;
			}
			this.skip();
			closed = true;
			break _hx_loop1;
		case 46:
			if(seenComma) {
				this.readError("Unexpected `,`");
				return -1;
			} else {
				seenComma = true;
				this.skip();
			}
			break;
		default:
			if(seenComma) {
				seenComma = false;
				if(this.readExpr()) {
					return -1;
				}
				++argc;
			} else {
				this.readExpect("a comma in values list");
				return -1;
			}
		}
		if(!closed) {
			this.readSeqStartError("Unclosed " + (sqb ? "[]" : "()"));
			return -1;
		} else {
			return argc;
		}
	}
	,checkCallArgs: function(currName,argc) {
		var doc = ((gml_GmlAPI.gmlDoc[currName] || gml_GmlAPI.extDoc[currName]) || gml_GmlAPI.stdDoc[currName]);
		while(true) {
			var minArgs;
			var maxArgs;
			if(doc != null) {
				minArgs = doc.get_minArgs();
				maxArgs = doc.get_maxArgs();
			} else {
				minArgs = gml_GmlAPI.extArgc[currName];
				if(minArgs == null) {
					this.addWarning("`" + currName + "` doesn't seem to be a valid function");
					break;
				}
				if(minArgs < 0) {
					minArgs = 0;
					maxArgs = 2147483647;
				} else {
					maxArgs = minArgs;
				}
			}
			if(argc < minArgs) {
				if(maxArgs == minArgs) {
					this.addError("Not enough arguments for " + currName + " (expected " + minArgs + ", got " + argc + ")");
				} else if(maxArgs >= 2147483647) {
					this.addError("Not enough arguments for " + currName + " (expected " + minArgs + "+, got " + argc + ")");
				} else {
					this.addError("Not enough arguments for " + currName + " (expected " + minArgs + ".." + maxArgs + ", got " + argc + ")");
				}
			} else if(argc > maxArgs) {
				if(minArgs == maxArgs) {
					this.addError("Too many arguments for " + currName + " (expected " + doc.get_maxArgs() + ", got " + argc + ")");
				} else {
					this.addError("Not enough arguments for " + currName + " (expected " + minArgs + ".." + maxArgs + ", got " + argc + ")");
				}
			}
			break;
		}
	}
	,readExpr: function(flags,_nk) {
		if(flags == null) {
			flags = 0;
		}
		var _gthis = this;
		var q = this.reader;
		var nk = _nk != null ? _nk : this.__next(this.reader);
		if(nk == 0) {
			return _gthis.__readExpr_invalid(flags);
		}
		var wasStat = (flags & 2) != 0;
		var statKind = nk;
		var currKind = nk;
		var currName = nk == 4 ? this.get_nextVal() : null;
		switch(nk) {
		case 1:case 2:case 3:
			break;
		case 4:
			if(this.isProperties && (flags & 2) != 0) {
				if(this.skipIf(this.peek() == 49)) {
					if(this.readCheckSkip(4,"variable type")) {
						return true;
					}
					if(this.skipIf(this.peek() == 13)) {
						var depth = 1;
						_hx_loop1: while(q.get_loop()) switch(this.__next(this.reader)) {
						case 13:
							++depth;
							break;
						case 15:
							if(--depth <= 0) {
								break _hx_loop1;
							}
							break;
						default:
						}
					}
				}
			}
			break;
		case 20:case 32:case 33:case 34:
			if(this.readExpr()) {
				return true;
			}
			break;
		case 35:
			if(this.readExpr()) {
				return true;
			}
			if(this.__next(this.reader) != 36) {
				return this.readExpect("a `)`");
			}
			break;
		case 37:
			if(!this.skipIf(this.peek() == 38)) {
				_hx_loop2: while(q.get_loop()) {
					switch(this.__next(this.reader)) {
					case 1:case 4:
						break;
					default:
						return this.readExpect("a field name");
					}
					if(this.readCheckSkip(49,"a `:` between key-value pair in {}")) {
						return true;
					}
					if(this.readExpr()) {
						return true;
					}
					switch(this.peek()) {
					case 38:
						this.skip();
						break _hx_loop2;
					case 46:
						this.skip();
						break;
					default:
						return this.readExpect("a `,` or a `}` after a key-value pair in {}");
					}
				}
			}
			break;
		case 39:
			if(this.readArgs(true) < 0) {
				return true;
			}
			break;
		case 72:
			return parsers_linter_GmlLinterMFunc.read(this,flags);
		case 74:
			if(this.readLambda()) {
				return true;
			}
			break;
		default:
			if(parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__isUnOp[nk]) {
				if(this.readExpr()) {
					return true;
				}
			} else {
				return _gthis.__readExpr_invalid(flags);
			}
		}
		_hx_loop3: while(q.get_loop()) {
			nk = this.peek();
			switch(nk) {
			case 9:
				if((flags & 2) != 0) {
					this.skip();
					flags &= -3;
					statKind = 9;
					if(this.readExpr()) {
						return true;
					}
				} else {
					if((flags & 1) != 0) {
						break _hx_loop3;
					}
					if(this.optNoSingleEqu) {
						this.addWarning("Using single `=` as a comparison operator");
					}
					this.skip();
					if(this.readOps()) {
						return true;
					}
					flags |= 4;
				}
				break;
			case 20:
				if((flags & 1) != 0 || this.version != -1) {
					break _hx_loop3;
				}
				this.seqStart.setTo(this.reader);
				this.skip();
				if(!this.skipIf(this.peek() == 80)) {
					this.reader.setTo(this.seqStart);
					break _hx_loop3;
				}
				if(this.readExpr()) {
					return true;
				}
				currKind = 80;
				break;
			case 33:case 34:
				if((flags & 1) != 0 || (flags & 4) != 0) {
					break _hx_loop3;
				}
				if(!parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__canPostfix[currKind]) {
					break _hx_loop3;
				}
				this.skip();
				currKind = nk;
				statKind = currKind;
				break;
			case 35:
				if(!parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__canCall[currKind]) {
					return this.readError("Expression " + parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.getName(currKind) + " isStat not callable");
				}
				if((flags & 4) != 0) {
					return this.readError("Can't call this");
				}
				this.skip();
				statKind = 41;
				var argc = this.readArgs(false);
				if(argc < 0) {
					return true;
				}
				if(currKind == 4 && currName != null) {
					this.checkCallArgs(currName,argc);
				}
				break;
			case 39:
				this.skip();
				switch(this.peek()) {
				case 47:
					this.skip();
					if(this.readExpr()) {
						return true;
					}
					if(this.readCheckSkip(46,"a comma before second index")) {
						return true;
					}
					if(this.readExpr()) {
						return true;
					}
					break;
				case 28:case 48:
					this.skip();
					if(this.readExpr()) {
						return true;
					}
					break;
				case 50:
					this.skip();
					if(this.readExpr()) {
						return true;
					}
					if(this.skipIf(this.peek() == 46)) {
						if(this.readExpr()) {
							return true;
						}
					}
					break;
				default:
					if(this.readExpr()) {
						return true;
					}
					if(this.skipIf(this.peek() == 46)) {
						if(this.readExpr()) {
							return true;
						}
					}
				}
				if(this.readCheckSkip(40,"a closing `]` in array access")) {
					return true;
				}
				currKind = 43;
				break;
			case 45:
				this.skip();
				if(this.readCheckSkip(4,"field name after `.`")) {
					return true;
				}
				currKind = 42;
				break;
			case 48:
				if((flags & 1) != 0) {
					break _hx_loop3;
				}
				this.skip();
				if(this.readExpr()) {
					return true;
				}
				if(this.readCheckSkip(49,"a colon in a ?: operator")) {
					return true;
				}
				if(this.readExpr()) {
					return true;
				}
				currKind = 48;
				break;
			case 80:
				if((flags & 1) != 0) {
					break _hx_loop3;
				}
				this.skip();
				if(this.readExpr()) {
					return true;
				}
				currKind = 80;
				break;
			default:
				if(parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__isSetOp[nk]) {
					if((flags & 2) == 0) {
						return this.readError("Can't use " + this.nextDump() + " here.");
					}
					this.skip();
					statKind = 9;
					currKind = statKind;
					if(this.readExpr()) {
						return true;
					}
					flags |= 4;
				} else if(parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__isBinOp[nk]) {
					if((flags & 1) != 0) {
						break _hx_loop3;
					}
					this.skip();
					if(this.readOps()) {
						return true;
					}
					flags |= 4;
				} else {
					break _hx_loop3;
				}
			}
		}
		if(wasStat && !parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__isStat[statKind]) {
			this.nextKind = statKind;
			this.__nextVal_cache = "";
			return this.readExpect("a statement");
		}
		this.readExpr_currKind = currKind;
		return false;
	}
	,readLoopStat: function(flags) {
		if(flags == null) {
			flags = 0;
		}
		var _canBreak = this.canBreak;
		var _canContinue = this.canContinue;
		this.canBreak = true;
		this.canContinue = true;
		var result = this.readStat(flags);
		this.canBreak = _canBreak;
		this.canContinue = _canContinue;
		return result;
	}
	,readSwitch: function() {
		if(this.readCheckSkip(37,"an opening `{` for switch-block")) {
			return true;
		}
		this.seqStart.setTo(this.reader);
		var hasDefault = false;
		var q = this.reader;
		while(q.get_loop()) switch(this.peek()) {
		case 38:
			this.skip();
			return false;
		case 57:
			this.skip();
			if(hasDefault) {
				return this.readError("That's default-case redefinition");
			}
			hasDefault = true;
			if(this.readCheckSkip(49,"a colon after default-case")) {
				return true;
			}
			break;
		case 58:
			this.skip();
			if(this.readExpr()) {
				return true;
			}
			if(this.readCheckSkip(49,"a colon after a case")) {
				return true;
			}
			break;
		default:
			if(this.readStat()) {
				return true;
			}
		}
		return this.readSeqStartError("Unclosed switch-block");
	}
	,readEnum: function() {
		if(this.readCheckSkip(4,"an enum name")) {
			return true;
		}
		if(this.readCheckSkip(37,"an opening `{` for enum")) {
			return true;
		}
		var seenComma = true;
		while(this.reader.get_loop()) switch(this.__next(this.reader)) {
		case 4:
			if(!seenComma) {
				return this.readExpect("a `,` or `}` in enum");
			}
			var nk = this.peek();
			if(this.skipIf(nk == 9)) {
				if(this.readExpr()) {
					return true;
				}
				nk = this.peek();
			}
			seenComma = this.skipIf(nk == 46);
			break;
		case 38:
			return false;
		default:
			return this.readExpect("an enum field or `}`");
		}
		return this.readSeqStartError("Unclosed {}");
	}
	,readLambda: function() {
		this.skipIf(this.peek() == 4);
		if(this.skipIf(this.peek() == 35)) {
			var depth = 1;
			_hx_loop1: while(this.reader.get_loop()) switch(this.__next(this.reader)) {
			case 35:
				++depth;
				break;
			case 36:
				if(--depth <= 0) {
					break _hx_loop1;
				}
				break;
			default:
			}
		}
		if(this.readStat()) {
			return true;
		}
		return false;
	}
	,readStat: function(flags,nk) {
		if(flags == null) {
			flags = 0;
		}
		var _gthis = this;
		var q = this.reader;
		nk = nk != null ? nk : this.__next(this.reader);
		var mainKind = nk;
		var z;
		if(nk == null) {
			if(this.readExpr(2 | flags,nk)) {
				return true;
			}
		} else {
			switch(nk) {
			case 5:case 6:
				this.seqStart.setTo(this.reader);
				var found = 0;
				while(q.get_loop()) {
					nk = this.peek();
					if(!this.skipIf(nk == 4)) {
						break;
					}
					++found;
					nk = this.peek();
					if(nk == 49) {
						this.skip();
						nk = this.peek();
						if(this.readCheckSkip(nk,"a type name")) {
							return true;
						}
						nk = this.peek();
					}
					if(nk == 9) {
						this.skip();
						if(this.readExpr()) {
							return true;
						}
					}
					if(!this.skipIf(this.peek() == 46)) {
						break;
					}
				}
				if(found == 0) {
					this.readSeqStartWarn("This `var` has no declarations.");
				}
				break;
			case 8:
				if(this.readEnum()) {
					return true;
				}
				break;
			case 37:
				z = false;
				this.seqStart.setTo(this.reader);
				while(q.get_loop()) {
					if(this.skipIf(this.peek() == 38)) {
						z = true;
						break;
					}
					if(this.readStat()) {
						return true;
					}
				}
				if(!z) {
					return this.readSeqStartError("Unclosed {}");
				}
				break;
			case 44:
				if(this.optRequireSemico) {
					this.addWarning("Stray semicolon");
				}
				break;
			case 51:
				if(this.readExpr()) {
					return true;
				}
				if(_gthis.optRequireParentheses && _gthis.readExpr_currKind != 35) {
					_gthis.addWarning("Expression is missing parentheses");
				}
				this.skipIf(this.peek() == 52);
				if(this.skipIf(this.peek() == 44)) {
					return this.readError("You have a semicolon before your then-expression.");
				}
				if(this.readStat()) {
					return true;
				}
				if(this.skipIf(this.peek() == 53)) {
					if(this.readStat()) {
						return true;
					}
				}
				break;
			case 54:
				switch(this.peek()) {
				case 38:case 44:
					this.skip();
					flags |= 8;
					break;
				default:
					if(this.readExpr()) {
						return true;
					}
				}
				break;
			case 55:
				break;
			case 56:
				z = this.canBreak;
				this.canBreak = true;
				if(this.readExpr()) {
					return true;
				}
				if(_gthis.optRequireParentheses && _gthis.readExpr_currKind != 35) {
					_gthis.addWarning("Expression is missing parentheses");
				}
				if(this.readSwitch()) {
					this.canBreak = z;
					return true;
				} else {
					this.canBreak = z;
				}
				break;
			case 59:
				if(this.readStat()) {
					return true;
				}
				if(this.readCheckSkip(60,"a `catch` after a `try` block")) {
					return true;
				}
				if(this.readExpr()) {
					return true;
				}
				if(this.readStat()) {
					return true;
				}
				if(this.skipIf(this.peek() == 61)) {
					if(this.readStat()) {
						return true;
					}
				}
				break;
			case 62:case 77:case 79:case 81:
				if(this.readExpr()) {
					return true;
				}
				break;
			case 63:
				if(this.__next(this.reader) != 35) {
					return this.readExpect("a `(` to open a for-loop");
				}
				if(!this.skipIf(this.peek() == 44)) {
					if(this.readStat()) {
						return true;
					}
				}
				if(!this.skipIf(this.peek() == 44)) {
					if(this.readExpr()) {
						return true;
					}
					this.skipIf(this.peek() == 44);
				}
				if(!this.skipIf(this.peek() == 36)) {
					if(this.readLoopStat(8)) {
						return true;
					}
					if(this.__next(this.reader) != 36) {
						return this.readExpect("a `)` to close a for-loop");
					}
				}
				if(this.readLoopStat()) {
					return true;
				}
				break;
			case 64:
				if(this.readLoopStat()) {
					return true;
				}
				switch(this.__next(this.reader)) {
				case 65:case 66:
					if(this.readExpr()) {
						return true;
					}
					if(_gthis.optRequireParentheses && _gthis.readExpr_currKind != 35) {
						_gthis.addWarning("Expression is missing parentheses");
					}
					break;
				default:
					return this.readExpect("an `until` or `while` for a do-loop");
				}
				break;
			case 65:case 67:case 70:
				if(this.readExpr()) {
					return true;
				}
				if(_gthis.optRequireParentheses && _gthis.readExpr_currKind != 35) {
					_gthis.addWarning("Expression is missing parentheses");
				}
				if(this.readLoopStat()) {
					return true;
				}
				break;
			case 68:
				if(!this.canBreak) {
					this.addError("Can't use `break` here");
				}
				break;
			case 69:
				if(!this.canContinue) {
					this.addError("Can't use `continue` here");
				}
				break;
			case 7:case 71:
				break;
			case 73:
				break;
			case 75:
				if(this.readLambda()) {
					return true;
				}
				break;
			case 78:
				switch(this.peek()) {
				case 1:case 4:
					this.skip();
					break;
				default:
					return this.readExpect("a label name");
				}
				this.skipIf(this.peek() == 49);
				break;
			default:
				if(this.readExpr(2 | flags,nk)) {
					return true;
				}
			}
		}
		if(!this.skipIf(this.peek() == 44)) {
			if(this.optRequireSemico && !parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__noSemico[mainKind] && (flags & 8) == 0 && q.source.charCodeAt(q.pos + (-1)) != 59) {
				this.addWarning("Expected a semicolon after a statement (" + parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.getName(mainKind) + ")");
			}
		}
		return false;
	}
	,run: function(source,editor,version) {
		this.version = version;
		this.initKeywords();
		var q = this.reader = new parsers_GmlReaderExt(source.trimRight());
		this.name = q.name = editor.file.name;
		this.editor = editor;
		this.errorText = null;
		var ohno = false;
		while(q.get_loop()) {
			var nk = this.__next(this.reader);
			if(nk == 0) {
				break;
			}
			if(this.readStat(0,nk)) {
				this.errors.push(new parsers_linter_GmlLinterProblem(this.errorText,this.errorPos));
				ohno = true;
				break;
			}
		}
		this.reader.clear();
		this.seqStart.clear();
		this.__peekReader.clear();
		return ohno;
	}
	,__class__: parsers_linter_GmlLinter
};
var parsers_linter_GmlLinterProblem = function(text,pos) {
	this.text = text;
	this.pos = pos;
};
$hxClasses["parsers.linter.GmlLinterProblem"] = parsers_linter_GmlLinterProblem;
parsers_linter_GmlLinterProblem.__name__ = "parsers.linter.GmlLinterProblem";
parsers_linter_GmlLinterProblem.prototype = {
	__class__: parsers_linter_GmlLinterProblem
};
var parsers_linter_GmlLinterImports = function() { };
$hxClasses["parsers.linter.GmlLinterImports"] = parsers_linter_GmlLinterImports;
parsers_linter_GmlLinterImports.__name__ = "parsers.linter.GmlLinterImports";
parsers_linter_GmlLinterImports.proc = function(self,dotStart,imp,nv) {
	var q = self.reader;
	var dotPos = -1;
	var dotFull;
	if(q.source.charCodeAt(q.pos) == 46 && tools__$CharCode_CharCode_$Impl_$.isIdent0_ni(q.source.charCodeAt(q.pos + 1))) {
		dotPos = q.pos;
		q.pos += 1;
		q.skipIdent1();
		dotFull = q.source.substring(dotStart,q.pos);
	} else {
		dotFull = nv;
	}
	parsers_GmlExtImport.errorText = "";
	var next = parsers_GmlExtImport.post_procIdent(q,imp,dotStart,dotPos,dotFull);
	if(next != null) {
		q.pushSource(next);
		return false;
	}
	return null;
};
var parsers_linter__$GmlLinterKind_GmlLinterKindSet_$Impl_$ = {};
$hxClasses["parsers.linter._GmlLinterKind.GmlLinterKindSet_Impl_"] = parsers_linter__$GmlLinterKind_GmlLinterKindSet_$Impl_$;
parsers_linter__$GmlLinterKind_GmlLinterKindSet_$Impl_$.__name__ = "parsers.linter._GmlLinterKind.GmlLinterKindSet_Impl_";
parsers_linter__$GmlLinterKind_GmlLinterKindSet_$Impl_$._new = function(set) {
	var this1 = new Array(82);
	var _g = 0;
	while(_g < set.length) this1[set[_g++]] = true;
	return this1;
};
var parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$ = {};
$hxClasses["parsers.linter._GmlLinterKind.GmlLinterKind_Impl_"] = parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$;
parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__name__ = "parsers.linter._GmlLinterKind.GmlLinterKind_Impl_";
parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.getName = function(this1) {
	switch(this1) {
	case 0:
		return "KEOF";
	case 1:
		return "KString";
	case 2:
		return "KNumber";
	case 3:
		return "KUndefined";
	case 4:
		return "KIdent";
	case 5:
		return "KVar";
	case 6:
		return "KGlobalVar";
	case 7:
		return "KMacro";
	case 8:
		return "KEnum";
	case 9:
		return "KSet";
	case 10:
		return "KSetOp";
	case 11:
		return "KEQ";
	case 12:
		return "KNE";
	case 13:
		return "KLT";
	case 14:
		return "KLE";
	case 15:
		return "KGT";
	case 16:
		return "KGE";
	case 17:
		return "KBoolAnd";
	case 18:
		return "KBoolOr";
	case 19:
		return "KBoolXor";
	case 20:
		return "KNot";
	case 21:
		return "KAdd";
	case 22:
		return "KSub";
	case 23:
		return "KMul";
	case 24:
		return "KDiv";
	case 25:
		return "KIntDiv";
	case 26:
		return "KMod";
	case 27:
		return "KAnd";
	case 28:
		return "KOr";
	case 29:
		return "KXor";
	case 30:
		return "KShl";
	case 31:
		return "KShr";
	case 32:
		return "KBitNot";
	case 33:
		return "KInc";
	case 34:
		return "KDec";
	case 35:
		return "KParOpen";
	case 36:
		return "KParClose";
	case 37:
		return "KCubOpen";
	case 38:
		return "KCubClose";
	case 39:
		return "KSqbOpen";
	case 40:
		return "KSqbClose";
	case 41:
		return "KCall";
	case 42:
		return "KField";
	case 43:
		return "KArray";
	case 44:
		return "KSemico";
	case 45:
		return "KDot";
	case 46:
		return "KComma";
	case 47:
		return "KHash";
	case 48:
		return "KQMark";
	case 49:
		return "KColon";
	case 50:
		return "KAtSign";
	case 51:
		return "KIf";
	case 52:
		return "KThen";
	case 53:
		return "KElse";
	case 54:
		return "KReturn";
	case 55:
		return "KExit";
	case 56:
		return "KSwitch";
	case 57:
		return "KDefault";
	case 58:
		return "KCase";
	case 59:
		return "KTry";
	case 60:
		return "KCatch";
	case 61:
		return "KFinally";
	case 62:
		return "KThrow";
	case 63:
		return "KFor";
	case 64:
		return "KDo";
	case 65:
		return "KWhile";
	case 66:
		return "KUntil";
	case 67:
		return "KRepeat";
	case 68:
		return "KBreak";
	case 69:
		return "KContinue";
	case 70:
		return "KWith";
	case 71:
		return "KMFuncDecl";
	case 72:
		return "KMFunc";
	case 73:
		return "KArgs";
	case 74:
		return "KLambda";
	case 75:
		return "KLamDef";
	case 76:
		return "KImport";
	case 77:
		return "KYield";
	case 78:
		return "KLabel";
	case 79:
		return "KGoto";
	case 80:
		return "KLiveIn";
	case 81:
		return "KLiveWait";
	case 82:
		return "KMaxKind";
	default:
		return "unknown[" + this1 + "]";
	}
};
var parsers_linter_GmlLinterMFunc = function() { };
$hxClasses["parsers.linter.GmlLinterMFunc"] = parsers_linter_GmlLinterMFunc;
parsers_linter_GmlLinterMFunc.__name__ = "parsers.linter.GmlLinterMFunc";
parsers_linter_GmlLinterMFunc.read = function(self,flags) {
	var mfName = self.get_nextVal();
	var mf = gml_GmlAPI.gmlMFuncs[mfName];
	var q = self.reader;
	q.skipSpaces0();
	if(q.source.charCodeAt(q.pos++) != 40) {
		return self.readExpect("a `(` after an #mfunc " + mfName);
	}
	var mfStart = q.pos;
	self.seqStart.setTo(q);
	var mcArgStart = [];
	var mcArgTill = [];
	var mcArgString = [];
	var mcArgRow = [];
	var mcArgRowStart = [];
	var mcArgSource = q.source;
	var mcArgContext = q.name;
	q.skipSpaces0();
	if(q.source.charCodeAt(q.pos) == 41) {
		q.pos += 1;
	} else {
		var mcArgDone = false;
		var argPos = q.pos;
		var depth = 1;
		_hx_loop1: while(q.pos < q.length) {
			var p = q.pos;
			switch(q.source.charCodeAt(q.pos++)) {
			case 44:
				if(depth == 1) {
					mcArgStart.push(argPos);
					mcArgTill.push(p);
					mcArgString.push(null);
					mcArgRow.push(q.row);
					mcArgRowStart.push(q.rowStart);
					argPos = q.pos;
				}
				break;
			case 40:case 91:case 123:
				++depth;
				break;
			case 41:case 93:case 125:
				if(--depth <= 0) {
					mcArgStart.push(argPos);
					mcArgTill.push(p);
					mcArgString.push(null);
					mcArgRow.push(q.row);
					mcArgRowStart.push(q.rowStart);
					mcArgDone = true;
					break _hx_loop1;
				}
				break;
			}
		}
		if(!mcArgDone) {
			return self.readSeqStartError("Unclosed () after an #mfunc " + mfName);
		}
	}
	var mcArgc = mcArgStart.length;
	var mfArgc = mf.args.length;
	if(mcArgc > mfArgc) {
		if(mf.hasRest) {
			mcArgTill[mfArgc - 1] = mcArgTill.pop();
			mcArgStart.length = mfArgc;
			mcArgTill.length = mfArgc;
			mcArgRow.length = mfArgc;
			mcArgRowStart.length = mfArgc;
			mcArgString.length = mfArgc;
		} else {
			return self.readError("Too many arguments (" + mcArgc + "/" + mfArgc + ") for #mfunc " + mfName);
		}
	} else if(mcArgc < mfArgc) {
		return self.readError("Too few arguments (" + mcArgc + "/" + mfArgc + ") for #mfunc " + mfName);
	}
	var order = mf.order;
	var i = order.length;
	var mfPre = mfName + "_mf";
	while(--i >= 0) {
		var mfPre_i = mfPre + (i + 1);
		q.pushSource(mfPre_i,mfPre_i);
		q.showOnStack = false;
		var ord = order[i];
		var ai;
		if(typeof(ord) == "number") {
			ai = ord;
			q.pushSourceExt(mcArgSource,mcArgStart[ai],mcArgTill[ai],mcArgRow[ai],mcArgRowStart[ai],mcArgContext);
		} else {
			switch(ord[0]) {
			case 0:
				break;
			case 1:
				q.pushSource("",mcArgContext);
				break;
			case 2:
				var p0 = q.pos;
				q.pos = mfStart;
				q.pushSource(parsers_GmlExtMFunc.magicMap[ord[1]](self.editor,q),"magic[" + Std.string(ord[1]) + "] in " + mfName + " in " + mcArgContext);
				q.pos = p0;
				break;
			case 3:case 4:case 5:
				ai = ord[1];
				var av = mcArgString[ai];
				if(av == null) {
					av = mcArgSource.substring(mcArgStart[ai],mcArgTill[ai]);
					mcArgString[ai] = av;
				}
				switch(ord[0]) {
				case 3:
					av = tools_NativeString.insertAtPadLeft(av,ord[2]);
					break;
				case 4:
					av = tools_NativeString.insertAtPadRight(av,ord[2]);
					break;
				case 5:
					av = tools_NativeString.insertAtPadBoth(av,ord[2],ord[3]);
					break;
				default:
				}
				q.pushSourceExt(av,0,av.length,mcArgRow[ai],mcArgRowStart[ai] - mcArgStart[ai],"Concat in " + mfName + " in " + mcArgContext);
				break;
			}
		}
		q.showOnStack = false;
	}
	q.pushSource(mfPre + "0",mfPre + "0");
	q.showOnStack = false;
	if((flags & 2) != 0) {
		return self.readStat(flags & -3);
	} else {
		return self.readExpr(flags);
	}
};
var parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$ = {};
$hxClasses["parsers.linter._GmlLinterPrefs.GmlLinterPrefs_Impl_"] = parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$;
parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$.__name__ = "parsers.linter._GmlLinterPrefs.GmlLinterPrefs_Impl_";
var ui_Sidebar = function() { };
$hxClasses["ui.Sidebar"] = ui_Sidebar;
ui_Sidebar.__name__ = "ui.Sidebar";
ui_Sidebar.sync = function() {
	var n = ui_Sidebar.list.length;
	var v = n == 0 ? "none" : "";
	if(ui_Sidebar.sizer.style.display != v) {
		ui_Sidebar.sizer.style.display = v;
		ui_Sidebar.outer.style.display = v;
		GMEdit_Splitter.syncMain();
		var e = new CustomEvent("resize");
		e.initEvent("resize");
		window.dispatchEvent(e);
	}
	ui_Sidebar.select.style.display = n <= 1 ? "none" : "";
};
ui_Sidebar.set = function(name) {
	var item = ui_Sidebar.map[name];
	if(item == null) {
		return;
	}
	var curr = ui_Sidebar.panel.children[0];
	if(curr == item.el) {
		return;
	}
	var fn = ui_Sidebar.select.onchange;
	ui_Sidebar.select.onchange = null;
	ui_Sidebar.select.value = name;
	if(curr != null) {
		ui_Sidebar.panel.removeChild(curr);
	}
	ui_Sidebar.panel.appendChild(item.el);
	ui_Sidebar.select.onchange = fn;
};
ui_Sidebar.add = function(name,el) {
	var item = ui_Sidebar.map[name];
	if(item != null) {
		HxOverrides.remove(ui_Sidebar.list,item);
	}
	item = new ui__$Sidebar_SidebarItem(name,el);
	ui_Sidebar.map[name] = item;
	ui_Sidebar.list.push(item);
	ui_Sidebar.select.appendChild(item.opt);
	if(ui_Sidebar.panel.children[0] == null) {
		ui_Sidebar.set(name);
	}
	ui_Sidebar.sync();
};
ui_Sidebar.remove = function(name,el) {
	var item = ui_Sidebar.map[name];
	if(item == null) {
		return false;
	}
	if(el != null && item.el != el) {
		return false;
	}
	var this1 = ui_Sidebar.map;
	delete this1[name];
	HxOverrides.remove(ui_Sidebar.list,item);
	ui_Sidebar.select.removeChild(item.opt);
	if(ui_Sidebar.panel.children[0] == item.el) {
		ui_Sidebar.panel.removeChild(item.el);
		if(ui_Sidebar.list.length > 0) {
			ui_Sidebar.set(ui_Sidebar.list[0].name);
		}
	}
	ui_Sidebar.sync();
	return true;
};
ui_Sidebar.init = function() {
	ui_Sidebar.select = document.querySelector("#misc-select");
	ui_Sidebar.panel = document.querySelector("#misc-panel");
	ui_Sidebar.sizer = document.querySelector("#misc-splitter-td");
	ui_Sidebar.outer = document.querySelector("#misc-td");
	ui_Sidebar.select.onchange = function(_) {
		ui_Sidebar.set(ui_Sidebar.select.value);
	};
};
var plugins_PluginAPI = $hx_exports["GMEdit"] = function() { };
$hxClasses["plugins.PluginAPI"] = plugins_PluginAPI;
plugins_PluginAPI.__name__ = "plugins.PluginAPI";
plugins_PluginAPI.extend = function(proto,fields) {
	throw new js__$Boot_HaxeError("Hooked at runtime!");
};
plugins_PluginAPI.register = function(pluginName,data) {
	var state = plugins_PluginManager.registerMap[pluginName];
	if(state == null) {
		throw new js__$Boot_HaxeError("There's no plugin named " + pluginName);
	}
	state.data = data;
};
plugins_PluginAPI._emit = function(eventName,e) {
	throw new js__$Boot_HaxeError("Failed to hook EventEmitter for PluginAPI");
};
plugins_PluginAPI._signal = function(eventName,e) {
	throw new js__$Boot_HaxeError("Failed to hook EventEmitter for PluginAPI");
};
var plugins_PluginManager = function() { };
$hxClasses["plugins.PluginManager"] = plugins_PluginManager;
plugins_PluginManager.__name__ = "plugins.PluginManager";
plugins_PluginManager.load = function(name,cb) {
	var state = plugins_PluginManager.pluginMap[name];
	if(state != null) {
		if(state.ready) {
			cb(state.error);
		} else {
			state.listeners.push(cb);
		}
		return;
	}
	var dir = plugins_PluginManager.pluginDir[name];
	if(dir == null) {
		if(cb != null) {
			cb(new Error("Plugin " + name + " does not exist"));
		}
		return;
	}
	var state1 = new plugins_PluginState(name);
	if(cb != null) {
		state1.listeners.push(cb);
	}
	var callback = function(err,conf) {
		if(err != null) {
			state1.finish(err);
			return;
		}
		if(conf.name == null) {
			state1.finish(new Error("Plugin's config.json has no name"));
			return;
		} else {
			plugins_PluginManager.registerMap[conf.name] = state1;
		}
		var loadResources = function() {
			var queue = [];
			if(conf.stylesheets != null) {
				var _g = 0;
				var _g1 = conf.stylesheets;
				while(_g < _g1.length) queue.push({ kind : 1, rel : _g1[_g++]});
			}
			if(conf.scripts != null) {
				var _g2 = 0;
				var _g11 = conf.scripts;
				while(_g2 < _g11.length) queue.push({ kind : 0, rel : _g11[_g2++]});
			}
			var loadNextResource = null;
			loadNextResource = function() {
				var pair = queue.shift();
				var rel = pair.rel;
				switch(pair.kind) {
				case 0:
					var script = document.createElement("script");
					script.setAttribute("plugin",conf.name);
					script.onload = function(_) {
						if(queue.length > 0) {
							loadNextResource();
						} else {
							state1.finish();
						}
					};
					script.onerror = function(e) {
						state1.finish(e.error);
					};
					script.src = "" + dir + "/" + name + "/" + rel;
					document.head.appendChild(script);
					break;
				case 1:
					var style = document.createElement("link");
					style.setAttribute("plugin",conf.name);
					style.onload = function(_1) {
						if(queue.length > 0) {
							loadNextResource();
						} else {
							state1.finish();
						}
					};
					style.onerror = function(e1) {
						state1.finish(e1.error);
					};
					style.rel = "stylesheet";
					style.href = "" + dir + "/" + name + "/" + rel;
					document.head.appendChild(style);
					break;
				}
			};
			if(queue.length > 0) {
				loadNextResource();
			} else {
				state1.finish();
			}
		};
		var deps = conf.dependencies;
		if(deps != null && deps.length > 0) {
			var depc = deps.length;
			var _g3 = 0;
			while(_g3 < deps.length) plugins_PluginManager.load(deps[_g3++],function(e2) {
				if(e2 != null) {
					state1.finish(e2);
				} else if(!state1.ready) {
					if((depc -= 1) <= 0) {
						loadResources();
					}
				}
			});
		} else {
			loadResources();
		}
	};
	Electron_FS.readFile("" + dir + "/" + name + "/config.json","utf8",function(e3,d) {
		if(d != null) {
			try {
				d = JSON.parse(d);
			} catch( x ) {
				d = null;
				e3 = ((x) instanceof js__$Boot_HaxeError) ? x.val : x;
			}
		}
		callback(e3,d);
	});
};
plugins_PluginManager.init = function() {
	try {
		$hxClasses["Main"];
		window.$hxClasses = $hxClasses;
		window.$gmedit = $hxClasses;
	} catch( x ) {
		console.error("Couldn't expose hxClasses:",((x) instanceof js__$Boot_HaxeError) ? x.val : x);
	}
	try {
		plugins_PluginAPI.extend = $extend;
	} catch( x1 ) {
		console.error("Couldn't expose $extend:",((x1) instanceof js__$Boot_HaxeError) ? x1.val : x1);
	}
	try {
		var EventEmitter = ace.require("ace/lib/event_emitter").EventEmitter;
		AceOOP.implement(plugins_PluginAPI,EventEmitter);
	} catch( x2 ) {
		console.error("Couldn't add event emitting:",((x2) instanceof js__$Boot_HaxeError) ? x2.val : x2);
	}
	var list;
	if(Electron_FS.existsSync != null) {
		list = [];
		var dir = electron_FileWrap.userPath + "/plugins";
		if(Electron_FS.existsSync(dir)) {
			var _g = 0;
			var _g1 = Electron_FS.readdirSync(dir);
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				var full = "" + dir + "/" + name + "/config.json";
				if(Electron_FS.existsSync(full) && list.indexOf(name) < 0) {
					list.push(name);
					plugins_PluginManager.pluginDir[name] = dir;
				}
			}
		}
		var dir1 = haxe_io_Path.join([Main.modulePath,"plugins"]);
		if(Electron_FS.existsSync(dir1)) {
			var _g2 = 0;
			var _g11 = Electron_FS.readdirSync(dir1);
			while(_g2 < _g11.length) {
				var name1 = _g11[_g2];
				++_g2;
				var full1 = "" + dir1 + "/" + name1 + "/config.json";
				if(Electron_FS.existsSync(full1) && list.indexOf(name1) < 0) {
					list.push(name1);
					plugins_PluginManager.pluginDir[name1] = dir1;
				}
			}
		}
	} else {
		list = ["plugins/enum-names","plugins/show-aside","plugins/outline-view"];
	}
	var _g3 = 0;
	while(_g3 < list.length) {
		var name2 = list[_g3];
		++_g3;
		plugins_PluginManager.load(name2);
	}
	plugins_PluginManager.ready = true;
};
var plugins_PluginState = function(name) {
	this.data = null;
	this.listeners = [];
	this.error = null;
	this.ready = false;
	this.name = name;
};
$hxClasses["plugins.PluginState"] = plugins_PluginState;
plugins_PluginState.__name__ = "plugins.PluginState";
plugins_PluginState.prototype = {
	finish: function(error) {
		this.ready = true;
		if(error == null && this.data == null) {
			error = new Error("Plugin did not call register()");
		}
		if(error != null) {
			console.error("Plugin load failed for " + this.name + ":",error);
		} else {
			console.log("Plugin loaded: " + this.name);
		}
		this.error = error;
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) _g1[_g++](error);
		this.listeners.length = 0;
		if(error == null && this.data.init != null) {
			this.data.init();
		}
	}
	,__class__: plugins_PluginState
};
var raw_GmlLoader = function() { };
$hxClasses["raw.GmlLoader"] = raw_GmlLoader;
raw_GmlLoader.__name__ = "raw.GmlLoader";
raw_GmlLoader.run = function(project) {
	var pfx = ((project) instanceof yy_YyZip) ? "" : project.dir;
	var ths = [];
	var loadrec = null;
	loadrec = function(out,dirFull,dirRel) {
		var rd = [];
		var rf = [];
		var _g = 0;
		var _g1 = project.readdirSync(dirFull);
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			var item = pair.fileName;
			var full = haxe_io_Path.join([dirFull,item]);
			var rel = haxe_io_Path.join([dirRel,item]);
			if(pair.isDirectory) {
				var nd = ui_treeview_TreeView.makeAssetDir(item,rel);
				loadrec(nd.treeItems,full,rel);
				rd.push(nd);
			} else {
				var ifull = haxe_io_Path.join([pfx,full]);
				var item1 = ui_treeview_TreeView.makeAssetItem(item,rel,ifull,"file");
				rf.push(item1);
				if(ui_Preferences.current.assetThumbs) {
					switch(haxe_io_Path.extension(full).toLowerCase()) {
					case "gif":case "jpeg":case "png":
						ths.push({ path : ifull, th : full, item : item1});
						break;
					}
				}
			}
		}
		var _g2 = 0;
		while(_g2 < rd.length) out.appendChild(rd[_g2++]);
		var _g3 = 0;
		while(_g3 < rf.length) out.appendChild(rf[_g3++]);
	};
	ui_treeview_TreeView.clear();
	loadrec(ui_treeview_TreeView.element,"","");
	var _g4 = 0;
	while(_g4 < ths.length) {
		var pair1 = ths[_g4];
		++_g4;
		ui_treeview_TreeView.setThumb(pair1.path,project.fullPath(pair1.th),pair1.item);
	}
};
var shaders_ShaderAPI = function() { };
$hxClasses["shaders.ShaderAPI"] = shaders_ShaderAPI;
shaders_ShaderAPI.__name__ = "shaders.ShaderAPI";
shaders_ShaderAPI.init = function() {
	var name = "glsl";
	var kind = Object.create(null);
	var doc = Object.create(null);
	var comp = [];
	Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,"api/shaders/keywords_" + name + ".txt"]),"utf8",function(e,d) {
		tools_ERegTools.each(new EReg("(\\w+)","gm"),d,function(rx) {
			var k = rx.matched(1);
			kind[k] = "keyword";
		});
	});
	Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,"api/shaders/" + name + "_names"]),"utf8",function(e1,defs) {
		parsers_GmlParseAPI.loadStd(defs,{ kind : kind, doc : doc, comp : comp, kindPrefix : name});
	});
	shaders_ShaderAPI.glslKind = kind;
	shaders_ShaderAPI.glslComp = comp;
	shaders_ShaderAPI.glslDoc = doc;
	var name1 = "hlsl";
	var kind1 = Object.create(null);
	var doc1 = Object.create(null);
	var comp1 = [];
	Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,"api/shaders/keywords_" + name1 + ".txt"]),"utf8",function(e2,d1) {
		tools_ERegTools.each(new EReg("(\\w+)","gm"),d1,function(rx1) {
			var k1 = rx1.matched(1);
			kind1[k1] = "keyword";
		});
	});
	Electron_FS.readFile(haxe_io_Path.join([Main.modulePath,"api/shaders/" + name1 + "_names"]),"utf8",function(e3,defs1) {
		parsers_GmlParseAPI.loadStd(defs1,{ kind : kind1, doc : doc1, comp : comp1, kindPrefix : name1});
	});
	shaders_ShaderAPI.hlslKind = kind1;
	shaders_ShaderAPI.hlslComp = comp1;
	shaders_ShaderAPI.hlslDoc = doc1;
};
var shaders_ShaderHighlight = $hx_exports["AceShaderHighlight"] = function() {
	ace_extern_AceHighlight.call(this);
	this.$rules = shaders_ShaderHighlight.makeRules(this,shaders_ShaderHighlight.nextKind);
	this.normalizeRules();
};
$hxClasses["shaders.ShaderHighlight"] = shaders_ShaderHighlight;
shaders_ShaderHighlight.__name__ = "shaders.ShaderHighlight";
shaders_ShaderHighlight.makeRules = function(hl,kind) {
	var rules = { };
	var pkg;
	var identFunc;
	switch(kind) {
	case 1:
		identFunc = function(s) {
			return (shaders_ShaderAPI.glslKind[s] || "identifier");
		};
		pkg = "glsl";
		break;
	case 2:
		identFunc = function(s1) {
			return (shaders_ShaderAPI.hlslKind[s1] || "identifier");
		};
		pkg = "hlsl";
		break;
	default:
		identFunc = function(s2) {
			return "identifier";
		};
		pkg = "shader";
	}
	rules["start"] = [tools_HighlightTools.rule("comment.line","//.*$",null),tools_HighlightTools.rpush("comment","/\\*",pkg + ".comment"),tools_HighlightTools.rule("numeric","0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",null),tools_HighlightTools.rule("numeric","[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",null),tools_HighlightTools.rule(identFunc,"\\w+",null),tools_HighlightTools.rule("preproc","#(\\w+.+)",null),tools_HighlightTools.rule("set.operator","=|\\+=|\\-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=",null),tools_HighlightTools.rule("operator","!|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|==|!=|<=|>=|<>|<|>|!|&&|\\|\\|",null),tools_HighlightTools.rule("punctuation.operator","\\?|:|,|;|\\.",null),tools_HighlightTools.rule("curly.paren.lparen","\\{",null),tools_HighlightTools.rule("curly.paren.rparen","\\}",null),tools_HighlightTools.rule("paren.lparen","[\\[(]",null),tools_HighlightTools.rule("paren.rparen","[\\])]",null),tools_HighlightTools.rule("text","\\s+",null)];
	rules[pkg + ".comment"] = [tools_HighlightTools.rule("comment",".*?\\*/","pop"),tools_HighlightTools.rdef("comment")];
	return rules;
};
shaders_ShaderHighlight.define = function($require,exports,module) {
	var oop = $require("../lib/oop");
	var TextHighlightRules = $require("./text_highlight_rules").TextHighlightRules;
	oop.inherits(shaders_ShaderHighlight,TextHighlightRules);
	exports.ShaderHighlightRules = shaders_ShaderHighlight;
};
shaders_ShaderHighlight.init = function() {
	ace.define("ace/mode/shader_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/doc_comment_highlight_rules","ace/mode/text_highlight_rules"],shaders_ShaderHighlight.define);
};
shaders_ShaderHighlight.__super__ = ace_extern_AceHighlight;
shaders_ShaderHighlight.prototype = $extend(ace_extern_AceHighlight.prototype,{
	__class__: shaders_ShaderHighlight
});
var tools_Base64 = function() { };
$hxClasses["tools.Base64"] = tools_Base64;
tools_Base64.__name__ = "tools.Base64";
tools_Base64.s2b = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return a;
};
tools_Base64.b2s = function(b) {
	var s = "";
	var fcc = _$String_String_$Impl_$.fromCharCode;
	var i = 0;
	var max = b.length;
	while(i < max) {
		var c = b[i++];
		if(c < 128) {
			if(c == 0) {
				break;
			}
			s += fcc(c);
		} else if(c < 224) {
			s += fcc((c & 63) << 6 | b[i++] & 127);
		} else if(c < 240) {
			s += fcc((c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127);
		} else {
			var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
			s += fcc((u >> 10) + 55232);
			s += fcc(u & 1023 | 56320);
		}
	}
	return s;
};
tools_Base64.encode = function(s) {
	var c = tools_Base64.chars;
	var b = tools_Base64.s2b(s);
	var n = b.length;
	var r = "";
	var i = 0;
	while(i < n) {
		r += c.charAt(b[i] >> 2);
		r += c.charAt((b[i] & 3) << 4 | b[i + 1] >> 4);
		r += c.charAt((b[i + 1] & 15) << 2 | b[i + 2] >> 6);
		r += c.charAt(b[i + 2] & 63);
		i += 3;
	}
	if(n % 3 == 2) {
		r = r.substring(0,r.length - 1) + "=";
	} else if(n % 3 == 1) {
		r = r.substring(0,r.length - 2) + "==";
	}
	return r;
};
tools_Base64.decode = function(s) {
	var c = tools_Base64.chars;
	var r = [];
	var n = s.length;
	var i = 0;
	while(i < n) {
		var e1 = i++;
		var e2 = c.indexOf(s.charAt(i++));
		var e3 = c.indexOf(s.charAt(i++));
		var e4 = c.indexOf(s.charAt(i++));
		r.push(c.indexOf(s.charAt(e1)) << 2 | e2 >> 4);
		r.push((e2 & 15) << 4 | e3 >> 2);
		r.push((e3 & 3) << 6 | e4 & 63);
	}
	if(HxOverrides.cca(s,n - 1) == 61) {
		r.pop();
	}
	if(HxOverrides.cca(s,n - 2) == 61) {
		r.pop();
	}
	return tools_Base64.b2s(r);
};
var tools_BufferTools = function() { };
$hxClasses["tools.BufferTools"] = tools_BufferTools;
tools_BufferTools.__name__ = "tools.BufferTools";
tools_BufferTools.toBase64 = function(bytes,offset,length) {
	var pos = 0;
	var raw = "";
	while(pos < length) {
		var end = pos + 32768;
		if(end > length) {
			end = length;
		}
		var sub = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(bytes,offset + pos,end - pos);
		raw += String.fromCharCode.apply(null, sub);
		pos = end;
	}
	return window.btoa(raw);
};
tools_BufferTools.toObjectURL = function(bytes,path,type) {
	try {
		var blob = new Blob([bytes.b.bufferValue],{ type : type});
		var nav = window.navigator;
		if(nav.msSaveBlob != null) {
			nav.msSaveBlob(blob,path);
			return null;
		}
		return URL.createObjectURL(blob);
	} catch( err ) {
		console.error("Failed to make blob",((err) instanceof js__$Boot_HaxeError) ? err.val : err);
		return "data:" + type + ";base64," + tools_BufferTools.toBase64(bytes,0,bytes.length);
	}
};
tools_BufferTools.inflate = function(bytes) {
	if(bytes.length > 0) {
		var data = bytes.b.bufferValue;
		data = window.pako.inflateRaw(data);
		return haxe_io_Bytes.ofData(data);
	} else {
		return new haxe_io_Bytes(new ArrayBuffer(0));
	}
};
tools_BufferTools.saveAs = function(bytes,path,mimetype) {
	var url = tools_BufferTools.toObjectURL(bytes,path,mimetype);
	if(url == null) {
		return false;
	}
	var link = document.createElement("a");
	link.href = url;
	link.download = path;
	document.body.appendChild(link);
	link.click();
	window.setTimeout(function() {
		link.parentElement.removeChild(link);
		try {
			URL.revokeObjectURL(url);
		} catch( _ ) {
		}
	});
	return true;
};
var tools__$CharCode_CharCode_$Impl_$ = {};
$hxClasses["tools._CharCode.CharCode_Impl_"] = tools__$CharCode_CharCode_$Impl_$;
tools__$CharCode_CharCode_$Impl_$.__name__ = "tools._CharCode.CharCode_Impl_";
tools__$CharCode_CharCode_$Impl_$.isSpace1_ni = function(this1) {
	if(!(this1 > 8 && this1 < 14)) {
		return this1 == 32;
	} else {
		return true;
	}
};
tools__$CharCode_CharCode_$Impl_$.isIdent0_ni = function(this1) {
	if(!(this1 == 95 || this1 >= 97 && this1 <= 122)) {
		if(this1 >= 65) {
			return this1 <= 90;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
tools__$CharCode_CharCode_$Impl_$.isIdent1_ni = function(this1) {
	if(!(this1 == 95 || this1 >= 97 && this1 <= 122 || this1 >= 65 && this1 <= 90)) {
		if(this1 >= 48) {
			return this1 <= 57;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
tools__$CharCode_CharCode_$Impl_$.isHex = function(this1) {
	if(!(this1 >= 48 && this1 <= 57 || this1 >= 97 && this1 <= 102)) {
		if(this1 >= 65) {
			return this1 <= 70;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var tools_ERegTools = function() { };
$hxClasses["tools.ERegTools"] = tools_ERegTools;
tools_ERegTools.__name__ = "tools.ERegTools";
tools_ERegTools.each = function(r,s,f) {
	var i = 0;
	while(r.matchSub(s,i)) {
		f(r);
		var p = r.matchedPos();
		i = p.pos + p.len;
	}
};
var tools_HighlightTools = function() { };
$hxClasses["tools.HighlightTools"] = tools_HighlightTools;
tools_HighlightTools.__name__ = "tools.HighlightTools";
tools_HighlightTools.rule = function(tk,rx,next) {
	return { token : tk, regex : rx, next : next};
};
tools_HighlightTools.rtk = function(type,value) {
	return { type : type, value : value};
};
tools_HighlightTools.rdef = function(tk) {
	return { defaultToken : tk};
};
tools_HighlightTools.rpush = function(tk,rx,push) {
	return { token : tk, regex : rx, push : push};
};
tools_HighlightTools.rulePairs = function(pairs_rx_tk,next) {
	var rs = "";
	var i = 0;
	var tokens = [];
	while(i < pairs_rx_tk.length) {
		rs += "(" + pairs_rx_tk[i] + ")";
		tokens.push(pairs_rx_tk[i + 1]);
		i += 2;
	}
	return { token : tokens, regex : rs, next : next};
};
tools_HighlightTools.rpushPairs = function(pairs_rx_tk,push) {
	var rs = "";
	var i = 0;
	var tokens = [];
	while(i < pairs_rx_tk.length) {
		rs += "(" + pairs_rx_tk[i] + ")";
		tokens.push(pairs_rx_tk[i + 1]);
		i += 2;
	}
	return { token : tokens, regex : rs, push : push};
};
var tools_HtmlTools = function() { };
$hxClasses["tools.HtmlTools"] = tools_HtmlTools;
tools_HtmlTools.__name__ = "tools.HtmlTools";
tools_HtmlTools.clearInner = function(el) {
	el.innerHTML = "";
};
tools_HtmlTools.setInnerText = function(el,text) {
	el.innerHTML = "";
	el.appendChild(document.createTextNode(text));
};
tools_HtmlTools.setAttributeFlag = function(el,attr,val) {
	if(val) {
		if(!el.hasAttribute(attr)) {
			el.setAttribute(attr,"");
		}
	} else if(el.hasAttribute(attr)) {
		el.removeAttribute(attr);
	}
};
tools_HtmlTools.insertAfterEl = function(ctr,insertWhat,afterWhat) {
	ctr.insertBefore(insertWhat,afterWhat.nextElementSibling);
};
tools_HtmlTools.insertBeforeSelf = function(el,insertWhat) {
	el.parentElement.insertBefore(insertWhat,el);
};
tools_HtmlTools.insertAfterSelf = function(el,insertWhat) {
	tools_HtmlTools.insertAfterEl(el.parentElement,insertWhat,el);
};
var tools_NativeArray = function() { };
$hxClasses["tools.NativeArray"] = tools_NativeArray;
tools_NativeArray.__name__ = "tools.NativeArray";
tools_NativeArray.clear = function(arr) {
	arr.length = 0;
};
tools_NativeArray.clearResize = function(arr,newSize) {
	arr.length = 0;
	arr.length = newSize;
};
tools_NativeArray.resize = function(arr,newSize) {
	arr.length = newSize;
};
tools_NativeArray.setTo = function(arr,to) {
	var n = to.length;
	arr.length = n;
	var i = 0;
	while(i < n) {
		arr[i] = to[i];
		++i;
	}
};
tools_NativeArray.forEach = function(arr,fn) {
	arr.forEach(fn);
};
tools_NativeArray.insertAfter = function(arr,insertWhat,afterWhat) {
	var i = arr.indexOf(afterWhat);
	if(i >= 0) {
		arr.splice(i + 1,0,insertWhat);
	} else {
		arr.push(insertWhat);
	}
};
tools_NativeArray.insertBefore = function(arr,insertWhat,beforeWhat) {
	var i = arr.indexOf(beforeWhat);
	if(i >= 0) {
		arr.splice(i,0,insertWhat);
	} else {
		arr.unshift(insertWhat);
	}
};
tools_NativeArray.replaceOne = function(arr,replaceWhat,withWhat) {
	var i = arr.indexOf(replaceWhat);
	if(i >= 0) {
		arr[i] = withWhat;
		return true;
	} else {
		return false;
	}
};
var tools_NativeString = function() { };
$hxClasses["tools.NativeString"] = tools_NativeString;
tools_NativeString.__name__ = "tools.NativeString";
tools_NativeString.splitReg = function(s,d) {
	return s.split(d);
};
tools_NativeString.replaceExt = function(s,what,by) {
	return s.replace(what,by);
};
tools_NativeString.splitRx = function(s,at) {
	return s.split(at);
};
tools_NativeString.matchRx = function(s,rx) {
	return s.match(rx);
};
tools_NativeString.capitalize = function(s) {
	return s.charAt(0).toUpperCase() + s.substring(1);
};
tools_NativeString.fastSub = function(s,start,len) {
	return s.substr(start,len);
};
tools_NativeString.trimRight = function(s) {
	return s.trimRight();
};
tools_NativeString.trimTrailRn = function(str,count) {
	if(count == null) {
		count = 1;
	}
	while(--count >= 0) str = str.replace(tools_NativeString.trimTrailBreak_1,"$1");
	return str;
};
tools_NativeString.trimLeft = function(s) {
	return s.trimLeft();
};
tools_NativeString.trimBoth = function(s) {
	return s.trim();
};
tools_NativeString.startsWith = function(s,q) {
	return s.startsWith(q);
};
tools_NativeString.endsWith = function(s,q) {
	return s.endsWith(q);
};
tools_NativeString.contains = function(s,q) {
	return s.includes(q);
};
tools_NativeString.escapeRx = function(s) {
	return s.replace(tools_NativeString.escapeRx_1,"\\$1");
};
tools_NativeString.escapeProp = function(s) {
	return s.replace(tools_NativeString.escapeProp_1,"\\$1");
};
tools_NativeString.insert = function(s,i,sub) {
	return s.substring(0,i) + sub + s.substring(i);
};
tools_NativeString.getPadLeft = function(s) {
	return s.substring(0,s.length - s.trimLeft().length);
};
tools_NativeString.getPadRight = function(s) {
	return s.substring(s.trimRight().length);
};
tools_NativeString.insertAtPadLeft = function(s,what) {
	var s1 = s.trimLeft();
	return s.substring(0,s.length - s1.length) + what + s1;
};
tools_NativeString.insertAtPadRight = function(s,what) {
	var s1 = s.trimRight();
	return s1 + what + s.substring(s1.length);
};
tools_NativeString.insertAtPadBoth = function(s,atStart,atEnd) {
	var s1 = s.trimLeft();
	var p1 = s.substring(0,s.length - s1.length);
	var s2 = s1.trimRight();
	return p1 + atStart + s2 + atEnd + s1.substring(s2.length);
};
tools_NativeString.nzcct = function(s,sep,add) {
	if(s == null || s == "") {
		return add;
	}
	return s + sep + add;
};
tools_NativeString.yyJson = function(value) {
	var s = JSON.stringify(value,null,"    ");
	s = s.replace(tools_NativeString.yyJson_1,"$1$2[\n$1    \n$1]");
	s = s.replace(tools_NativeString.yyJson_2,"\r\n");
	return s;
};
tools_NativeString.offsetToPos = function(s,ofs) {
	var rowStart = s.lastIndexOf("\n",ofs);
	var col = ofs - rowStart;
	var row = 0;
	while(rowStart >= 0) {
		++row;
		rowStart = rowStart > 0 ? s.lastIndexOf("\n",rowStart - 1) : -1;
	}
	return { column : col, row : row};
};
var tools_PathTools = function() { };
$hxClasses["tools.PathTools"] = tools_PathTools;
tools_PathTools.__name__ = "tools.PathTools";
tools_PathTools.ptDepth = function(path) {
	return StringTools.replace(haxe_io_Path.directory(path),"\\","/").split("/").length;
};
tools_PathTools.ptDetectProject = function(path) {
	switch(haxe_io_Path.extension(path).toLowerCase()) {
	case "cfg":case "txt":
		if(haxe_io_Path.withoutExtension(haxe_io_Path.withoutDirectory(path)).toLowerCase() == "main") {
			return -1;
		}
		break;
	case "gmx":
		if(haxe_io_Path.extension(haxe_io_Path.withoutExtension(path)).toLowerCase() == "project") {
			return 1;
		}
		break;
	case "yyp":
		return 2;
	}
	return 0;
};
var tools_StringBuilder = function() {
	this.addFormat = null;
	StringBuf.call(this);
	this.addFormat = Reflect.makeVarArgs($bind(this,this.addFormatImpl));
};
$hxClasses["tools.StringBuilder"] = tools_StringBuilder;
tools_StringBuilder.__name__ = "tools.StringBuilder";
tools_StringBuilder.formatInit = function() {
	var _g = new haxe_ds_StringMap();
	var value = function(b,s,i) {
		if(typeof(s) == "string") {
			b.b += Std.string(s);
		} else {
			throw new js__$Boot_HaxeError("Expected a string for arg#" + i);
		}
	};
	if(__map_reserved["%s"] != null) {
		_g.setReserved("%s",value);
	} else {
		_g.h["%s"] = value;
	}
	var value1 = function(b1,v,i1) {
		if(typeof(v) == "number" && ((v | 0) === v)) {
			b1.b += Std.string(v);
		} else {
			throw new js__$Boot_HaxeError("Expected an int for arg#" + i1);
		}
	};
	if(__map_reserved["%d"] != null) {
		_g.setReserved("%d",value1);
	} else {
		_g.h["%d"] = value1;
	}
	var value2 = function(b2,v1,i2) {
		if(typeof(v1) == "number" && ((v1 | 0) === v1)) {
			b2.b += Std.string(v1);
		} else {
			throw new js__$Boot_HaxeError("Expected a char for arg#" + i2);
		}
	};
	if(__map_reserved["%c"] != null) {
		_g.setReserved("%c",value2);
	} else {
		_g.h["%c"] = value2;
	}
	var value3 = function(b3,v2,i3) {
		if(typeof(v2) == "number" && ((v2 | 0) === v2)) {
			var _g1 = 0;
			var _g11 = v2;
			while(_g1 < _g11) {
				_g1++;
				b3.b += String.fromCodePoint(9);
			}
		} else {
			throw new js__$Boot_HaxeError("Expected a tab count for arg#" + i3);
		}
	};
	if(__map_reserved["%t"] != null) {
		_g.setReserved("%t",value3);
	} else {
		_g.h["%t"] = value3;
	}
	return _g;
};
tools_StringBuilder.__super__ = StringBuf;
tools_StringBuilder.prototype = $extend(StringBuf.prototype,{
	addFormatImpl: function(args) {
		var fmt = args[0];
		var _this = tools_StringBuilder.formatCache;
		var data = __map_reserved[fmt] != null ? _this.getReserved(fmt) : _this.h[fmt];
		var i;
		var n;
		if(data == null) {
			data = [];
			var start = 0;
			i = 0;
			n = fmt.length;
			while(i < n) if(fmt.charCodeAt(i) == 37) {
				if(i > start) {
					data.push(fmt.substring(start,i));
				}
				data.push(HxOverrides.substr(fmt,i,2));
				i += 2;
				start = i;
			} else {
				++i;
			}
			if(i > start) {
				data.push(fmt.substring(start,i));
			}
			var _this1 = tools_StringBuilder.formatCache;
			if(__map_reserved[fmt] != null) {
				_this1.setReserved(fmt,data);
			} else {
				_this1.h[fmt] = data;
			}
		}
		i = -1;
		n = data.length;
		var argi = 0;
		while(++i < n) {
			var arg = data[i];
			if(arg.charCodeAt(0) == 37) {
				var _this2 = tools_StringBuilder.formatMap;
				var fn = __map_reserved[arg] != null ? _this2.getReserved(arg) : _this2.h[arg];
				if(fn != null) {
					++argi;
					fn(this,args[argi],argi);
				} else {
					throw new js__$Boot_HaxeError("" + arg + " is not a known format.");
				}
			} else {
				this.b += arg == null ? "null" : "" + arg;
			}
		}
		return null;
	}
	,__class__: tools_StringBuilder
});
var ui_ChromeTabMenu = function() { };
$hxClasses["ui.ChromeTabMenu"] = ui_ChromeTabMenu;
ui_ChromeTabMenu.__name__ = "ui.ChromeTabMenu";
ui_ChromeTabMenu.show = function(el,ev) {
	ui_ChromeTabMenu.target = el;
	electron_MenuFallback.contextEvent = ev;
	ui_ChromeTabMenu.menu.popup(Electron_API != null ? Electron_API.remote.getCurrentWindow() : null,{ async : true});
};
ui_ChromeTabMenu.init = function() {
	ui_ChromeTabMenu.menu = new Electron_Menu();
	ui_ChromeTabMenu.menu.append(new Electron_MenuItem({ label : "Close", accelerator : "CommandOrControl+W", click : function() {
		ui_ChromeTabMenu.target.querySelector(".chrome-tab-close").click();
	}}));
	ui_ChromeTabMenu.menu.append(new Electron_MenuItem({ label : "Close Others", accelerator : "CommandOrControl+Shift+W", click : function() {
		var _g = 0;
		var _g1 = ui_ChromeTabMenu.target.parentElement.querySelectorAll(".chrome-tab");
		while(_g < _g1.length) {
			var tab = _g1[_g];
			++_g;
			if(tab != ui_ChromeTabMenu.target) {
				tab.querySelector(".chrome-tab-close").click();
			}
		}
	}}));
	ui_ChromeTabMenu.menu.append(new Electron_MenuItem({ label : "Close All", click : function() {
		var _g2 = 0;
		var _g11 = ui_ChromeTabMenu.target.parentElement.querySelectorAll(".chrome-tab");
		while(_g2 < _g11.length) _g11[_g2++].querySelector(".chrome-tab-close").click();
	}}));
	ui_ChromeTabMenu.menu.append(new Electron_MenuItem({ type : "separator"}));
	ui_ChromeTabMenu.menu.append(new Electron_MenuItem({ label : "Rename", click : function() {
		var gmlFile = ui_ChromeTabMenu.target.gmlFile;
		var s0 = gmlFile.name;
		electron_DialogFallback.showPrompt("New tab name?",s0,function(s1) {
			if(s1 == null || s1 == "" || s1 == s0) {
				return;
			}
			var _g3 = 0;
			var _g12 = ui_ChromeTabs.impl.tabEls;
			while(_g3 < _g12.length) if(_g12[_g3++].gmlFile.name == s1) {
				window.alert("A tab with this name already exists.");
				return;
			}
			parsers_GmlSeekData.rename(s0,s1);
			gmlFile.name = s1;
			gmlFile.path = s1;
			tools_HtmlTools.setInnerText(ui_ChromeTabMenu.target.querySelector(".chrome-tab-title-text"),s1);
			ui_ChromeTabs.sync(gmlFile);
		});
	}}));
};
var ui_ChromeTabs = function() { };
$hxClasses["ui.ChromeTabs"] = ui_ChromeTabs;
ui_ChromeTabs.__name__ = "ui.ChromeTabs";
ui_ChromeTabs.getTabs = function() {
	return ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
};
ui_ChromeTabs.sync = function(gmlFile,isNew) {
	var prev = gml_file_GmlFile.current;
	if(prev != ui_WelcomePage.file) {
		ui_ChromeTabs.pathHistory.unshift(prev.context);
		if(ui_ChromeTabs.pathHistory.length > 32) {
			ui_ChromeTabs.pathHistory.pop();
		}
	}
	gml_file_GmlFile.set_current(gmlFile);
	var ctr = Main.aceEditor.container;
	if(gmlFile != ui_WelcomePage.file) {
		ctr.setAttribute("file-name",gmlFile.name);
		ctr.setAttribute("file-path",gmlFile.path);
		ctr.setAttribute("file-kind",gmlFile.kind.getName());
	} else {
		ctr.removeAttribute("file-name");
		ctr.removeAttribute("file-path");
		ctr.removeAttribute("file-kind");
	}
	prev.editor.focusLost(gmlFile.editor);
	gmlFile.focus();
	gmlFile.editor.focusGain(prev.editor);
	if(isNew) {
		if(gmlFile.path != null && gmlFile.codeEditor != null && ((gmlFile.codeEditor.kind) instanceof file_kind_KGml) && gmlFile.codeEditor.kind.canSyntaxCheck) {
			var lp = gml_Project.current.properties.linterPrefs;
			var r = null;
			var _g = 0;
			while(_g < 1) {
				++_g;
				if(lp != null) {
					r = lp.onLoad;
					if(r != null) {
						break;
					}
				}
				r = ui_Preferences.current.linterPrefs.onLoad;
				if(r != null) {
					break;
				}
				r = parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$.defValue.onLoad;
			}
			if(r) {
				window.setTimeout(function() {
					if(gml_file_GmlFile.current == gmlFile) {
						parsers_linter_GmlLinter.runFor(gmlFile.codeEditor);
					}
				},0);
			}
		}
		plugins_PluginAPI._signal("fileOpen",{ file : gmlFile});
	}
	plugins_PluginAPI._signal("activeFileChange",{ file : gmlFile});
};
ui_ChromeTabs.init = function() {
	ui_ChromeTabs.element = document.querySelector("#tabs");
	if(Electron_API == null) {
		ui_ChromeTabs.element.classList.remove("has-system-buttons");
		var _g = 0;
		var _g1 = document.querySelectorAll(".system-button:not(.preferences)");
		while(_g < _g1.length) {
			var btn = _g1[_g];
			++_g;
			btn.parentElement.removeChild(btn);
		}
	}
	ui_ChromeTabs.impl = new ChromeTabs();
	ui_ChromeTabs.impl.init(ui_ChromeTabs.element,{ tabOverlapDistance : 14, minWidth : 45, maxWidth : 160});
	ui_ChromeTabMenu.init();
	var hintEl = document.createElement("div");
	hintEl.classList.add("chrome-tabs-hint");
	tools_HtmlTools.setInnerText(hintEl,"Bock?");
	ui_ChromeTabs.element.parentElement.appendChild(hintEl);
	var hideHint = function(ev) {
		hintEl.style.display = "none";
	};
	ui_ChromeTabs.element.addEventListener("activeTabChange",function(e) {
		var tabEl = e.detail.tabEl;
		var gmlFile = tabEl.gmlFile;
		var makeFile = gmlFile == null;
		if(makeFile) {
			gmlFile = gml_file_GmlFile.next;
			if(gmlFile == null) {
				return;
			}
			gml_file_GmlFile.next = null;
			gmlFile.tabEl = tabEl;
			tabEl.gmlFile = gmlFile;
			tabEl.setAttribute(ui_ChromeTabs.attrContext,gmlFile.context);
			tabEl.addEventListener("contextmenu",function(e1) {
				e1.preventDefault();
				ui_ChromeTabMenu.show(tabEl,e1);
			});
			tabEl.addEventListener("mouseenter",function(e2) {
				tools_HtmlTools.setInnerText(hintEl,gmlFile.name);
				hintEl.style.display = "block";
				hintEl.style.left = ui_ChromeTabs.impl.tabPositions[ui_ChromeTabs.impl.tabEls.indexOf(tabEl)] + tabEl.offsetWidth / 2 + tabEl.parentElement.offsetLeft - hintEl.offsetWidth / 2 + "px";
			});
			tabEl.addEventListener("mouseleave",hideHint);
			tabEl.addEventListener("mousedown",hideHint);
			parsers_GmlSeekData.add(gmlFile.path);
		}
		ui_ChromeTabs.sync(gmlFile,makeFile);
		if(((gmlFile.editor) instanceof editors_EditCode)) {
			window.setTimeout(function() {
				Main.aceEditor.focus();
			});
		}
	});
	ui_ChromeTabs.element.addEventListener("tabClose",function(e3) {
		var tabEl1 = e3.detail.tabEl;
		if(tabEl1.classList.contains("chrome-tab-force-close")) {
			return;
		}
		var gmlFile1 = tabEl1.gmlFile;
		if(gmlFile1 == null) {
			return;
		}
		if(((gmlFile1.kind) instanceof file_kind_gml_KGmlScript)) {
			if(gmlFile1.getAceSession().getValue().length > 0) {
				if(!window.confirm("Are you sure you want to discard this tab? Contents will be lost")) {
					e3.preventDefault();
				}
			}
		} else if(gmlFile1.__changed) {
			if(gmlFile1.path != null) {
				var bt;
				if(Electron_API == null) {
					bt = window.confirm("Are you sure you want to close " + gmlFile1.name + "?" + "\nThere are unsaved changes.") ? 1 : 2;
				} else {
					bt = Electron_Dialog.showMessageBox({ buttons : ["Yes","No","Cancel"], message : "Do you want to save the current changes?", title : "Unsaved changes in " + gmlFile1.name, cancelId : 2});
				}
				switch(bt) {
				case 0:
					gmlFile1.save();
					break;
				case 1:
					break;
				default:
					e3.preventDefault();
				}
			} else if(Electron_Dialog.showMessageBox({ buttons : ["Yes","No"], message : "Changes cannot be saved (not a file). Stay here?", title : "Unsaved changes in " + gmlFile1.name, cancelId : 0}) != 1) {
				e3.preventDefault();
			}
		}
	});
	ui_ChromeTabs.element.addEventListener("tabRemove",function(e4) {
		var closedTab = e4.detail.tabEl;
		var closedFile = closedTab.gmlFile;
		if(closedFile != null) {
			closedFile.close();
			plugins_PluginAPI._signal("fileClose",{ file : closedFile, tab : closedTab});
		}
		if(ui_ChromeTabs.impl.tabEls.length == 0) {
			ui_ChromeTabs.sync(ui_WelcomePage.file);
		} else if(closedTab.classList.contains("chrome-tab-current")) {
			var tab = null;
			while(tab == null && ui_ChromeTabs.pathHistory.length > 0) tab = document.querySelector(".chrome-tab[" + ui_ChromeTabs.attrContext + "=\"" + ui_ChromeTabs.pathHistory.shift().replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]");
			if(tab == null) {
				tab = e4.detail.prevTab;
			}
			if(tab == null) {
				tab = e4.detail.nextTab;
			}
			if(tab == null) {
				ui_ChromeTabs.sync(ui_WelcomePage.file);
			} else {
				ui_ChromeTabs.impl.setCurrentTab(tab);
			}
		}
	});
	ui_ChromeTabs.element.addEventListener("dblclick",function(e5) {
		if(e5.target != ui_ChromeTabs.element.querySelector(".chrome-tabs-content")) {
			return;
		}
		ui_liveweb_LiveWeb.newTabDialog();
	});
	if(Electron_API != null) {
		window.addEventListener("beforeunload",function(e6) {
			var changedTabs = document.querySelectorAll(".chrome-tab.chrome-tab-changed");
			if(changedTabs.length == 0) {
				var _g2 = 0;
				var _g11 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
				while(_g2 < _g11.length) {
					var file1 = _g11[_g2++].gmlFile;
					if(file1 != null) {
						file1.close();
					}
				}
				if(gml_Project.current != null) {
					gml_Project.current.close();
				}
				return;
			}
			e6.returnValue = false;
			window.setTimeout(function() {
				var _g3 = 0;
				while(_g3 < changedTabs.length) changedTabs[_g3++].querySelector(".chrome-tab-close").click();
				if(document.querySelectorAll(".chrome-tab.chrome-tab-changed").length == 0) {
					Electron_API.remote.getCurrentWindow().close();
				}
			});
		});
	} else {
		window.addEventListener("beforeunload",function(e7) {
			ui_liveweb_LiveWeb.saveState();
		});
	}
	if(document.hasFocus()) {
		document.documentElement.setAttribute("hasFocus","");
		electron_WindowsAccentColors.updateFocus(true);
	} else {
		electron_WindowsAccentColors.updateFocus(false);
	}
	window.addEventListener("focus",function(_) {
		document.documentElement.setAttribute("hasFocus","");
		electron_WindowsAccentColors.updateFocus(true);
		if(gml_file_GmlFile.current != null) {
			gml_file_GmlFile.current.checkChanges();
		}
	});
	window.addEventListener("blur",function(_1) {
		document.documentElement.removeAttribute("hasFocus");
		electron_WindowsAccentColors.updateFocus(false);
	});
	return ui_ChromeTabs.impl;
};
var ui_ColorPicker = function() { };
$hxClasses["ui.ColorPicker"] = ui_ColorPicker;
ui_ColorPicker.__name__ = "ui.ColorPicker";
ui_ColorPicker.changed = function(e) {
	Main.aceEditor.getSession().selection.selectWord();
	var word = Main.aceEditor.getSelectedText();
	var curr = ui_ColorPicker.rxGml.exec(word);
	if(curr == null) {
		return;
	}
	var hexc = ui_ColorPicker.element.value;
	hexc = hexc.toUpperCase();
	var next = ui_ColorPicker.rxJs.exec(hexc);
	if(next == null) {
		return;
	}
	Main.aceEditor.insert(curr[1] + next[3] + next[2] + next[1]);
};
ui_ColorPicker.open = function(value) {
	var vals = ui_ColorPicker.rxGml.exec(value);
	ui_ColorPicker.element.value = "#" + vals[4] + vals[3] + vals[2];
	ui_ColorPicker.element.click();
};
ui_ColorPicker.init = function() {
	ui_ColorPicker.element = document.querySelector("#color-picker");
	ui_ColorPicker.element.addEventListener("change",ui_ColorPicker.changed);
	var hp3 = "([0-9a-fA-F]{2})" + "([0-9a-fA-F]{2})" + "([0-9a-fA-F]{2})";
	ui_ColorPicker.rxGml = new RegExp("^(0x|\\$)" + hp3 + "$","");
	ui_ColorPicker.rxJs = new RegExp("^#" + hp3 + "$","");
};
var ui_CommandPalette = $hx_exports["CommandPalette"] = function() { };
$hxClasses["ui.CommandPalette"] = ui_CommandPalette;
ui_CommandPalette.__name__ = "ui.CommandPalette";
ui_CommandPalette.add = function(cmd) {
	var name = cmd.name;
	var _this = ui_CommandPalette.lookupMap;
	if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == null) {
		ui_CommandPalette.lookupText += name + "\n";
		ui_CommandPalette.lookupList.push(name);
	}
	var _this1 = ui_CommandPalette.lookupMap;
	if(__map_reserved[name] != null) {
		_this1.setReserved(name,cmd);
	} else {
		_this1.h[name] = cmd;
	}
};
ui_CommandPalette.init = function() {
	ui_CommandPalette.add({ name : "Preferences", exec : function() {
		ui_Preferences.open();
	}});
	ui_CommandPalette.add({ name : "Project properties", exec : function() {
		ui_project_ProjectProperties.open();
	}});
};
var ui_FileDrag = function() { };
$hxClasses["ui.FileDrag"] = ui_FileDrag;
ui_FileDrag.__name__ = "ui.FileDrag";
ui_FileDrag.init = function() {
	var cancelDefault = function(e) {
		e.preventDefault();
		return false;
	};
	document.body.addEventListener("dragover",cancelDefault);
	document.body.addEventListener("dragenter",cancelDefault);
	document.body.addEventListener("dragleave",cancelDefault);
	document.body.addEventListener("drop",function(e1) {
		e1.preventDefault();
		var _g = 0;
		var _g1 = e1.dataTransfer.files;
		while(_g < _g1.length) ui_liveweb_LiveWebIO.acceptFile(_g1[_g++]);
	});
};
var ui_GMLive = function() { };
$hxClasses["ui.GMLive"] = ui_GMLive;
ui_GMLive.__name__ = "ui.GMLive";
ui_GMLive.check = function(code) {
	if(!ui_GMLive.rxLive.test(code)) {
		return false;
	}
	var q = new parsers_GmlReader(code);
	var start = 0;
	var flush = function(till) {
		return ui_GMLive.rxLive.test(q.source.substring(start,till));
	};
	while(q.get_loop()) {
		var p = q.pos;
		if(q.source.charCodeAt(q.pos++) == 47) {
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				if(flush(p)) {
					return true;
				}
				q.pos += 1;
				q.skipComment();
				start = q.pos;
				break;
			case 47:
				if(flush(p)) {
					return true;
				}
				q.skipLine();
				start = q.pos;
				break;
			}
		}
	}
	return flush(q.pos);
};
ui_GMLive.update = function(path,has) {
	var item = ui_treeview_TreeView.find(true,{ path : path});
	if(item == null) {
		return;
	}
	if(has == item.hasAttribute(ui_GMLive.attr)) {
		return;
	}
	if(has) {
		item.setAttribute(ui_GMLive.attr,"");
	} else {
		item.removeAttribute(ui_GMLive.attr);
	}
	if(parsers_GmlSeeker.itemsLeft <= 0) {
		var iter = item;
		var top = ui_treeview_TreeView.element;
		while(iter != null && iter != top) {
			if(iter.classList.contains("dir")) {
				if(!has) {
					if(iter.hasAttribute(ui_GMLive.attr)) {
						if(iter.querySelector(".item[" + ui_GMLive.attr + "]") == null) {
							iter.removeAttribute(ui_GMLive.attr);
						}
					}
				} else {
					iter.setAttribute(ui_GMLive.attr,"");
				}
			}
			iter = iter.parentElement;
		}
	}
};
ui_GMLive.updateAll = function(force) {
	var all = ui_Preferences.current.showGMLive == 2;
	if(!all && !force) {
		return;
	}
	var _g = 0;
	var _g1 = ui_treeview_TreeView.element.querySelectorAll(".dir");
	while(_g < _g1.length) {
		var dir = _g1[_g];
		++_g;
		if(all && dir.querySelector(".item[" + ui_GMLive.attr + "]") != null) {
			dir.setAttribute(ui_GMLive.attr,"");
		} else {
			dir.removeAttribute(ui_GMLive.attr);
		}
	}
};
var ui_GlobalLookup = function() { };
$hxClasses["ui.GlobalLookup"] = ui_GlobalLookup;
ui_GlobalLookup.__name__ = "ui.GlobalLookup";
ui_GlobalLookup.updateImpl = function() {
	ui_GlobalLookup.updateTimer = null;
	var filter = ui_GlobalLookup.field.value;
	var i;
	var el;
	if(filter == ui_GlobalLookup.current) {
		return;
	}
	ui_GlobalLookup.current = filter;
	var isCmd = filter.startsWith(">");
	if(filter.length >= 2 || isCmd) {
		if(isCmd) {
			filter = filter.substring(1);
		}
		var pattern = filter.replace(tools_NativeString.escapeRx_1,"\\$1");
		var selection = ui_GlobalLookup.list.selectedOptions.length > 0 ? ui_GlobalLookup.list.selectedOptions[0].textContent : null;
		var found = 0;
		var foundMap = Object.create(null);
		ui_GlobalLookup.list.selectedIndex = -1;
		var data = isCmd ? ui_CommandPalette.lookupText : gml_GmlAPI.gmlLookupText;
		var addOption = function(name) {
			var option = ui_GlobalLookup.list.children[found];
			if(option == null) {
				option = ui_GlobalLookup.pool.pop();
				if(option == null) {
					option = document.createElement("option");
				}
				ui_GlobalLookup.list.appendChild(option);
			}
			var hint;
			var title;
			if(isCmd) {
				var _this = ui_CommandPalette.lookupMap;
				var cmd = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
				hint = cmd.key;
				title = cmd.title;
			} else {
				hint = null;
				title = null;
			}
			if(hint != null) {
				option.setAttribute("hint",hint);
			} else {
				option.removeAttribute("hint");
			}
			option.title = title != null ? title : "";
			option.textContent = name;
			if(name == selection) {
				ui_GlobalLookup.list.selectedIndex = found;
			}
			found += 1;
		};
		if(pattern != "") {
			var directMatch = new RegExp("^" + pattern + "$","gmi").exec(data);
			if(directMatch != null) {
				foundMap[directMatch[0]] = true;
				addOption(directMatch[0]);
			}
			var regex = new RegExp("^(" + pattern + ".*)$","gmi");
			var match = regex.exec(data);
			while(match != null) {
				var name1 = match[1];
				if(!foundMap[name1]) {
					foundMap[name1] = true;
					addOption(name1);
				}
				match = regex.exec(data);
			}
			var regex1 = new RegExp("^(.+" + pattern + ".*)$","gmi");
			var match1 = regex1.exec(data);
			while(match1 != null) {
				var name2 = match1[1];
				if(!foundMap[name2]) {
					foundMap[name2] = true;
					addOption(name2);
				}
				match1 = regex1.exec(data);
			}
		} else {
			var _g = 0;
			var _g1 = ui_CommandPalette.lookupList;
			while(_g < _g1.length) addOption(_g1[_g++]);
		}
		i = ui_GlobalLookup.list.children.length;
		while(--i >= found) {
			el = ui_GlobalLookup.list.children[i];
			ui_GlobalLookup.list.removeChild(el);
			ui_GlobalLookup.pool.push(el);
		}
		if(ui_GlobalLookup.list.selectedIndex < 0) {
			ui_GlobalLookup.list.selectedIndex = 0;
		}
	} else {
		ui_GlobalLookup.list.selectedIndex = -1;
		i = ui_GlobalLookup.list.children.length;
		while(--i >= 0) {
			el = ui_GlobalLookup.list.children[i];
			ui_GlobalLookup.list.removeChild(el);
			ui_GlobalLookup.pool.push(el);
		}
	}
};
ui_GlobalLookup.toggle = function(initialText) {
	if(ui_GlobalLookup.element.style.display == "none") {
		ui_GlobalLookup.element.style.display = "";
		if(initialText == null) {
			initialText = Main.aceEditor.getSelectedText();
		}
		ui_GlobalLookup.field.value = initialText;
		ui_GlobalLookup.field.focus();
		ui_GlobalLookup.updateImpl();
	} else {
		ui_GlobalLookup.element.style.display = "none";
	}
};
ui_GlobalLookup.openTerm = function(term) {
	if(ui_GlobalLookup.field.value.startsWith(">")) {
		var _this = ui_CommandPalette.lookupMap;
		var cmd = __map_reserved[term] != null ? _this.getReserved(term) : _this.h[term];
		if(cmd == null) {
			return false;
		}
		cmd.exec();
		return true;
	} else {
		return ui_OpenDeclaration.openLocal(term,null);
	}
};
ui_GlobalLookup.onkeydown = function(e) {
	if(ui_GlobalLookup.updateTimer == null) {
		ui_GlobalLookup.updateTimer = window.setTimeout(ui_GlobalLookup.updateImpl,100);
	}
	var i;
	switch(e.keyCode) {
	case 13:
		e.preventDefault();
		var term = ui_GlobalLookup.list.value;
		if(term == "") {
			term = ui_GlobalLookup.field.value;
		}
		if(ui_GlobalLookup.openTerm(term)) {
			ui_GlobalLookup.toggle();
		}
		break;
	case 27:
		ui_GlobalLookup.toggle();
		break;
	case 38:
		e.preventDefault();
		i = (ui_GlobalLookup.list.selectedIndex - 1) % ui_GlobalLookup.list.children.length;
		if(i < 0) {
			i += ui_GlobalLookup.list.children.length;
		}
		ui_GlobalLookup.list.selectedIndex = i;
		break;
	case 40:
		e.preventDefault();
		ui_GlobalLookup.list.selectedIndex = (ui_GlobalLookup.list.selectedIndex + 1) % ui_GlobalLookup.list.children.length;
		break;
	}
};
ui_GlobalLookup.init = function() {
	ui_GlobalLookup.element = document.querySelector("#global-lookup");
	ui_GlobalLookup.field = ui_GlobalLookup.element.querySelector("input");
	ui_GlobalLookup.field.placeholder = "Resource name or >command";
	ui_GlobalLookup.list = ui_GlobalLookup.element.querySelector("select");
	ui_GlobalLookup.list.onclick = function(_) {
		window.setTimeout(function() {
			var term = ui_GlobalLookup.list.value;
			if(term != "") {
				ui_GlobalLookup.openTerm(term);
				ui_GlobalLookup.toggle();
			}
		});
	};
	ui_GlobalLookup.field.onkeydown = ui_GlobalLookup.onkeydown;
	ui_GlobalLookup.field.onkeyup = function(_1) {
		if(ui_GlobalLookup.updateTimer == null) {
			ui_GlobalLookup.updateTimer = window.setTimeout(ui_GlobalLookup.updateImpl,100);
		}
	};
};
var ui_GlobalSeachData = function(opt) {
	this.saving = false;
	this.map = Object.create(null);
	this.list = [];
	this.options = opt;
};
$hxClasses["ui.GlobalSeachData"] = ui_GlobalSeachData;
ui_GlobalSeachData.__name__ = "ui.GlobalSeachData";
ui_GlobalSeachData.prototype = {
	sync: function(code) {
		var rx = ui_GlobalSeachData.sync_rx;
		rx.lastIndex = 0;
		var mt = rx.exec(code);
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) _g1[_g++].next = null;
		while(mt != null) {
			var items = this.map[mt[1]];
			if(items != null) {
				var nextRow = Std.parseInt(mt[2]) - 1;
				var _g2 = 0;
				while(_g2 < items.length) {
					var item = items[_g2];
					++_g2;
					var itemRow = item.row;
					if(itemRow == nextRow) {
						item.next = mt[3];
						break;
					} else if(itemRow > nextRow) {
						break;
					}
				}
			}
			mt = rx.exec(code);
		}
	}
	,save: function(file1) {
		var _gthis = this;
		if(this.saving) {
			return false;
		}
		this.sync(file1.editor.session.getValue());
		var project = gml_Project.current;
		var version = project.version;
		var errors = "";
		this.saving = true;
		project.search(function(name,path,code) {
			var q = new parsers_GmlReader(code);
			var out = "";
			var ctxName = name;
			var ctxRowStart = 1;
			var start = 0;
			var flush = function(till) {
				var ctxItems = _gthis.map[ctxName];
				if(ctxItems == null || ctxItems.length == 0) {
					out += q.source.substring(start,till);
					return;
				}
				var ctxCode = q.source.substring(start,till);
				var ctxLen = till - start;
				var ctxStart = 0;
				var ctxRow = ctxRowStart - 2;
				var ctxSol = 0;
				var ctxEol = 0;
				var ctxNol = 0;
				var _g = 0;
				while(_g < ctxItems.length) {
					var item = ctxItems[_g];
					++_g;
					var ctxLine = null;
					var itemRow = item.row;
					while(ctxRow < itemRow) {
						ctxSol = ctxNol;
						ctxEol = ctxCode.indexOf("\n",ctxNol);
						if(ctxEol >= 0) {
							ctxNol = ctxEol + 1;
							if(ctxCode.charCodeAt(ctxEol - 1) == 13) {
								--ctxEol;
							}
						} else {
							ctxEol = ctxLen;
							ctxNol = ctxLen;
						}
						if(++ctxRow == itemRow) {
							ctxLine = ctxCode.substring(ctxSol,ctxEol);
						}
					}
					if(ctxLine == null) {
						errors += "// Can't update @[" + ctxName + ":" + (itemRow + 1) + "]: " + "End of code reached." + "\n";
						break;
					}
					out += ctxCode.substring(ctxStart,ctxSol);
					if(ctxLine == item.code) {
						if(item.next != null) {
							out += item.next;
						} else {
							out += ctxLine;
						}
					} else {
						out += ctxLine;
						if(item.next != item.code) {
							errors += "// Can't update @[" + ctxName + ":" + (itemRow + 1) + "]: " + "Source line changed - please verify manually." + "\n";
						}
					}
					ctxStart = ctxEol;
				}
				out += ctxCode.substring(ctxStart);
			};
			while(q.get_loop()) {
				var p = q.pos;
				var c = q.source.charCodeAt(q.pos++);
				switch(c) {
				case 35:
					if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
						var ctxNameNext = q.readContextName(name);
						if(ctxNameNext == null) {
							continue;
						}
						flush(p);
						ctxName = ctxNameNext;
						ctxRowStart = 0;
						q.skipLine();
						q.skipLineEnd();
						start = p;
					}
					break;
				case 47:
					switch(q.source.charCodeAt(q.pos)) {
					case 42:
						q.pos += 1;
						q.skipComment();
						break;
					case 47:
						q.skipLine();
						break;
					}
					break;
				case 34:case 39:case 64:case 96:
					q.skipStringAuto(c,version);
					break;
				default:
				}
			}
			flush(q.pos);
			return out;
		},function() {
			_gthis.saving = false;
			var _g1 = 0;
			var _g11 = _gthis.list;
			while(_g1 < _g11.length) {
				var item1 = _g11[_g1];
				++_g1;
				item1.code = item1.next;
				item1.next = null;
			}
			file1.savePost();
			if(errors != "") {
				gml_file_GmlFile.openTab(new gml_file_GmlFile("save errors",null,file_kind_misc_KPlain.inst,errors));
			}
		},this.options);
		return true;
	}
	,__class__: ui_GlobalSeachData
};
var ui_GlobalSearch = function() { };
$hxClasses["ui.GlobalSearch"] = ui_GlobalSearch;
ui_GlobalSearch.__name__ = "ui.GlobalSearch";
ui_GlobalSearch.offsetToPos = function(code,till,rowStart) {
	var pos;
	if(till < rowStart) {
		pos = code.lastIndexOf("\n",till);
		return { column : till - (pos + 1), row : -1};
	}
	var row = 0;
	pos = code.indexOf("\n",rowStart);
	while(pos <= till && pos >= 0) {
		++row;
		rowStart = pos + 1;
		pos = code.indexOf("\n",rowStart);
	}
	return { column : till - rowStart, row : row};
};
ui_GlobalSearch.run = function(opt,finish) {
	var pj = gml_Project.current;
	var version = pj.version;
	if(version == 0) {
		return;
	}
	var term;
	var rx;
	if(((opt.find) instanceof RegExp)) {
		rx = opt.find;
		if(!rx.global) {
			console.warn("This is not a /g regexp and you are potentially in trouble.");
		}
		term = rx.toString();
	} else {
		term = opt.find;
		var eterm = term.replace(tools_NativeString.escapeRx_1,"\\$1");
		var eopt = opt.matchCase ? "g" : "ig";
		if(opt.wholeWord) {
			if(/^\/\//.test(term)) {
				eterm += "$";
				eopt += "m";
			} else {
				if(/^\w/.test(term)) {
					eterm = "\\b" + eterm;
				}
				if(/\w$/.test(term)) {
					eterm += "\\b";
				}
			}
		}
		rx = new RegExp(eterm,eopt);
	}
	if(term == "") {
		return;
	}
	var results = "";
	var found = 0;
	var repl = opt.replaceBy;
	var filterFn = opt.findFilter;
	var ctxFilter = opt.headerFilter;
	var ctxFilterFn = typeof(ctxFilter) == "function" ? ctxFilter : null;
	var ctxFilterRx = ((ctxFilter) instanceof RegExp) ? ctxFilter : null;
	var isRepl = repl != null;
	var isReplFn = typeof(repl) == "function";
	var isPrev = opt.previewReplace;
	var saveData = new ui_GlobalSeachData(opt);
	var saveItems = saveData.list;
	var saveItem;
	var saveCtxItems;
	var canLambda = ui_Preferences.current.lambdaMagic && (pj.lambdaGml != null || pj.properties.lambdaMode == 2);
	var lambdaGml = null;
	pj.search(function(name,path,code) {
		var lambdaPre;
		if(canLambda) {
			lambdaPre = parsers_GmlExtLambda.preInit(pj);
			lambdaPre.gml = lambdaGml;
			code = parsers_GmlExtLambda.preImpl(code,lambdaPre);
			lambdaGml = lambdaPre.gml;
		} else {
			lambdaPre = null;
		}
		ui_GlobalSearch.currentPath = path;
		var q = new parsers_GmlReader(code);
		var start = 0;
		var ctxName = name;
		saveCtxItems = [];
		saveData.map[ctxName] = saveCtxItems;
		var ctxStart = 0;
		var ctxCheck;
		if(ctxFilterFn != null) {
			ctxCheck = ctxFilterFn(name,path);
		} else if(ctxFilterRx != null) {
			ctxCheck = ctxFilterRx.test(name);
		} else {
			ctxCheck = true;
		}
		var ctxLast = null;
		var out = isRepl ? "" : null;
		var replStart = 0;
		var flush = function(till) {
			if(!ctxCheck) {
				return;
			}
			var subc = q.source.substring(start,till);
			var mt = rx.exec(subc);
			while(mt != null) {
				var ofs = start + mt.index;
				var eol = code.indexOf("\n",ofs);
				if(eol >= 0) {
					if(code.charCodeAt(eol - 1) == 13) {
						--eol;
					}
				} else {
					eol = code.length;
				}
				var pos = ui_GlobalSearch.offsetToPos(code,ofs,ctxStart);
				var sol = ofs - pos.column;
				var line = code.substring(sol,eol);
				var ctxLink = ctxName;
				if(pos.row >= 0) {
					ctxLink += ":" + (pos.row + 1);
				}
				if(isRepl || ctxLink != ctxLast) {
					var curr = mt.length > 1 ? mt : mt[0];
					if(filterFn == null || filterFn(curr)) {
						saveItem = { row : pos.row, code : line, next : null};
						saveItems.push(saveItem);
						saveCtxItems.push(saveItem);
						ctxLast = ctxLink;
						var head = "\n\n// in @[" + ctxLink + "]:\n" + line;
						if(isRepl) {
							var next = isReplFn ? repl(curr,{ ctx : ctxName, row : pos.row}) : repl;
							out += q.source.substring(replStart,ofs) + next;
							replStart = ofs + mt[0].length;
							if(mt[0] != next) {
								results += head + "\n" + code.substring(sol,ofs) + next + code.substring(replStart,eol);
							}
						} else {
							results += head;
						}
						found += 1;
					}
				}
				mt = rx.exec(subc);
			}
		};
		while(q.get_loop()) {
			var p = q.pos;
			var c = q.source.charCodeAt(q.pos++);
			switch(c) {
			case 35:
				if(p == 0 || q.source.charCodeAt(p - 1) == 10) {
					if(HxOverrides.substr(q.source,p,6) == "#macro") {
						if(!opt.checkMacros) {
							q.skipLine();
							q.skipLineEnd();
							start = q.pos;
						}
					} else {
						var ctxNameNext = q.readContextName(name);
						if(ctxNameNext == null) {
							continue;
						}
						flush(p);
						ctxName = ctxNameNext;
						q.skipLine();
						q.skipLineEnd();
						ctxStart = q.pos;
						if(ctxFilterFn != null) {
							ctxCheck = ctxFilterFn(ctxName,path);
						} else if(ctxFilterRx != null) {
							ctxCheck = ctxFilterRx.test(ctxName);
						} else {
							ctxCheck = true;
						}
						if(opt.checkHeaders) {
							start = p;
							flush(q.pos);
						}
						saveCtxItems = [];
						saveData.map[ctxName] = saveCtxItems;
						start = q.pos;
					}
				}
				break;
			case 47:
				if(!opt.checkComments) {
					switch(q.source.charCodeAt(q.pos)) {
					case 42:
						flush(p);
						q.pos += 1;
						q.skipComment();
						start = q.pos;
						break;
					case 47:
						flush(p);
						q.skipLine();
						start = q.pos;
						break;
					}
				}
				break;
			case 34:case 39:case 64:case 96:
				if(!opt.checkStrings) {
					q.skipStringAuto(c,version);
					if(q.pos > p + 1) {
						flush(p);
						start = q.pos;
					}
				}
				break;
			}
		}
		flush(q.pos);
		if(isRepl) {
			out += q.source.substring(replStart,q.length);
			if(canLambda && !isPrev && (canLambda && !isPrev && (out.indexOf("#lambda") != -1 || out.indexOf("#lamdef") != -1) || lambdaPre.list.length > 0)) {
				var lambdaPost = parsers_GmlExtLambda.postInit(name,pj,lambdaPre.list,lambdaPre.map);
				out = parsers_GmlExtLambda.postImpl(out,lambdaPost);
				if(out == null) {
					var e = "Failed to update #lambda in " + name + ": " + parsers_GmlExtLambda.errorText;
					opt.errors = opt.errors == null ? e : opt.errors + "\n" + e;
				}
			}
		}
		if(isRepl && !isPrev) {
			return out;
		} else {
			return null;
		}
	},function() {
		if(finish != null) {
			finish();
		}
		var head1 = "// " + found + " result";
		if(found != 1) {
			head1 += "s";
		}
		if(isRepl) {
			if(isPrev) {
				head1 += " would be replaced";
			} else {
				head1 += " replaced";
			}
		} else {
			head1 += " found";
		}
		results = head1 + ":" + results;
		if(opt.errors != null) {
			results = "/* Errors:\n" + opt.errors + "\n*/\n" + results;
		}
		var file1 = new gml_file_GmlFile((isRepl ? isPrev ? "preview: " : "replace: " : "search: ") + term,null,file_kind_gml_KGmlSearchResults.inst,results);
		if(!isRepl) {
			file1.searchData = saveData;
		}
		gml_file_GmlFile.openTab(file1);
		window.setTimeout(function() {
			Main.aceEditor.focus();
		});
	},opt);
};
ui_GlobalSearch.findReferences = function(id) {
	ui_GlobalSearch.run({ find : id, wholeWord : true, matchCase : true, checkStrings : /^@?["']/.test(id), checkComments : /(?:\/\/|\/\*)/.test(id), checkHeaders : true, checkScripts : true, checkTimelines : true, checkObjects : true, checkRooms : true, checkMacros : true, checkShaders : false, checkExtensions : true, expandLambdas : true});
};
ui_GlobalSearch.toggle = function() {
	if(ui_GlobalSearch.element.style.display == "none") {
		ui_GlobalSearch.element.style.display = "";
		ui_GlobalSearch.divSearching.style.display = "none";
		var s = Main.aceEditor.getSelectedText();
		if(s != "" && s != null) {
			ui_GlobalSearch.fdFind.value = s;
		}
		ui_GlobalSearch.fdFind.focus();
		ui_GlobalSearch.fdFind.select();
	} else {
		ui_GlobalSearch.element.style.display = "none";
	}
};
ui_GlobalSearch.getOptions = function() {
	var find;
	if(!ui_GlobalSearch.cbRegExp.checked) {
		find = ui_GlobalSearch.fdFind.value;
	} else {
		try {
			var flags = "g";
			if(!ui_GlobalSearch.cbMatchCase.checked) {
				flags = "g" + "i";
			}
			find = new RegExp(ui_GlobalSearch.fdFind.value,flags);
		} catch( x ) {
			window.alert("Error compiling the regular expression: " + Std.string(((x) instanceof js__$Boot_HaxeError) ? x.val : x));
			return null;
		}
	}
	return { find : find, findFilter : null, replaceBy : null, previewReplace : false, headerFilter : null, wholeWord : ui_GlobalSearch.cbWholeWord.checked, matchCase : ui_GlobalSearch.cbMatchCase.checked, checkStrings : ui_GlobalSearch.cbCheckStrings.checked, checkObjects : ui_GlobalSearch.cbCheckObjects.checked, checkScripts : ui_GlobalSearch.cbCheckScripts.checked, checkHeaders : ui_GlobalSearch.cbCheckHeaders.checked, checkComments : ui_GlobalSearch.cbCheckComments.checked, checkTimelines : ui_GlobalSearch.cbCheckTimelines.checked, checkRooms : ui_GlobalSearch.cbCheckRooms.checked, checkMacros : ui_GlobalSearch.cbCheckMacros.checked, checkShaders : ui_GlobalSearch.cbCheckShaders.checked, checkExtensions : ui_GlobalSearch.cbCheckExtensions.checked, expandLambdas : ui_GlobalSearch.cbExpandLambdas.checked};
};
ui_GlobalSearch.runAuto = function(opt) {
	ui_GlobalSearch.divSearching.style.display = "";
	ui_GlobalSearch.run(opt,function() {
		ui_GlobalSearch.element.style.display = "none";
	});
};
ui_GlobalSearch.findAuto = function(opt) {
	if(opt == null) {
		opt = ui_GlobalSearch.getOptions();
	}
	if(opt != null) {
		ui_GlobalSearch.runAuto(opt);
	}
};
ui_GlobalSearch.replaceAuto = function(opt) {
	if(opt == null) {
		opt = ui_GlobalSearch.getOptions();
	}
	opt.replaceBy = ui_GlobalSearch.fdReplace.value;
	ui_GlobalSearch.runAuto(opt);
};
ui_GlobalSearch.previewAuto = function(opt) {
	if(opt == null) {
		opt = ui_GlobalSearch.getOptions();
	}
	if(opt == null) {
		return;
	}
	opt.replaceBy = ui_GlobalSearch.fdReplace.value;
	opt.previewReplace = true;
	ui_GlobalSearch.runAuto(opt);
};
ui_GlobalSearch.init = function() {
	ui_GlobalSearch.element = document.querySelector("#global-search");
	ui_GlobalSearch.fdFind = ui_GlobalSearch.element.querySelector("input[name=\"find-text\"]");
	ui_GlobalSearch.fdReplace = ui_GlobalSearch.element.querySelector("input[name=\"replace-text\"]");
	ui_GlobalSearch.btFind = ui_GlobalSearch.element.querySelector("input[name=\"find\"]");
	ui_GlobalSearch.btReplace = ui_GlobalSearch.element.querySelector("input[name=\"replace\"]");
	ui_GlobalSearch.btPreview = ui_GlobalSearch.element.querySelector("input[name=\"preview\"]");
	ui_GlobalSearch.btCancel = ui_GlobalSearch.element.querySelector("input[name=\"cancel\"]");
	ui_GlobalSearch.divSearching = ui_GlobalSearch.element.querySelector(".searching-text");
	ui_GlobalSearch.cbWholeWord = ui_GlobalSearch.element.querySelector("#global-search-whole-word");
	ui_GlobalSearch.cbMatchCase = ui_GlobalSearch.element.querySelector("#global-search-match-case");
	ui_GlobalSearch.cbCheckStrings = ui_GlobalSearch.element.querySelector("#global-search-check-strings");
	ui_GlobalSearch.cbCheckObjects = ui_GlobalSearch.element.querySelector("#global-search-check-objects");
	ui_GlobalSearch.cbCheckScripts = ui_GlobalSearch.element.querySelector("#global-search-check-scripts");
	ui_GlobalSearch.cbCheckHeaders = ui_GlobalSearch.element.querySelector("#global-search-check-headers");
	ui_GlobalSearch.cbCheckComments = ui_GlobalSearch.element.querySelector("#global-search-check-comments");
	ui_GlobalSearch.cbCheckTimelines = ui_GlobalSearch.element.querySelector("#global-search-check-timelines");
	ui_GlobalSearch.cbCheckRooms = ui_GlobalSearch.element.querySelector("#global-search-check-rooms");
	ui_GlobalSearch.cbCheckMacros = ui_GlobalSearch.element.querySelector("#global-search-check-macros");
	ui_GlobalSearch.cbCheckShaders = ui_GlobalSearch.element.querySelector("#global-search-check-shaders");
	ui_GlobalSearch.cbCheckExtensions = ui_GlobalSearch.element.querySelector("#global-search-check-extensions");
	ui_GlobalSearch.cbCheckRooms = ui_GlobalSearch.element.querySelector("#global-search-check-rooms");
	ui_GlobalSearch.cbExpandLambdas = ui_GlobalSearch.element.querySelector("#global-search-expand-lambdas");
	ui_GlobalSearch.cbRegExp = ui_GlobalSearch.element.querySelector("#global-search-regexp");
	ui_GlobalSearch.fdFind.onkeydown = function(e) {
		switch(e.keyCode) {
		case 13:
			ui_GlobalSearch.btFind.click();
			break;
		case 27:
			ui_GlobalSearch.btCancel.click();
			break;
		}
	};
	ui_GlobalSearch.fdReplace.onkeydown = function(e1) {
		switch(e1.keyCode) {
		case 13:
			ui_GlobalSearch.btReplace.click();
			break;
		case 27:
			ui_GlobalSearch.btCancel.click();
			break;
		}
	};
	ui_GlobalSearch.btFind.onclick = function(_) {
		ui_GlobalSearch.findAuto();
	};
	ui_GlobalSearch.btReplace.onclick = function(_1) {
		if(!window.confirm("Are you sure that you want to globally replace?" + "\nThis cannot be undone!")) {
			return;
		}
		ui_GlobalSearch.replaceAuto();
	};
	ui_GlobalSearch.btPreview.onclick = function(_2) {
		ui_GlobalSearch.previewAuto();
	};
	ui_GlobalSearch.btCancel.onclick = function(_3) {
		ui_GlobalSearch.element.style.display = "none";
	};
};
var ui_KeyboardShortcuts = function() { };
$hxClasses["ui.KeyboardShortcuts"] = ui_KeyboardShortcuts;
ui_KeyboardShortcuts.__name__ = "ui.KeyboardShortcuts";
ui_KeyboardShortcuts.prevTab = function() {
	var tab = document.querySelector(".chrome-tab-current");
	if(tab == null) {
		return;
	}
	var next = tab.previousElementSibling;
	if(next == null) {
		next = tab.parentElement.lastElementChild;
	}
	if(next != null) {
		next.click();
	}
};
ui_KeyboardShortcuts.nextTab = function() {
	var tab = document.querySelector(".chrome-tab-current");
	if(tab == null) {
		return;
	}
	var next = tab.nextElementSibling;
	if(next == null) {
		next = tab.parentElement.firstElementChild;
	}
	if(next != null) {
		next.click();
	}
};
ui_KeyboardShortcuts.keydown = function(e) {
	var flags = 0;
	if(e.ctrlKey) {
		flags |= 1;
	}
	if(e.shiftKey) {
		flags |= 2;
	}
	if(e.altKey) {
		flags |= 4;
	}
	if(e.metaKey) {
		flags |= 8;
	}
	var flags1 = flags;
	var keyCode = e.keyCode;
	var isAlt = flags1 == 4;
	var isMod = flags1 == 1 || flags1 == 8;
	var isShift = flags1 == 2;
	var isShiftMod = flags1 == 3 || flags1 == 10;
	switch(keyCode) {
	case 9:
		if(isShiftMod) {
			e.preventDefault();
			ui_KeyboardShortcuts.prevTab();
		}
		if(isMod) {
			e.preventDefault();
			ui_KeyboardShortcuts.nextTab();
		}
		break;
	case 33:
		if(isMod) {
			e.preventDefault();
			ui_KeyboardShortcuts.prevTab();
		}
		break;
	case 34:
		if(isMod) {
			e.preventDefault();
			ui_KeyboardShortcuts.nextTab();
		}
		break;
	case 57:
		if(isMod) {
			e.preventDefault();
			var tabs = document.querySelectorAll(".chrome-tab");
			var tabEl = tabs[tabs.length - 1];
			if(tabEl != null) {
				tabEl.click();
			}
		}
		break;
	case 70:
		if(isMod) {
			e.preventDefault();
		}
		break;
	case 73:
		if(isShiftMod && Electron_API != null) {
			Electron_API.remote.BrowserWindow.getFocusedWindow().toggleDevTools();
		}
		break;
	case 83:
		if(isMod) {
			e.preventDefault();
			var q = gml_file_GmlFile.current;
			if(q != null) {
				q.save();
			}
		} else if(isShiftMod) {
			e.preventDefault();
			var _g = 0;
			var _g1 = ui_ChromeTabs.impl.tabEls;
			while(_g < _g1.length) {
				var tabEl1 = _g1[_g];
				++_g;
				var file = tabEl1.gmlFile;
				if(file != null) {
					file.save();
				}
			}
		}
		ui_liveweb_LiveWeb.saveState();
		break;
	case 84:
		if(isAlt) {
			e.preventDefault();
			ui_GlobalLookup.toggle(">");
		} else if(isShiftMod) {
			e.preventDefault();
			ui_GlobalLookup.toggle(">");
		} else if(isMod) {
			e.preventDefault();
			ui_GlobalLookup.toggle();
		}
		break;
	case 87:
		if(isMod) {
			e.preventDefault();
			var q1 = document.querySelector(".chrome-tab-current .chrome-tab-close");
			if(q1 != null) {
				q1.click();
			} else if(document.querySelectorAll(".chrome-tab").length == 0) {
				gml_Project.open("");
			}
		}
		if(isShiftMod) {
			e.preventDefault();
			var _g2 = 0;
			var _g11 = document.querySelectorAll(".chrome-tab:not(.chrome-tab-current) .chrome-tab-close");
			while(_g2 < _g11.length) {
				var q2 = _g11[_g2];
				++_g2;
				var qe = q2;
				qe.click();
			}
		}
		break;
	case 113:
		if(isMod) {
			formatAceGMLContents();
		}
		break;
	case 116:
		break;
	default:
		if(isMod && keyCode >= 49 && keyCode <= 56) {
			e.preventDefault();
			var tabs1 = document.querySelectorAll(".chrome-tab");
			var tabEl2 = tabs1[keyCode - 49];
			if(tabEl2 != null) {
				tabEl2.click();
			}
		}
	}
};
ui_KeyboardShortcuts.initSystemButtons = function(closeButton) {
	if(closeButton == null) {
		return;
	}
	closeButton.addEventListener("click",function(_) {
		var wnd = Electron_API.remote.getCurrentWindow();
		if(wnd != null) {
			wnd.close();
		}
	});
	document.querySelector(".system-button.maximize").addEventListener("click",function(_1) {
		var wnd1 = Electron_API.remote.getCurrentWindow();
		if(wnd1 != null) {
			if(wnd1.isMaximized()) {
				wnd1.unmaximize();
			} else {
				wnd1.maximize();
			}
		}
	});
	document.querySelector(".system-button.minimize").addEventListener("click",function(_2) {
		var wnd2 = Electron_API.remote.getCurrentWindow();
		if(wnd2 != null) {
			wnd2.minimize();
		}
	});
};
ui_KeyboardShortcuts.initGlobal = function() {
	document.body.addEventListener("keydown",ui_KeyboardShortcuts.keydown);
	ui_KeyboardShortcuts.initSystemButtons(document.querySelector(".system-button.close"));
};
ui_KeyboardShortcuts.initEditor = function(editor) {
	editor.on("mousedown",function(ev) {
		var dom = ev.domEvent;
		if(dom.button != 1) {
			return;
		}
		var pos = ev.getDocumentPosition();
		var session = editor.getSession();
		var line = session.getLine(pos.row);
		if(line != null && pos.column < line.length && ui_OpenDeclaration.proc(session,pos,session.getTokenAt(pos.row,pos.column))) {
			if(session.selection.isEmpty()) {
				session.selection.moveTo(pos.row,pos.column);
			}
			dom.preventDefault();
		}
	});
	editor.on("mousewheel",function(ev1) {
		var dom1 = ev1.domEvent;
		var flags = 0;
		if(dom1.ctrlKey) {
			flags = 1;
		}
		if(dom1.shiftKey) {
			flags |= 2;
		}
		if(dom1.altKey) {
			flags |= 4;
		}
		if(dom1.metaKey) {
			flags |= 8;
		}
		var flags1 = flags;
		if(flags1 != 1 && flags1 != 8) {
			return;
		}
		var delta = dom1.deltaY;
		if(delta == 0) {
			return;
		}
		delta = delta < 0 ? 1 : -1;
		var tmp = editor.getOption("fontSize") + delta;
		editor.setOption("fontSize",tmp);
	});
	editor.debugShowToken = function() {
		editor.on("mousemove",function(ev2) {
			var pos1 = ev2.getDocumentPosition();
			var tk = editor.getSession().getTokenAt(pos1.row,pos1.column);
			if(tk == null) {
				return;
			}
			var sb = editor.statusBar;
			if(sb == null) {
				return;
			}
			sb.setText(JSON.stringify(tk));
		});
	};
};
var ui_MainMenu = function() { };
$hxClasses["ui.MainMenu"] = ui_MainMenu;
ui_MainMenu.__name__ = "ui.MainMenu";
ui_MainMenu.addGMLiveWebItems = function(menu) {
	menu.append(new Electron_MenuItem({ label : "New tab", click : function() {
		ui_liveweb_LiveWeb.newTabDialog();
	}}));
	menu.append(new Electron_MenuItem({ label : "New project", click : function() {
		var tabEls = ui_ChromeTabs.impl.tabEls;
		if(tabEls.length > 0) {
			if(!window.confirm("Are you sure you want to start a new project?" + "\nAll tabs will be closed.")) {
				return;
			}
			var i = tabEls.length;
			while(--i >= 0) {
				var tab = tabEls[i];
				tab.classList.add("chrome-tab-force-close");
				tab.querySelector(".chrome-tab-close").click();
			}
		}
	}}));
	menu.append(new Electron_MenuItem({ label : "Import...", click : function() {
		ui_liveweb_LiveWebIO.importDialog();
	}}));
	menu.append(new Electron_MenuItem({ label : "Export...", click : function() {
		ui_liveweb_LiveWebIO.exportDialog();
	}}));
};
ui_MainMenu.init = function() {
	ui_MainMenu.menu = new Electron_Menu();
	ui_MainMenu.addGMLiveWebItems(ui_MainMenu.menu);
	ui_MainMenu.menu.append(new Electron_MenuItem({ type : "separator"}));
	ui_MainMenu.menu.append(new Electron_MenuItem({ label : "Help", click : function() {
		var url = "https://github.com/GameMakerDiscord/GMEdit/wiki";
		url = "https://github.com/GameMakerDiscord/GMEdit/wiki" + "/GMLive.js";
		if(Electron_API != null) {
			Electron_Shell.openExternal(url);
		} else {
			window.open(url,"_blank");
		}
	}}));
	ui_MainMenu.menu.append(new Electron_MenuItem({ label : "Project properties", click : function() {
		ui_project_ProjectProperties.open();
	}}));
	ui_MainMenu.menu.append(new Electron_MenuItem({ label : "Preferences", click : function() {
		ui_Preferences.open();
	}}));
	if(Electron_API != null && window.location.host == "") {
		ui_MainMenu.menu.append(new Electron_MenuItem({ label : "Switch to GMEdit", click : function() {
			window.location.href = StringTools.replace(window.location.href,"index-live.html","index.html");
		}}));
	}
	if(Electron_API != null) {
		ui_MainMenu.menu.append(new Electron_MenuItem({ label : "Dev tools", accelerator : "CommandOrControl+Shift+I", click : function() {
			Electron_API.remote.BrowserWindow.getFocusedWindow().toggleDevTools();
		}}));
	}
	document.querySelector(".system-button.preferences").addEventListener("click",function(e) {
		electron_MenuFallback.contextEvent = e;
		ui_MainMenu.menu.popup(Electron_API != null ? Electron_API.remote.getCurrentWindow() : null,{ async : true});
	});
};
var ui_OpenDeclaration = function() { };
$hxClasses["ui.OpenDeclaration"] = ui_OpenDeclaration;
ui_OpenDeclaration.__name__ = "ui.OpenDeclaration";
ui_OpenDeclaration.openLink = function(meta,pos) {
	var rx = new RegExp("^(.+?)" + "(?:\\(([^)]*)\\))?" + "(?::(.+))?$");
	var vals = rx.exec(meta);
	if(vals == null) {
		return false;
	}
	var name = vals[1];
	var ctx = vals[3];
	var nav = { def : vals[2]};
	if(ctx != null) {
		rx = new RegExp("^" + "(\\d+)(?:(\\d+))?" + "$");
		vals = rx.exec(ctx);
		var ctxRow = null;
		var ctxCol = null;
		if(vals == null) {
			rx = new RegExp("^([^:]+):" + "(\\d+)(?:(\\d+))?" + "$");
			vals = rx.exec(ctx);
			if(vals != null) {
				nav.ctx = vals[1];
				ctxRow = vals[2];
				ctxCol = vals[3];
			} else {
				nav.ctx = ctx;
			}
		} else {
			ctxRow = vals[1];
			ctxCol = vals[2];
		}
		if(ctxRow != null) {
			nav.pos = { row : Std.parseInt(ctxRow) - 1, column : ctxCol != null ? Std.parseInt(ctxCol) - 1 : 0};
		}
	}
	ui_OpenDeclaration.openLocal(name,pos,nav);
	return true;
};
ui_OpenDeclaration.openLookup = function(lookup,nav) {
	if(lookup == null) {
		return false;
	}
	var path = lookup.path;
	var el = ui_treeview_TreeView.find(true,{ path : path});
	if(el != null) {
		if(nav != null) {
			if(nav.def == null) {
				nav.def = lookup.sub;
			}
			if(nav.pos != null) {
				nav.pos.row += lookup.row;
				nav.pos.column += lookup.col;
			} else {
				nav.pos = { row : lookup.row, column : lookup.col};
			}
		} else {
			nav = { def : lookup.sub, pos : { row : lookup.row, column : lookup.col}};
		}
		gml_file_GmlFile.open(el.title,path,nav);
		return true;
	}
	return false;
};
ui_OpenDeclaration.openLocal = function(name,pos,nav) {
	if(ui_OpenDeclaration.openLookup(gml_GmlAPI.gmlLookup[name],nav)) {
		return true;
	}
	var ename = name.replace(tools_NativeString.escapeProp_1,"\\$1");
	var el = ui_treeview_TreeView.element.querySelector(".item[" + "data-ident" + "=\"" + ename + "\"]");
	if(el != null) {
		if(gml_Project.current.path == "") {
			ui_treeview_TreeView.openProject(el);
		} else {
			gml_file_GmlFile.open(el.title,el.getAttribute("data-full-path"),nav);
		}
		return true;
	}
	return false;
};
ui_OpenDeclaration.openImportFile = function(rel) {
	if(!electron_FileWrap.existsSync("#import")) {
		electron_FileWrap.mkdirSync("#import");
	}
	var full = haxe_io_Path.join(["#import",rel]);
	var data = null;
	if(!electron_FileWrap.existsSync(full)) {
		full += ".gml";
		if(!electron_FileWrap.existsSync(full)) {
			data = "";
		}
	}
	if(data == null) {
		data = electron_FileWrap.readTextFileSync(full);
	}
	gml_file_GmlFile.openTab(new gml_file_GmlFile(rel,full,file_kind_gml_KGmlScript.inst,data));
	return true;
};
ui_OpenDeclaration.proc = function(session,pos,token) {
	if(token == null) {
		return false;
	}
	var term = token.value;
	if(token.type.indexOf("importpath") >= 0) {
		if(ui_OpenDeclaration.openImportFile(term.substring(1,term.length - 1))) {
			return true;
		}
	}
	if(HxOverrides.cca(term,0) == 36 || StringTools.startsWith(term,"0x")) {
		ui_ColorPicker.open(term);
		return true;
	}
	if(term.substring(0,2) == "@[") {
		var vals = new RegExp("^@\\[(.*)\\]").exec(term);
		if(vals != null) {
			ui_OpenDeclaration.openLink(vals[1],pos);
		}
		return true;
	}
	if(term == "event_inherited" || term == "action_inherited") {
		var def = session.gmlScopes.get(pos.row);
		if(def == "") {
			return false;
		}
		var file1 = gml_file_GmlFile.current;
		var path = file1.path;
		if(((file1.kind) instanceof file_kind_gmx_KGmxEvents)) {
			return gmx_GmxObject.openEventInherited(path,def) != null;
		} else if(((file1.kind) instanceof file_kind_yy_KYyEvents)) {
			return yy__$YyObject_YyObject_$Impl_$.openEventInherited(path,def) != null;
		} else {
			return false;
		}
	}
	_hx_loop1: while(true) {
		var scope = session.gmlScopes.get(pos.row);
		if(scope == null) {
			break;
		}
		var imp = gml_file_GmlFile.current.codeEditor.imports[scope];
		if(imp == null) {
			break;
		}
		var iter = new AceTokenIterator(session,pos.row,pos.column);
		var tk = iter.stepBackward();
		var next;
		var ns;
		if(tk != null && tk.value == ".") {
			tk = iter.stepBackward();
			if(tk != null) {
				switch(tk.type) {
				case "enum":
					var en = gml_GmlAPI.gmlEnums[tk.value];
					if(en == null) {
						break _hx_loop1;
					}
					return ui_OpenDeclaration.openLookup(en.fieldLookup[term],{ ctx : term, pos : { column : 0, row : 0}, ctxAfter : true});
				case "local":
					var t = imp.localTypes[tk.value];
					if(t == null) {
						break _hx_loop1;
					}
					ns = imp.namespaces[t];
					if(ns == null) {
						break _hx_loop1;
					}
					next = ns.longen[term];
					if(next != null) {
						term = next;
					}
					break _hx_loop1;
				case "namespace":
					ns = imp.namespaces[tk.value];
					if(ns == null) {
						break _hx_loop1;
					}
					next = ns.longen[term];
					if(next != null) {
						term = next;
					}
					break _hx_loop1;
				}
			}
		}
		next = imp.longen[term];
		if(next != null) {
			term = next;
		}
		break;
	}
	if(ui_OpenDeclaration.openLocal(term,pos,null)) {
		return true;
	}
	var helpURL = gml_GmlAPI.helpURL;
	if(helpURL != null) {
		var helpLookup = gml_GmlAPI.helpLookup;
		if(helpLookup != null) {
			var helpTerm = helpLookup[term];
			if(helpTerm == null) {
				helpTerm = helpLookup[StringTools.replace(term,"color","colour")];
			}
			if(helpTerm != null) {
				Electron_Shell.openExternal(StringTools.replace(helpURL,"$1",helpTerm));
				return true;
			}
		} else {
			Electron_Shell.openExternal(StringTools.replace(helpURL,"$1",term));
			return true;
		}
	}
	return false;
};
var ui_Preferences = function() { };
$hxClasses["ui.Preferences"] = ui_Preferences;
ui_Preferences.__name__ = "ui.Preferences";
ui_Preferences.setMenu = function(el) {
	if(ui_Preferences.subMenu != el) {
		if(ui_Preferences.subMenu != null) {
			ui_Preferences.element.removeChild(ui_Preferences.subMenu);
		}
		ui_Preferences.subMenu = el;
		ui_Preferences.element.appendChild(el);
	}
	return el;
};
ui_Preferences.buildMain = function() {
	var mm = document.createElement("div");
	ui_preferences_PrefMenu.build(mm);
	ui_Preferences.menuMain = mm;
	plugins_PluginAPI._signal("preferencesBuilt",{ target : mm});
	return mm;
};
ui_Preferences.addGroup = function(out,legend) {
	var fs = document.createElement("fieldset");
	fs.classList.add("group");
	var lg = document.createElement("legend");
	lg.innerText = legend;
	fs.appendChild(lg);
	out.appendChild(fs);
	return fs;
};
ui_Preferences.addRadios = function(out,legend,curr,names,fn) {
	var fs = document.createElement("fieldset");
	fs.classList.add("radios");
	var lg = document.createElement("legend");
	lg.innerText = legend;
	fs.appendChild(lg);
	var _g = 0;
	while(_g < names.length) {
		var name = [names[_g]];
		++_g;
		var id = ui_Preferences.createValidIdFromString(name[0]);
		var rad = document.createElement("input");
		rad.type = "radio";
		rad.name = legend;
		rad.value = name[0];
		rad.id = id;
		rad.addEventListener("change",(function(name1) {
			return function(_) {
				fn(name1[0]);
			};
		})(name));
		if(curr == name[0]) {
			rad.checked = true;
		}
		var lb = document.createElement("label");
		lb.htmlFor = id;
		lb.appendChild(rad);
		lb.appendChild(document.createTextNode(name[0]));
		fs.appendChild(lb);
		fs.appendChild(document.createElement("br"));
	}
	out.appendChild(fs);
	return fs;
};
ui_Preferences.addDropdown = function(out,legend,curr,names,fn) {
	var ctr = document.createElement("div");
	ctr.classList.add("select");
	var lb = document.createElement("label");
	lb.htmlFor = legend;
	lb.appendChild(document.createTextNode(legend));
	ctr.appendChild(lb);
	var sel = document.createElement("select");
	var _g = 0;
	while(_g < names.length) {
		var name = names[_g];
		++_g;
		var opt = document.createElement("option");
		opt.value = name;
		opt.appendChild(document.createTextNode(name));
		sel.appendChild(opt);
	}
	sel.addEventListener("change",function(_) {
		fn(sel.value);
	});
	sel.value = curr;
	ctr.appendChild(sel);
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.addCheckbox = function(out,legend,curr,fn) {
	var id = ui_Preferences.createValidIdFromString(legend);
	var ctr = document.createElement("div");
	ctr.classList.add("checkbox");
	var cb = document.createElement("input");
	cb.type = "checkbox";
	cb.checked = curr;
	cb.name = legend;
	cb.addEventListener("change",function(_) {
		fn(cb.checked);
	});
	cb.id = id;
	var lb = document.createElement("label");
	lb.htmlFor = id;
	lb.appendChild(cb);
	lb.appendChild(document.createTextNode(legend));
	ctr.appendChild(lb);
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.addInput = function(out,legend,curr,fn) {
	var ctr = document.createElement("div");
	ctr.classList.add("input");
	var lb = document.createElement("label");
	lb.htmlFor = legend;
	lb.appendChild(document.createTextNode(legend));
	ctr.appendChild(lb);
	var cb = document.createElement("input");
	cb.type = "text";
	cb.value = curr;
	cb.name = legend;
	cb.addEventListener("change",function(_) {
		fn(cb.value);
	});
	cb.addEventListener("keydown",function(e) {
		if(e.keyCode == 13) {
			fn(cb.value);
		}
	});
	ctr.appendChild(cb);
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.addIntInput = function(out,legend,val,fn) {
	var fd = null;
	var el = ui_Preferences.addInput(out,legend,val != null ? "" + val : "",function(s) {
		var v = Std.parseInt(s);
		if(v != null) {
			fd.classList.remove("error");
			fn(v);
		} else {
			fd.classList.add("error");
		}
	});
	fd = el.querySelector("input");
	return el;
};
ui_Preferences.addFloatInput = function(out,legend,val,fn) {
	var fd = null;
	var el = ui_Preferences.addInput(out,legend,val != null ? "" + val : "",function(s) {
		var v = parseFloat(s);
		if(!isNaN(v)) {
			fd.classList.remove("error");
			fn(v);
		} else {
			fd.classList.add("error");
		}
	});
	fd = el.querySelector("input");
	return el;
};
ui_Preferences.addButton = function(out,text,fn) {
	var ctr = document.createElement("div");
	ctr.classList.add("button");
	var el = document.createElement("a");
	el.href = "#";
	el.appendChild(document.createTextNode(text));
	el.addEventListener("click",function(e) {
		e.preventDefault();
		fn();
	});
	ctr.appendChild(el);
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.addText = function(out,text) {
	var ctr = document.createElement("div");
	ctr.classList.add("plaintext");
	ctr.appendChild(document.createTextNode(text));
	out.appendChild(ctr);
	return ctr;
};
ui_Preferences.createShellAnchor = function(url,label) {
	var a = document.createElement("a");
	a.href = url;
	a.target = "_blank";
	a.onclick = function(_) {
		Electron_Shell.openExternal(url);
		return false;
	};
	a.appendChild(document.createTextNode(label));
	return a;
};
ui_Preferences.addWiki = function(to,url,label) {
	if(label == null) {
		label = "wiki";
	}
	var lb = to.querySelector("legend");
	if(lb == null) {
		lb = to.querySelector("label");
	}
	lb.appendChild(document.createTextNode(" ("));
	lb.appendChild(ui_Preferences.createShellAnchor(url,label));
	lb.appendChild(document.createTextNode(")"));
};
ui_Preferences.createValidIdFromString = function(str) {
	str = str.toLowerCase();
	var alphanumeric_r = new RegExp("[^a-z0-9_\\s-]","g".split("u").join(""));
	str = str.replace(alphanumeric_r,"");
	var dashes_r = new RegExp("[\\s-]+","g".split("u").join(""));
	str = str.replace(dashes_r,"");
	var whitespace_r = new RegExp("[\\s_]","g".split("u").join(""));
	str = str.replace(whitespace_r,"");
	return str;
};
ui_Preferences.open = function() {
	var kind = file_kind_misc_KPreferences.inst;
	var _g = 0;
	var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
	while(_g < _g1.length) {
		var tab = _g1[_g];
		++_g;
		if(tab.gmlFile.kind == kind) {
			tab.click();
			return;
		}
	}
	kind.create("Preferences",null,null,null);
};
ui_Preferences.save = function() {
	electron_FileWrap.writeConfigSync("config",ui_Preferences.path,ui_Preferences.current);
};
ui_Preferences.load = function() {
	var pref = null;
	try {
		pref = electron_FileWrap.readConfigSync("config",ui_Preferences.path);
	} catch( e ) {
		console.error("Error loading preferences: ",((e) instanceof js__$Boot_HaxeError) ? e.val : e);
	}
	if(pref != null) {
		if(pref.compMatchMode == null && pref.compExactMatch != null) {
			pref.compMatchMode = pref.compExactMatch ? 0 : 2;
		}
	}
	var def = { theme : "dark", ukSpelling : false, compMatchMode : 0, argsMagic : true, argsFormat : "@param", importMagic : true, allowImportUndo : false, coroutineMagic : true, lambdaMagic : true, hyperMagic : true, mfuncMagic : true, fileSessionTime : 7, projectSessionTime : 14, singleClickOpen : false, assetThumbs : true, showGMLive : 2, fileChangeAction : 1, backupCount : { v1 : 2, v2 : 0, live : 0}, recentProjectCount : 16, tabSize : 4, tabSpaces : true, detectTab : true, eventOrder : 1, tooltipDelay : 350, tooltipKind : 1, linterPrefs : { }};
	var doSave = false;
	if(pref == null) {
		pref = def;
		doSave = true;
	} else {
		var q = def;
		var fd = null;
		var has = Object.prototype.hasOwnProperty;
		for (fd in q) {
		if(has.call(q,fd)) {
			if(Reflect.field(pref,fd) == null) {
				pref[fd] = Reflect.field(def,fd);
				doSave = true;
			}
		}
		}
	}
	ui_Preferences.current = pref;
	if(doSave) {
		ui_Preferences.save();
	}
	if(pref.theme != null) {
		ui_Theme.set_current(pref.theme);
	}
	gml_GmlAPI.ukSpelling = pref.ukSpelling;
};
ui_Preferences.init = function() {
	var isMac;
	var ep = window.process;
	if(ep == null) {
		var np = window.navigator.platform;
		isMac = np != null && np.toLowerCase().indexOf("mac") >= 0;
	} else {
		isMac = ep.platform == "darwin";
	}
	electron_FileWrap.isMac = isMac;
	ui_Preferences.load();
};
ui_Preferences.hookSetOption = function(obj) {
	if(obj.setOption_raw != null) {
		return;
	}
	obj.setOption_raw = obj.setOption;
	obj.setOption = function(key,val) {
		obj.setOption_raw(key,val);
		if(key == "tabSize" && val != ui_Preferences.current.tabSize) {
			ui_Preferences.current.tabSize = Std.parseInt(val);
			ui_Preferences.save();
		}
		if(key == "useSoftTabs" && val != ui_Preferences.current.tabSpaces) {
			ui_Preferences.current.tabSpaces = val;
			ui_Preferences.save();
		}
		if(Main.aceEditor != null) {
			var opts = Main.aceEditor.getOptions();
			Reflect.deleteField(opts,"enableLiveAutocompletion");
			Reflect.deleteField(opts,"theme");
			Reflect.deleteField(opts,"enableSnippets");
			electron_FileWrap.writeConfigSync("config","aceOptions",opts);
		}
	};
};
ui_Preferences.bindEditor = function(editor) {
	try {
		var opts = electron_FileWrap.readConfigSync("config","aceOptions");
		if(opts != null) {
			opts["enableSnippets"] = true;
			Reflect.deleteField(opts,"mode");
			editor.setOptions(opts);
		}
	} catch( e ) {
		console.error("Error loading Ace options: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e));
	}
	editor.setOption("fixedWidthGutter",true);
	ui_Preferences.hookSetOption(editor);
	ui_Preferences.hookSetOption(editor.renderer);
	if(editor.getOption("fontFamily") == null) {
		editor.setOption("fontFamily",electron_FileWrap.isMac ? "Menlo, monospace" : "Consolas, Courier New, monospace");
	}
};
var ui_ProjectStyle = function() { };
$hxClasses["ui.ProjectStyle"] = ui_ProjectStyle;
ui_ProjectStyle.__name__ = "ui.ProjectStyle";
ui_ProjectStyle.reload = function() {
	var pj = gml_Project.current;
	if(pj.path != "") {
		if(pj.isVirtual) {
			var cssPath = pj.name + ".css";
			if(pj.existsSync(cssPath)) {
				ui_ProjectStyle.style.innerHTML = pj.readTextFileSync(cssPath);
			} else {
				ui_ProjectStyle.style.innerHTML = "";
			}
			ui_ProjectStyle.link.href = "";
		} else {
			var path = gml_Project.current.path + ".css";
			if(Electron_FS.existsSync(path)) {
				var tmp = new Date().getTime();
				ui_ProjectStyle.link.href = "file:///" + path + "?t=" + tmp;
			} else {
				ui_ProjectStyle.link.href = "";
			}
			ui_ProjectStyle.style.innerHTML = "";
		}
	} else {
		ui_ProjectStyle.link.href = "";
		ui_ProjectStyle.style.innerHTML = "";
	}
};
ui_ProjectStyle.setItemThumb = function(data) {
	var thumb = data.thumb;
	if(thumb != null) {
		thumb = haxe_io_Path.normalize(thumb);
		var pjdir = haxe_io_Path.normalize(gml_Project.current.dir);
		if(thumb.startsWith(pjdir)) {
			thumb = "." + thumb.substring(pjdir.length);
		} else {
			thumb = "file:///" + thumb;
		}
	}
	var path = gml_Project.current.path + ".css";
	var sel;
	var sfx = data.suffix;
	var _g = data.kind;
	if(_g == null) {
		sel = ".treeview .dir[" + "data-rel-path" + "=\"" + data.rel.replace(tools_NativeString.escapeProp_1,"\\$1") + ("\"]" + sfx + " > .header");
	} else {
		switch(_g) {
		case "config":case "datafile":case "extfile":
			sel = ".treeview .item[" + "data-rel-path" + "=\"" + data.rel.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]" + sfx;
			break;
		default:
			sel = ".treeview .item[" + "data-ident" + "=\"" + data.ident.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]" + sfx;
		}
	}
	var proc = function(text) {
		var r0 = sel + ":before { background: url(\"";
		var rx = new RegExp("^" + r0.replace(tools_NativeString.escapeRx_1,"\\$1") + ".+" + "\") center/contain no-repeat; }".replace(tools_NativeString.escapeRx_1,"\\$1") + "$","gm");
		var next = thumb != null ? r0 + thumb.replace(tools_NativeString.escapeProp_1,"\\$1") + "\") center/contain no-repeat; }" : "";
		var found = false;
		text = text.replace(rx,function(s) {
			found = true;
			return next;
		});
		if(!found && next != "") {
			if(text != "") {
				text += "\n";
			}
			text += next;
		}
		Electron_FS.writeFileSync(path,text);
		ui_ProjectStyle.reload();
	};
	if(!Electron_FS.existsSync(path)) {
		proc("");
	} else {
		Electron_FS.readFile(path,"utf8",function(err,txt) {
			if(err == null) {
				proc(txt);
			}
		});
	}
};
ui_ProjectStyle.init = function() {
	ui_ProjectStyle.link = document.querySelector("#project-style");
	ui_ProjectStyle.style = document.querySelector("#project-style-inline");
};
var ui_RecentProjects = function() { };
$hxClasses["ui.RecentProjects"] = ui_RecentProjects;
ui_RecentProjects.__name__ = "ui.RecentProjects";
ui_RecentProjects.get = function() {
	try {
		var curr = electron_FileWrap.readConfigSync("session","recent-projects");
		if(!(((curr) instanceof Array) && curr.__enum__ == null)) {
			return [];
		}
		var _g = 0;
		var _g1 = curr.length;
		while(_g < _g1) {
			var i = _g++;
			curr[i] = StringTools.replace(curr[i],"\\","/");
		}
		return curr;
	} catch( _ ) {
		return [];
	}
};
ui_RecentProjects.set = function(list) {
	electron_FileWrap.writeConfigSync("session","recent-projects",list);
};
ui_RecentProjects.add = function(path) {
	var curr = ui_RecentProjects.get();
	HxOverrides.remove(curr,path);
	curr.unshift(path);
	if(curr.length > ui_Preferences.current.recentProjectCount) {
		curr.pop();
	}
	ui_RecentProjects.set(curr);
};
ui_RecentProjects.remove = function(path) {
	var curr = ui_RecentProjects.get();
	HxOverrides.remove(curr,path);
	ui_RecentProjects.set(curr);
};
ui_RecentProjects.show = function() {
	ui_treeview_TreeView.clear();
	var el = ui_treeview_TreeView.element;
	var lookup = "";
	if(Electron_API != null) {
		var _g = 0;
		var _g1 = ui_RecentProjects.get();
		while(_g < _g1.length) {
			var path = [_g1[_g]];
			++_g;
			var name = haxe_io_Path.withoutDirectory(path[0]);
			switch(name.toLowerCase()) {
			case "main.cfg":case "main.txt":
				name = haxe_io_Path.withoutDirectory(haxe_io_Path.directory(path[0]));
				break;
			}
			lookup += name + "\n";
			var pj = [ui_treeview_TreeView.makeProject(name,path[0])];
			Electron_FS.access(path[0],0,(function(pj1,path1) {
				return function(e) {
					if(e == null) {
						var th = path1[0] + ".png";
						var tmp = (function(path2) {
							return function(e1) {
								if(e1 == null) {
									ui_treeview_TreeView.setThumb(path2[0],"file:///" + th);
								}
							};
						})(path1);
						Electron_FS.access(th,0,tmp);
					} else {
						pj1[0].setAttribute("data-missing","true");
					}
				};
			})(pj,path));
			el.appendChild(pj[0]);
		}
	}
	gml_GmlAPI.gmlLookupText = lookup;
};
var ui_ScrollMode = function() {
	this.scrollWait = false;
};
$hxClasses["ui.ScrollMode"] = ui_ScrollMode;
ui_ScrollMode.__name__ = "ui.ScrollMode";
ui_ScrollMode.prototype = {
	mousedown: function(e) {
		var _gthis = this;
		if(e.button != 1 && e.layerX < this.scrollbar.offsetWidth - this.scrollbarWidthInt) {
			this.scrollbar.style.width = this.scrollbarWidth;
			this.scrollbar.style.cursor = "";
			this.scrollWait = true;
			var e1 = new MouseEvent(e.type,e);
			this.container.querySelector(".ace_scroller").dispatchEvent(e1);
			var fn = null;
			fn = function(e2) {
				_gthis.scrollWait = false;
				window.removeEventListener("mouseup",fn);
			};
			window.addEventListener("mouseup",fn);
		}
	}
	,mousemove: function(e) {
		if(this.scrollWait) {
			return;
		}
		var sb = this.editor.renderer.scrollBar.element;
		var pos = this.editor.renderer.screenToTextCoordinates(e.clientX,e.clientY);
		var line = this.editor.getSession().getLine(pos.row);
		if(line == null || pos.column >= line.length) {
			sb.style.width = "100%";
			sb.style.cursor = e.layerX < this.scrollbar.offsetWidth - this.scrollbarWidthInt ? "text" : "";
		} else {
			sb.style.width = this.scrollbarWidth;
			sb.style.cursor = "";
		}
	}
	,bind: function(editor) {
		try {
			new MouseEvent("mousedown");
		} catch( _ ) {
			var _1 = ((_) instanceof js__$Boot_HaxeError) ? _.val : _;
			return;
		}
		this.editor = editor;
		this.container = editor.container;
		this.scrollbar = editor.renderer.scrollBar.element;
		this.scrollbarWidth = this.scrollbar.style.width;
		this.scrollbarWidthInt = parseInt(this.scrollbarWidth);
		this.scrollbar.addEventListener("mousedown",$bind(this,this.mousedown));
		this.container.addEventListener("mousemove",$bind(this,this.mousemove));
	}
	,__class__: ui_ScrollMode
};
var ui__$Sidebar_SidebarItem = function(name,el) {
	this.name = name;
	this.el = el;
	this.opt = document.createElement("option");
	tools_HtmlTools.setInnerText(this.opt,name);
};
$hxClasses["ui._Sidebar.SidebarItem"] = ui__$Sidebar_SidebarItem;
ui__$Sidebar_SidebarItem.__name__ = "ui._Sidebar.SidebarItem";
ui__$Sidebar_SidebarItem.prototype = {
	__class__: ui__$Sidebar_SidebarItem
};
var ui_Theme = function() { };
$hxClasses["ui.Theme"] = ui_Theme;
ui_Theme.__name__ = "ui.Theme";
ui_Theme.reset = function() {
	var _g = 0;
	var _g1 = ui_Theme.elements;
	while(_g < _g1.length) {
		var el = _g1[_g];
		++_g;
		var par = el.parentElement;
		if(par != null) {
			par.removeChild(el);
		}
	}
	ui_Theme.setDarkTabs(false);
};
ui_Theme.setDarkTabs = function(z) {
	var _g = [];
	var _g1 = 0;
	var _g2 = document.querySelectorAll(".chrome-tabs");
	while(_g1 < _g2.length) _g.push(_g2[_g1++]);
	_g.push(document.querySelector("#main"));
	var _g3 = 0;
	while(_g3 < _g.length) {
		var cl = _g[_g3++].classList;
		if(z) {
			cl.add("chrome-tabs-dark-theme");
		} else {
			cl.remove("chrome-tabs-dark-theme");
		}
	}
};
ui_Theme.add = function(name) {
	var dir = haxe_io_Path.join([Main.modulePath,"themes",name]);
	var fullConf = haxe_io_Path.join([dir,"config.json"]);
	var proc = function(theme) {
		if(theme.parentTheme != null) {
			ui_Theme.add(theme.parentTheme);
		}
		if(theme.darkChromeTabs != null) {
			ui_Theme.setDarkTabs(theme.darkChromeTabs);
		}
		if(theme.windowsAccentColors) {
			electron_WindowsAccentColors.update();
		}
		if(theme.stylesheets != null) {
			var _g = 0;
			var _g1 = theme.stylesheets;
			while(_g < _g1.length) {
				var rel = _g1[_g++];
				var link = document.createElement("link");
				link.rel = "stylesheet";
				link.href = haxe_io_Path.join([dir,rel]);
				document.head.appendChild(link);
				ui_Theme.elements.push(link);
			}
		}
	};
	if(Electron_FS.existsSync != null) {
		if(Electron_FS.existsSync(fullConf)) {
			var tmp = JSON.parse(Electron_FS.readFileSync(fullConf,"utf8"));
			proc(tmp);
		} else {
			dir = electron_FileWrap.userPath + "/themes/" + name;
			fullConf = dir + "/config.json";
			if(Electron_FS.existsSync(fullConf)) {
				var tmp1 = JSON.parse(Electron_FS.readFileSync(fullConf,"utf8"));
				proc(tmp1);
			}
		}
	} else {
		var callback = function(err,data) {
			if(data != null) {
				proc(data);
			}
		};
		Electron_FS.readFile(fullConf,"utf8",function(e,d) {
			if(d != null) {
				try {
					d = JSON.parse(d);
				} catch( x ) {
					d = null;
					e = ((x) instanceof js__$Boot_HaxeError) ? x.val : x;
				}
			}
			callback(e,d);
		});
	}
};
ui_Theme.set_current = function(name) {
	if(ui_Theme.current == name) {
		return name;
	}
	ui_Theme.current = name;
	ui_Theme.reset();
	ui_Theme.add(name);
	return name;
};
var ui_WelcomePage = function() { };
$hxClasses["ui.WelcomePage"] = ui_WelcomePage;
ui_WelcomePage.__name__ = "ui.WelcomePage";
ui_WelcomePage.init = function(e) {
	ui_WelcomePage.file = new gml_file_GmlFile("WelcomePage",null,file_kind_gml_KGmlScript.inst,"");
	gml_file_GmlFile.set_current(ui_WelcomePage.file);
	var session = ui_WelcomePage.file.codeEditor.session;
	session.setValue(ui_WelcomePage.lwText);
	return session;
};
var ui_liveweb_LiveWeb = function() { };
$hxClasses["ui.liveweb.LiveWeb"] = ui_liveweb_LiveWeb;
ui_liveweb_LiveWeb.__name__ = "ui.liveweb.LiveWeb";
ui_liveweb_LiveWeb.getPairs = function(post) {
	var out = [];
	var proc = function(file1) {
		if(!((file1.kind) instanceof file_kind_gml_KGmlScript)) {
			return;
		}
		var edit = file1.editor;
		var val = edit.session.getValue();
		if(post) {
			var pair = edit.postpImport(val);
			if(pair == null) {
				return;
			}
			val = pair.val;
			val = file1.kind.postproc_1(edit,val,pair.sessionChanged);
		}
		out.push({ name : file1.name, code : val});
	};
	var _g = 0;
	var _g1 = ui_ChromeTabs.impl.tabEls;
	while(_g < _g1.length) proc(_g1[_g++].gmlFile);
	if(ui_ChromeTabs.impl.tabEls.length == 0) {
		proc(gml_file_GmlFile.current);
	}
	return out;
};
ui_liveweb_LiveWeb.setPairs = function(pairs) {
	var _g = 0;
	var _g1 = ui_ChromeTabs.impl.tabEls;
	while(_g < _g1.length) ui_ChromeTabs.impl.removeTab(_g1[_g++]);
	var first = null;
	var _g2 = 0;
	while(_g2 < pairs.length) {
		var pair = pairs[_g2];
		++_g2;
		var path = pair.name;
		var code = pair.code;
		var file1 = new gml_file_GmlFile(path,path,file_kind_gml_KGmlScript.inst,code);
		if(first == null) {
			first = file1;
		}
		gml_file_GmlFile.next = file1;
		ui_ChromeTabs.impl.addTab({ title : pair.name});
		parsers_GmlSeeker.runSync(path,code,"",file_kind_gml_KGmlScript.inst);
		var edit = file1.editor;
		edit.postpImport(edit.session.getValue());
		edit.session.bgTokenizer.start(0);
	}
	if(first != null) {
		var _g3 = 0;
		var _g4 = ui_ChromeTabs.impl.tabEls;
		while(_g3 < _g4.length) {
			var tab = _g4[_g3];
			++_g3;
			if(tab.gmlFile != first) {
				continue;
			}
			tab.click();
			break;
		}
	}
};
ui_liveweb_LiveWeb.saveState = function() {
	window.localStorage.setItem("liveweb-state",JSON.stringify(ui_liveweb_LiveWeb.getPairs()));
	window.localStorage.setItem("liveweb-mode",ui_liveweb_LiveWeb.modeEl.value);
};
ui_liveweb_LiveWeb.loadState = function(raw) {
	if(raw == null) {
		raw = window.localStorage.getItem("liveweb-state");
		ui_liveweb_LiveWeb.modeEl.value = window.localStorage.getItem("liveweb-mode");
		if(ui_liveweb_LiveWeb.modeEl.value == "") {
			ui_liveweb_LiveWeb.modeEl.value = "2d";
		}
	}
	if(raw != null && raw != "") {
		try {
			ui_liveweb_LiveWeb.setPairs(JSON.parse(raw));
		} catch( x ) {
			console.error("Couldn't load tabs",((x) instanceof js__$Boot_HaxeError) ? x.val : x);
		}
	}
};
ui_liveweb_LiveWeb.getParams = function() {
	var out = Object.create(null);
	var search = window.location.search;
	var p = search.indexOf("?");
	if(search == "" || p < 0) {
		return out;
	}
	var pairs = search.substring(p + 1).split("&");
	var _g = 0;
	while(_g < pairs.length) {
		var pair = pairs[_g];
		++_g;
		p = pair.indexOf("=");
		if(p >= 0) {
			out[pair.substring(0,p)] = pair.substring(p + 1);
		} else {
			out[pair] = "";
		}
	}
	return out;
};
ui_liveweb_LiveWeb.postfixColors = function(s) {
	if(!new EReg("#define draw\\b","g").match(s)) {
		return s;
	}
	if(new EReg("\\b(?:background_color|background_colour|draw_clear)\\b","g").match(s)) {
		return s;
	}
	return "background_color = $F5F5F5; draw_set_color(0); // (legacy colors)\n" + s;
};
ui_liveweb_LiveWeb.readyUp = function() {
	if(ui_liveweb_LiveWeb.isReady) {
		return;
	}
	ui_liveweb_LiveWeb.isReady = true;
	var sp = ui_liveweb_LiveWeb.getParams();
	var s = sp["mode"];
	if(s != null) {
		var mc = ui_liveweb_LiveWeb.modeEl.onchange;
		ui_liveweb_LiveWeb.modeEl.onchange = null;
		ui_liveweb_LiveWeb.modeEl.value = s;
		if(ui_liveweb_LiveWeb.modeEl.value == "") {
			ui_liveweb_LiveWeb.modeEl.value = "2d";
		}
		ui_liveweb_LiveWeb.modeEl.onchange = mc;
	}
	s = sp["tabs_lz"];
	if(s != null) {
		ui_liveweb_LiveWeb.loadState(LZString.decompressFromEncodedURIComponent(s));
	} else {
		s = sp["tabs_64"];
		if(s != null) {
			ui_liveweb_LiveWeb.loadState(tools_Base64.decode(s));
		} else {
			s = sp["lzgml"];
			if(s != null) {
				try {
					s = LZString.decompressFromEncodedURIComponent(s);
					ui_liveweb_LiveWeb.setPairs([{ name : "main", code : ui_liveweb_LiveWeb.postfixColors(s)}]);
				} catch( x ) {
					window.alert("Decompression error:\n" + Std.string(((x) instanceof js__$Boot_HaxeError) ? x.val : x));
				}
			} else {
				s = sp["gml"];
				if(s != null) {
					try {
						s = tools_Base64.decode(s);
						ui_liveweb_LiveWeb.setPairs([{ name : "main", code : ui_liveweb_LiveWeb.postfixColors(s)}]);
					} catch( x1 ) {
						window.alert("Decode error:\n" + Std.string(((x1) instanceof js__$Boot_HaxeError) ? x1.val : x1));
					}
				} else {
					ui_liveweb_LiveWeb.loadState();
				}
			}
		}
	}
	(Reflect.field(window,"lwRunBlank"))();
};
ui_liveweb_LiveWeb.addTab = function(name,code) {
	var _g = 0;
	var _g1 = ui_ChromeTabs.impl.tabEls;
	while(_g < _g1.length) if(_g1[_g++].gmlFile.name == name) {
		window.alert("A tab with this name already exists.");
		return;
	}
	gml_file_GmlFile.openTab(new gml_file_GmlFile(name,name,file_kind_gml_KGmlScript.inst,code));
	parsers_GmlSeeker.runSync(name,name,code,file_kind_gml_KGmlScript.inst);
};
ui_liveweb_LiveWeb.newTabDialog = function() {
	electron_DialogFallback.showPrompt("New tab name?","",function(name) {
		if(name == null || name == "") {
			return;
		}
		ui_liveweb_LiveWeb.addTab(name,"");
	});
};
ui_liveweb_LiveWeb.init = function() {
	window["aceGetPairs"] = ui_liveweb_LiveWeb.getPairs;
	window["aceSetPairs"] = ui_liveweb_LiveWeb.setPairs;
	window["aceTabFlush"] = function() {
		var _g = 0;
		var _g1 = ui_ChromeTabs.impl.tabEls;
		while(_g < _g1.length) _g1[_g++].gmlFile.save();
		ui_liveweb_LiveWeb.saveState();
	};
	window["aceClearErrors"] = function() {
		var _g2 = 0;
		var _g11 = ui_ChromeTabs.impl.tabEls;
		while(_g2 < _g11.length) {
			var es = _g11[_g2++].gmlFile.getAceSession();
			if(es == null) {
				continue;
			}
			var mk = es.gmlErrorMarker;
			if(mk == null) {
				continue;
			}
			es.removeMarker(mk);
			es.gmlErrorMarker = null;
			es.clearAnnotations();
		}
	};
	window["aceHintText"] = function(msg) {
		var statusBar = Main.aceEditor.statusBar;
		statusBar.setText(msg);
		statusBar.ignoreUntil = window.performance.now() + statusBar.delayTime + 50;
		var _g3 = 0;
		var _g12 = ui_ChromeTabs.impl.tabEls;
		while(_g3 < _g12.length) {
			var es1 = _g12[_g3++].gmlFile.getAceSession();
			if(es1 == null) {
				continue;
			}
			es1.clearAnnotations();
		}
	};
	window["aceHintError"] = function(path,pos,msg1) {
		var col = pos.column;
		var row = pos.row;
		var hint = Main.aceEditor.statusBar.statusHint;
		tools_HtmlTools.setInnerText(hint,msg1);
		hint.classList.add("active");
		hint.onclick = function(_) {
			if(gml_file_GmlFile.current.path != path) {
				var _g4 = 0;
				var _g13 = ui_ChromeTabs.impl.tabEls;
				while(_g4 < _g13.length) {
					var tab = _g13[_g4];
					++_g4;
					if(tab.gmlFile.path != path) {
						continue;
					}
					tab.click();
					break;
				}
				window.setTimeout(function() {
					Main.aceEditor.gotoLine(row + 1,col);
				});
			} else {
				Main.aceEditor.gotoLine(row + 1,col);
			}
		};
		var statusBar1 = Main.aceEditor.statusBar;
		statusBar1.ignoreUntil = window.performance.now() + statusBar1.delayTime + 50;
		var _g5 = 0;
		var _g14 = ui_ChromeTabs.impl.tabEls;
		while(_g5 < _g14.length) {
			var tab1 = _g14[_g5];
			++_g5;
			if(tab1.gmlFile.path != path) {
				continue;
			}
			var session = tab1.gmlFile.getAceSession();
			if(session == null) {
				continue;
			}
			session.gmlErrorMarker = session.addMarker(ace_extern__$AceRange_AceRange_$Impl_$._new(0,row,session.getLine(row).length,row),"ace_error-line","fullLine");
			session.setAnnotations([{ row : row, column : col, type : "error", text : msg1}]);
			break;
		}
	};
	ui_liveweb_LiveWeb.modeEl = document.querySelector("#mode");
	ui_liveweb_LiveWeb.modeEl.onchange = function(_1) {
		if(ui_liveweb_LiveWeb.modeEl.value != "") {
			(Reflect.field(window,"lwModeChanged"))();
		}
	};
	document.getElementById("share").onclick = function() {
		var params = ["mode=" + ui_liveweb_LiveWeb.modeEl.value];
		var src = JSON.stringify(ui_liveweb_LiveWeb.getPairs());
		var lzs = "tabs_lz=" + LZString.compressToEncodedURIComponent(src);
		var b64 = "tabs_64=" + tools_Base64.encode(src);
		params.push(lzs.length < b64.length ? lzs : b64);
		var url = "https://yal.cc/r/gml/?" + params.join("&");
		var size = url.length;
		var sizeStr;
		if(size >= 10000) {
			sizeStr = (size / 1024 * 100 | 0) * 0.01 + "KB";
		} else {
			sizeStr = size + "B";
		}
		var textarea = document.querySelector("#lw_share_code");
		tools_HtmlTools.setInnerText(document.querySelector("#lw_share_size"),sizeStr);
		textarea.value = url;
		document.querySelector("#lw_share").style.display = "";
		textarea.select();
	};
};
var ui_liveweb_LiveWebIO = function() { };
$hxClasses["ui.liveweb.LiveWebIO"] = ui_liveweb_LiveWebIO;
ui_liveweb_LiveWebIO.__name__ = "ui.liveweb.LiveWebIO";
ui_liveweb_LiveWebIO.importDialog = function() {
	electron_DialogFallback.showOpenDialogWrap({ filters : [{ name : "GameMaker files", extensions : ["gml"]},{ name : "Archives with GML files", extensions : ["zip"]}]},function(files) {
		var _g = 0;
		while(_g < files.length) ui_liveweb_LiveWebIO.acceptFile(files[_g++]);
	});
};
ui_liveweb_LiveWebIO.exportDialog = function() {
	var pairs = ui_liveweb_LiveWeb.getPairs();
	if(pairs.length == 0) {
		return;
	}
	if(pairs.length == 1) {
		tools_BufferTools.saveAs(haxe_io_Bytes.ofString(pairs[0].code),pairs[0].name + ".gml","text/gml");
		return;
	}
	var output = new haxe_io_BytesOutput();
	var writer = new haxe_zip_Writer(output);
	var entries = new haxe_ds_List();
	var now = new Date();
	var _g = 0;
	while(_g < pairs.length) {
		var pair = pairs[_g];
		++_g;
		var bytes = haxe_io_Bytes.ofString(pair.code);
		entries.push({ fileName : pair.name + ".gml", fileSize : bytes.length, fileTime : now, compressed : false, dataSize : bytes.length, data : bytes, crc32 : haxe_crypto_Crc32.make(bytes)});
	}
	writer.write(entries);
	tools_BufferTools.saveAs(output.getBytes().sub(0,output.b.pos),pairs[0].name + ".zip","application/zip");
};
ui_liveweb_LiveWebIO.acceptFile = function(file) {
	switch(haxe_io_Path.extension(file.name).toLowerCase()) {
	case "gml":
		var reader = new FileReader();
		reader.onloadend = function(_) {
			ui_liveweb_LiveWeb.addTab(haxe_io_Path.withoutExtension(file.name),reader.result);
		};
		reader.readAsText(file);
		break;
	case "zip":
		var reader1 = new FileReader();
		reader1.onloadend = function(_1) {
			try {
				var _g_head = haxe_zip_Reader.readZip(new haxe_io_BytesInput(haxe_io_Bytes.ofData(reader1.result))).h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var path = val.fileName;
					if(haxe_io_Path.extension(path).toLowerCase() != "gml") {
						continue;
					}
					var data = val.data;
					if(data == null) {
						continue;
					}
					if(val.compressed) {
						data = tools_BufferTools.inflate(data);
					}
					ui_liveweb_LiveWeb.addTab(haxe_io_Path.withoutExtension(path),data.toString());
				}
			} catch( _2 ) {
			}
		};
		reader1.readAsArrayBuffer(file);
		break;
	}
};
var ui_preferences_PrefBackups = function() { };
$hxClasses["ui.preferences.PrefBackups"] = ui_preferences_PrefBackups;
ui_preferences_PrefBackups.__name__ = "ui.preferences.PrefBackups";
ui_preferences_PrefBackups.build = function(out) {
	out = ui_Preferences.addGroup(out,"Backups");
	out.id = "pref-backups";
	ui_Preferences.addWiki(out,"https://github.com/GameMakerDiscord/GMEdit/wiki/Preferences#backups");
	ui_Preferences.addText(out,"Values are numbers of backup copies per file.");
	ui_Preferences.addIntInput(out,"for GMS1 projects",ui_Preferences.current.backupCount.v1,function(n) {
		ui_Preferences.current.backupCount.v1 = n;
		ui_Preferences.save();
	});
	ui_Preferences.addIntInput(out,"for GMS2 projects",ui_Preferences.current.backupCount.v2,function(n1) {
		ui_Preferences.current.backupCount.v2 = n1;
		ui_Preferences.save();
	});
	ui_Preferences.addIntInput(out,"for other projects",ui_Preferences.current.backupCount.live,function(n2) {
		ui_Preferences.current.backupCount.live = n2;
		ui_Preferences.save();
	});
};
var ui_preferences_PrefCode = function() { };
$hxClasses["ui.preferences.PrefCode"] = ui_preferences_PrefCode;
ui_preferences_PrefCode.__name__ = "ui.preferences.PrefCode";
ui_preferences_PrefCode.build = function(out) {
	out = ui_Preferences.addGroup(out,"Code editor");
	out.id = "pref-code";
	ui_Preferences.addCheckbox(out,"UK spelling",ui_Preferences.current.ukSpelling,function(z) {
		ui_Preferences.current.ukSpelling = z;
		gml_GmlAPI.ukSpelling = z;
		gml_GmlAPI.init();
		ui_Preferences.save();
	}).title = "Displays UK versions of function/variable names (e.g. draw_set_colour) in auto-completion when available.";
	var compMatchModes = ["Start of string (GMS1 style)","Containing (GMS2 style)","Smart (`icl` -> `io_clear`)","Per-section (`icl` -> `instance_create_layer`)"];
	var el = ui_Preferences.addDropdown(out,"Auto-completion mode",compMatchModes[ui_Preferences.current.compMatchMode],compMatchModes,function(s) {
		ui_Preferences.current.compMatchMode = compMatchModes.indexOf(s);
		ui_Preferences.save();
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Preferences#auto-completion-mode");
	ui_Preferences.addCheckbox(out,"Auto-detect soft tabs",ui_Preferences.current.detectTab,function(z1) {
		ui_Preferences.current.detectTab = z1;
		ui_Preferences.save();
	}).title = "If enabled, will auto-detect whether to indent with tabs or spaces" + " based on whether the file has lines starting with either.";
	var tooltipKinds = ["None","Custom"];
	ui_Preferences.addDropdown(out,"Code tooltips",tooltipKinds[ui_Preferences.current.tooltipKind],tooltipKinds,function(s1) {
		ui_Preferences.current.tooltipKind = tooltipKinds.indexOf(s1);
		ui_Preferences.save();
	});
	ui_Preferences.addIntInput(out,"Code tooltip delay (ms):",ui_Preferences.current.tooltipDelay,function(t) {
		ui_Preferences.current.tooltipDelay = t;
		ui_Preferences.save();
	});
	var optSnippets_0 = ["gml","gml_search","shader"];
	var optSnippets_1 = ["GML","Search results","Shaders"];
	var optSnippets_select = null;
	el = ui_Preferences.addDropdown(out,"Edit snippets","",optSnippets_1,function(name) {
		var mode = optSnippets_0[optSnippets_1.indexOf(name)];
		gml_file_GmlFile.openTab(new gml_file_GmlFile(mode + ".snippets",mode,file_kind_misc_KSnippets.inst));
		optSnippets_select.value = "";
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-snippets");
	optSnippets_select = el.querySelector("select");
	ui_Preferences.addButton(out,"Code Editor Settings",function() {
		ace.config.loadModule("ace/ext/settings_menu",function(module) {
			module.init(Main.aceEditor);
			Main.aceEditor.showSettingsMenu();
		});
	});
};
var ui_preferences_PrefLinter = function() { };
$hxClasses["ui.preferences.PrefLinter"] = ui_preferences_PrefLinter;
ui_preferences_PrefLinter.__name__ = "ui.preferences.PrefLinter";
ui_preferences_PrefLinter.build = function(out,project) {
	out = ui_Preferences.addGroup(out,"Linter");
	out.id = "pref-linter";
	var opt;
	if(project != null) {
		opt = project.properties.linterPrefs;
		if(opt == null) {
			opt = project.properties.linterPrefs = { };
		}
	} else {
		opt = ui_Preferences.current.linterPrefs;
	}
	var saveOpt = function() {
		if(project != null) {
			ui_project_ProjectProperties.save(project,project.properties);
		} else {
			ui_Preferences.save();
		}
	};
	var add = function(name,get,set,defValue) {
		var initialValue = get(opt);
		if(project != null) {
			var options = ui_preferences_PrefLinter.selectOpts.slice();
			var values = ui_preferences_PrefLinter.selectVals;
			var parentValue = get(ui_Preferences.current.linterPrefs);
			if(parentValue == null) {
				parentValue = defValue;
			}
			options[0] += " (➜ " + (parentValue ? "on" : "off") + ")";
			ui_Preferences.addDropdown(out,name,options[values.indexOf(initialValue)],options,function(s) {
				set(opt,values[options.indexOf(s)]);
				saveOpt();
			});
		} else {
			if(initialValue == null) {
				initialValue = defValue;
			}
			ui_Preferences.addCheckbox(out,name,initialValue,function(z) {
				set(opt,z);
				saveOpt();
			});
		}
	};
	add("Syntax check on load",function(q) {
		return q.onLoad;
	},function(q1,z1) {
		q1.onLoad = z1;
	},parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$.defValue.onLoad);
	add("Syntax check on save",function(q2) {
		return q2.onSave;
	},function(q3,z2) {
		q3.onSave = z2;
	},parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$.defValue.onSave);
	add("Warn about missing semicolons",function(q4) {
		return q4.requireSemicolons;
	},function(q5,z3) {
		q5.requireSemicolons = z3;
	},parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$.defValue.requireSemicolons);
	add("Warn about single `=` comparisons",function(q6) {
		return q6.noSingleEquals;
	},function(q7,z4) {
		q7.noSingleEquals = z4;
	},parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$.defValue.noSingleEquals);
	add("Warn about conditions without ()",function(q8) {
		return q8.requireParentheses;
	},function(q9,z5) {
		q9.requireParentheses = z5;
	},parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$.defValue.requireParentheses);
};
var ui_preferences_PrefMagic = function() { };
$hxClasses["ui.preferences.PrefMagic"] = ui_preferences_PrefMagic;
ui_preferences_PrefMagic.__name__ = "ui.preferences.PrefMagic";
ui_preferences_PrefMagic.build = function(out) {
	out = ui_Preferences.addGroup(out,"Syntax extensions");
	out.id = "pref-magic";
	var el = ui_Preferences.addCheckbox(out,"Use `#args` magic",ui_Preferences.current.argsMagic,function(z) {
		ui_Preferences.current.argsMagic = z;
		ui_Preferences.save();
	});
	el.title = "Allows writing `#args a, b` instead of `var a = argument0, b = argument1`.";
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-%23args-magic");
	var noAutoArgs = "Don't auto-generate";
	el = ui_Preferences.addDropdown(out,"JSDoc format for #args",ui_Preferences.current.argsFormat != "" ? ui_Preferences.current.argsFormat : noAutoArgs,[noAutoArgs,"@arg","@param","@argument"],function(v) {
		if(v == noAutoArgs) {
			v = "";
		}
		ui_Preferences.current.argsFormat = v;
		ui_Preferences.save();
	});
	el = ui_Preferences.addCheckbox(out,"Use `#import` magic",ui_Preferences.current.importMagic,function(z1) {
		ui_Preferences.current.importMagic = z1;
		ui_Preferences.save();
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-%23import-magic");
	el.title = "Allows setting up rules for shortening names per-script.";
	ui_Preferences.addCheckbox(out,"Allow undo-ing `#import`",ui_Preferences.current.allowImportUndo,function(z2) {
		ui_Preferences.current.allowImportUndo = z2;
		ui_Preferences.save();
	}).title = "Allows undoing name changes made after changing #import rules." + "\nMakes it easier to break code, so be careful.";
	el = ui_Preferences.addCheckbox(out,"Use `#mfunc` magic",ui_Preferences.current.mfuncMagic,function(z3) {
		ui_Preferences.current.mfuncMagic = z3;
		ui_Preferences.save();
	});
	el.title = "Allows C-style macros with arguments";
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-%23mfunc-magic");
	el = ui_Preferences.addCheckbox(out,"Use coroutine magic",ui_Preferences.current.coroutineMagic,function(z4) {
		ui_Preferences.current.coroutineMagic = z4;
		ui_Preferences.save();
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-coroutine-magic");
	el = ui_Preferences.addCheckbox(out,"Use lambda magic",ui_Preferences.current.lambdaMagic,function(z5) {
		ui_Preferences.current.lambdaMagic = z5;
		ui_Preferences.save();
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/Using-%23lambda-magic");
	el = ui_Preferences.addCheckbox(out,"Use GMHyper magic",ui_Preferences.current.hyperMagic,function(z6) {
		ui_Preferences.current.hyperMagic = z6;
		ui_Preferences.save();
	});
	ui_Preferences.addWiki(el,"https://github.com/GameMakerDiscord/GMEdit/wiki/GMHyper-in-GMEdit");
};
var ui_preferences_PrefMenu = function() { };
$hxClasses["ui.preferences.PrefMenu"] = ui_preferences_PrefMenu;
ui_preferences_PrefMenu.__name__ = "ui.preferences.PrefMenu";
ui_preferences_PrefMenu.build = function(out) {
	ui_preferences_PrefTheme.build(out);
	ui_preferences_PrefMagic.build(out);
	ui_preferences_PrefCode.build(out);
	ui_preferences_PrefLinter.build(out,null);
	ui_preferences_PrefNav.build(out);
	ui_preferences_PrefBackups.build(out);
};
var ui_preferences_PrefNav = function() { };
$hxClasses["ui.preferences.PrefNav"] = ui_preferences_PrefNav;
ui_preferences_PrefNav.__name__ = "ui.preferences.PrefNav";
ui_preferences_PrefNav.build = function(out) {
	out = ui_Preferences.addGroup(out,"Navigation");
	out.id = "pref-navigation";
	ui_Preferences.addFloatInput(out,"Keep file sessions for (days):",ui_Preferences.current.fileSessionTime,function(v) {
		ui_Preferences.current.fileSessionTime = v;
		ui_Preferences.save();
	});
};
var ui_preferences_PrefTheme = function() { };
$hxClasses["ui.preferences.PrefTheme"] = ui_preferences_PrefTheme;
ui_preferences_PrefTheme.__name__ = "ui.preferences.PrefTheme";
ui_preferences_PrefTheme.build = function(out) {
	var themeList = ["default"];
	if(Electron_FS.existsSync == null) {
		themeList.push("dark");
		themeList.push("gms2");
	} else {
		var _g = 0;
		var _g1 = [haxe_io_Path.join([Main.modulePath,"themes"]),electron_FileWrap.userPath + "/themes"];
		while(_g < _g1.length) {
			var dir = _g1[_g];
			++_g;
			if(Electron_FS.existsSync(dir)) {
				var _g2 = 0;
				var _g11 = Electron_FS.readdirSync(dir);
				while(_g2 < _g11.length) {
					var name = _g11[_g2];
					++_g2;
					if(name == "default") {
						continue;
					}
					if(Electron_FS.existsSync(haxe_io_Path.join([dir,name,"config.json"]))) {
						themeList.push(name);
					}
				}
			}
		}
	}
	var el = ui_Preferences.addRadios(out,"Theme",ui_Preferences.current.theme,themeList,function(theme) {
		ui_Preferences.current.theme = theme;
		ui_Theme.set_current(theme);
		ui_Preferences.save();
	});
	el.id = "pref-theme";
	el = el.querySelector("legend");
	el.appendChild(document.createTextNode(" ("));
	el.append(ui_Preferences.createShellAnchor("https://github.com/GameMakerDiscord/GMEdit/wiki/Using-themes","wiki"));
	el.appendChild(document.createTextNode("; "));
	el.append(ui_Preferences.createShellAnchor(electron_FileWrap.userPath + "/themes","manage"));
	el.appendChild(document.createTextNode(")"));
};
var ui_project_ProjectProperties = function() { };
$hxClasses["ui.project.ProjectProperties"] = ui_project_ProjectProperties;
ui_project_ProjectProperties.__name__ = "ui.project.ProjectProperties";
ui_project_ProjectProperties.load = function(project) {
	var def = { };
	if(project.path == "") {
		return def;
	}
	var doSave = false;
	var data;
	try {
		data = project.readJsonFileSync("#config" + "/properties.json");
	} catch( _ ) {
		data = null;
		if(!project.existsSync("#config")) {
			project.mkdirSync("#config");
		}
		doSave = true;
	}
	if(data == null) {
		data = def;
	} else {
		var q = def;
		var fd = null;
		var has = Object.prototype.hasOwnProperty;
		for (fd in q) {
		if(has.call(q,fd)) {
			if(Reflect.field(data,fd) == null) {
				data[fd] = Reflect.field(def,fd);
				doSave = true;
			}
		}
		}
	}
	return data;
};
ui_project_ProjectProperties.save = function(project,data) {
	project.writeTextFileSync("#config" + "/properties.json",tools_NativeString.yyJson(data));
};
ui_project_ProjectProperties.build = function(project,out) {
	var d = project.properties;
	var fs = ui_Preferences.addGroup(out,"Code editor (these take effect for newly opened editors)");
	var el = ui_Preferences.addInput(fs,"Indentation size override",d.indentSize != null ? "" + d.indentSize : "",function(s) {
		d.indentSize = Std.parseInt(s);
		ui_project_ProjectProperties.save(project,d);
	});
	el.title = "Blank for default";
	var indentModes = ["default","tabs","spaces"];
	ui_Preferences.addRadios(fs,"Indentation mode override",indentModes[d.indentWithTabs == null ? 0 : d.indentWithTabs ? 1 : 2],indentModes,function(v) {
		d.indentWithTabs = v == indentModes[0] ? null : v == indentModes[1];
		ui_project_ProjectProperties.save(project,d);
	});
	fs = ui_Preferences.addGroup(out,"Syntax extensions");
	var lambdaModes = ["Default (extension)","Compatible (extension macros)","Scripts (GMS2 only)"];
	var lambdaModes1 = (d.lambdaMode || 0);
	el = ui_Preferences.addRadios(fs,"#lambda mode",lambdaModes[lambdaModes1],lambdaModes,function(s1) {
		d.lambdaMode = lambdaModes.indexOf(s1);
		ui_project_ProjectProperties.save(project,d);
	});
	if(project.version != 2) {
		el.querySelector("label:last-of-type input").disabled = true;
	}
	ui_preferences_PrefLinter.build(out,project);
	plugins_PluginAPI._signal("projectPropertiesBuilt",{ project : project, target : el});
};
ui_project_ProjectProperties.open = function() {
	var kind = file_kind_misc_KProjectProperties.inst;
	var pj = gml_Project.current;
	var _g = 0;
	var _g1 = ui_ChromeTabs.element.querySelectorAll(".chrome-tab");
	while(_g < _g1.length) {
		var tab = _g1[_g];
		++_g;
		if(tab.gmlFile.kind != kind) {
			continue;
		}
		if(tab.gmlFile.editor.project != pj) {
			continue;
		}
		tab.click();
		return;
	}
	kind.create("Project properties",null,pj,null);
};
var ui_treeview_TreeView = function() { };
$hxClasses["ui.treeview.TreeView"] = ui_treeview_TreeView;
ui_treeview_TreeView.__name__ = "ui.treeview.TreeView";
ui_treeview_TreeView.clear = function() {
	ui_treeview_TreeView.element.innerHTML = "";
	var sheet = ui_treeview_TreeView.thumbSheet;
	var i = sheet.cssRules.length;
	while(--i >= 0) sheet.deleteRule(i);
};
ui_treeview_TreeView.find = function(item,query) {
	var qjs = "." + (item ? "item" : "dir");
	if(query.extra != null) {
		qjs += "." + query.extra;
	}
	var value = query.ident;
	if(value != null) {
		qjs += "[" + "data-ident" + "=\"" + value.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]";
	}
	var value1 = query.path;
	if(value1 != null) {
		qjs += "[" + "data-full-path" + "=\"" + StringTools.replace(value1,"\\","/").replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]";
	}
	var value2 = query.kind;
	if(value2 != null) {
		qjs += "[" + "data-kind" + "=\"" + value2.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]";
	}
	var value3 = query.rel;
	if(value3 != null) {
		qjs += "[" + "data-rel-path" + "=\"" + StringTools.replace(value3,"\\","/").replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]";
	}
	return ui_treeview_TreeView.element.querySelector(qjs);
};
ui_treeview_TreeView.addThumbRule = function(itemPath,thumbPath) {
	ui_treeview_TreeView.thumbSheet.insertRule(".treeview .item[" + "data-full-path" + "=\"" + itemPath.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]::before {" + ("background-image: url(\"" + thumbPath.replace(tools_NativeString.escapeProp_1,"\\$1") + "\");") + "}",ui_treeview_TreeView.thumbSheet.cssRules.length);
};
ui_treeview_TreeView.setThumb = function(itemPath,thumbPath,item) {
	if(itemPath == null) {
		if(item != null) {
			itemPath = item.getAttribute("data-full-path");
		} else {
			return;
		}
	} else if(item == null) {
		item = ui_treeview_TreeView.find(true,{ path : itemPath});
	}
	ui_treeview_TreeView.resetThumb(itemPath,item);
	if(thumbPath == null) {
		return;
	}
	var addRule;
	if(item != null) {
		item.setAttribute("data-thumb",thumbPath);
		if(item.scrollHeight == 0) {
			item.setAttribute("data-thumb-delay","");
			addRule = false;
		} else {
			addRule = true;
		}
	} else {
		addRule = true;
	}
	if(addRule) {
		ui_treeview_TreeView.addThumbRule(itemPath,thumbPath);
	}
	ui_treeview_TreeView.thumbMap[itemPath] = thumbPath;
};
ui_treeview_TreeView.setThumbSprite = function(itemPath,spriteName,item) {
	if(itemPath == null) {
		if(item != null) {
			itemPath = item.getAttribute("data-full-path");
		} else {
			return;
		}
	} else if(item == null) {
		item = ui_treeview_TreeView.find(true,{ path : itemPath});
	}
	ui_treeview_TreeView.resetThumb(itemPath,item);
	if(spriteName == null) {
		return;
	}
	var addRule;
	if(item != null) {
		if(item.scrollHeight == 0) {
			item.setAttribute("data-thumb-sprite",spriteName);
			item.setAttribute("data-thumb-delay","");
			addRule = false;
		} else {
			addRule = true;
		}
	} else {
		addRule = true;
	}
	if(addRule) {
		gml_Project.current.getSpriteURLasync(spriteName,function(thumbPath) {
			ui_treeview_TreeView.resetThumb(itemPath,item);
			if(thumbPath == null) {
				return;
			}
			ui_treeview_TreeView.addThumbRule(itemPath,thumbPath);
			ui_treeview_TreeView.thumbMap[itemPath] = thumbPath;
			if(item != null) {
				item.setAttribute("data-thumb",thumbPath);
			}
		});
	}
};
ui_treeview_TreeView.resetThumb = function(itemPath,item) {
	if(itemPath == null) {
		if(item != null) {
			itemPath = item.getAttribute("data-full-path");
		} else {
			return;
		}
	} else if(item == null) {
		item = ui_treeview_TreeView.find(true,{ path : itemPath});
	}
	var prefix = ".treeview .item[" + "data-full-path" + "=\"" + itemPath.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]::before {";
	var sheet = ui_treeview_TreeView.thumbSheet;
	var rules = sheet.cssRules;
	var i = rules.length;
	while(--i >= 0) if(rules[i].cssText.indexOf(prefix) >= 0) {
		sheet.deleteRule(i);
	}
	if(item != null) {
		item.removeAttribute("data-thumb");
		item.removeAttribute("data-thumb-delay");
		item.removeAttribute("data-thumb-sprite");
	}
	var this1 = ui_treeview_TreeView.thumbMap;
	delete this1[itemPath];
};
ui_treeview_TreeView.ensureThumb = function(item) {
	if(!item.hasAttribute("data-thumb-delay")) {
		return;
	}
	item.removeAttribute("data-thumb-delay");
	if(item.hasAttribute("data-thumb-sprite")) {
		var spriteName = item.getAttribute("data-thumb-sprite");
		item.removeAttribute("data-thumb-sprite");
		gml_Project.current.getSpriteURLasync(spriteName,function(thumbPath) {
			if(thumbPath == null) {
				return;
			}
			var itemPath = item.getAttribute("data-full-path");
			ui_treeview_TreeView.addThumbRule(itemPath,thumbPath);
			ui_treeview_TreeView.thumbMap[itemPath] = thumbPath;
			item.setAttribute("data-thumb",thumbPath);
		});
	} else {
		ui_treeview_TreeView.addThumbRule(item.getAttribute("data-full-path"),item.getAttribute("data-thumb"));
	}
};
ui_treeview_TreeView.ensureThumbs = function(el) {
	var _g = 0;
	var _g1 = el.querySelectorAll(".item[" + "data-thumb-delay" + "]");
	while(_g < _g1.length) {
		var item = _g1[_g++];
		if(item.scrollHeight > 0) {
			ui_treeview_TreeView.ensureThumb(item);
		}
	}
};
ui_treeview_TreeView.handleDirClick = function(e) {
	e.preventDefault();
	var el = e.target;
	el = el.parentElement;
	if(e.altKey) {
		ui_treeview_TreeViewMenus.target = el;
		ui_treeview_TreeViewMenus.openCombined();
	} else {
		var cl = el.classList;
		if(!cl.contains("open")) {
			cl.add("open");
			ui_treeview_TreeView.ensureThumbs(el);
		} else {
			cl.remove("open");
		}
	}
};
ui_treeview_TreeView.handleDirCtxMenu = function(e) {
	e.preventDefault();
	ui_treeview_TreeViewMenus.showDirMenu(e.target.parentElement,e);
};
ui_treeview_TreeView.handleItemCtxMenu = function(e) {
	e.preventDefault();
	ui_treeview_TreeViewMenus.showItemMenu(e.target,e);
};
ui_treeview_TreeView.makeDir = function(name) {
	var r = document.createElement("div");
	r.className = "dir";
	var header = document.createElement("div");
	header.className = "header";
	header.title = name;
	r.treeHeader = header;
	r.appendChild(header);
	var span = document.createElement("span");
	span.appendChild(document.createTextNode(name));
	header.appendChild(span);
	var c = document.createElement("div");
	c.className = "items";
	r.treeItems = c;
	r.appendChild(c);
	return r;
};
ui_treeview_TreeView.makeAssetDir = function(name,rel) {
	rel = StringTools.replace(rel,"\\","/");
	var r = ui_treeview_TreeView.makeDir(name);
	var header = r.treeHeader;
	header.addEventListener("click",ui_treeview_TreeView.handleDirClick);
	header.addEventListener("contextmenu",ui_treeview_TreeView.handleDirCtxMenu);
	ui_treeview_TreeViewDnD.bind(header,rel);
	r.setAttribute("data-label",name);
	r.setAttribute("data-rel-path",rel);
	return r;
};
ui_treeview_TreeView.makeItem = function(name) {
	var r = document.createElement("div");
	r.className = "item";
	var span = document.createElement("span");
	span.appendChild(document.createTextNode(name));
	r.appendChild(span);
	r.title = name;
	return r;
};
ui_treeview_TreeView.handleItemClick = function(e,el,nav) {
	if(e != null) {
		e.preventDefault();
		if(el == null) {
			el = e.target;
		}
	} else if(el == null) {
		return null;
	}
	var openAs = el.yyOpenAs;
	if(openAs != null) {
		if(nav == null) {
			nav = { kind : openAs};
		} else {
			nav.kind = openAs;
		}
	}
	return gml_file_GmlFile.open(el.innerText,el.getAttribute("data-full-path"),nav);
};
ui_treeview_TreeView.makeAssetItem = function(name,rel,path,kind) {
	rel = StringTools.replace(rel,"\\","/");
	var r = ui_treeview_TreeView.makeItem(name);
	r.setAttribute("data-full-path",StringTools.replace(path,"\\","/"));
	r.setAttribute("data-ident",name);
	if(kind != null) {
		r.setAttribute("data-kind",kind);
	}
	r.setAttribute("data-rel-path",rel);
	ui_treeview_TreeViewDnD.bind(r,rel);
	var th = ui_treeview_TreeView.thumbMap[path];
	if(th != null) {
		r.setAttribute("data-thumb",th);
	}
	r.addEventListener(ui_Preferences.current.singleClickOpen ? "click" : "dblclick",ui_treeview_TreeView.handleItemClick);
	r.addEventListener("contextmenu",ui_treeview_TreeView.handleItemCtxMenu);
	return r;
};
ui_treeview_TreeView.openProject = function(el) {
	if(!el.classList.contains("item")) {
		el = el.parentElement;
	}
	var path = el.getAttribute("data-full-path");
	if(Electron_FS.existsSync(path)) {
		gml_Project.open(path);
	} else if(gml_Project.current.path == "") {
		if(Electron_Dialog.showMessageBox({ message : "Project is missing. Remove from recent project list?", buttons : ["Yes","No"], cancelId : 1}) == 0) {
			ui_RecentProjects.remove(path);
			el.parentElement.removeChild(el);
		}
	}
};
ui_treeview_TreeView.handleProjectClick = function(e) {
	e.preventDefault();
	ui_treeview_TreeView.openProject(e.target);
};
ui_treeview_TreeView.makeProject = function(name,path) {
	var r = ui_treeview_TreeView.makeItem(name);
	r.setAttribute("data-full-path",StringTools.replace(path,"\\","/"));
	r.setAttribute("data-ident",name);
	r.setAttribute("data-kind","project");
	r.title = path;
	r.addEventListener(ui_Preferences.current.singleClickOpen ? "click" : "dblclick",ui_treeview_TreeView.handleProjectClick);
	r.addEventListener("contextmenu",ui_treeview_TreeView.handleItemCtxMenu);
	return r;
};
ui_treeview_TreeView.saveOpen = function() {
	var r = [];
	var _g = 0;
	var _g1 = ui_treeview_TreeView.element.querySelectorAll("." + "dir" + "." + "open");
	while(_g < _g1.length) r.push(_g1[_g++].getAttribute("data-rel-path"));
	ui_treeview_TreeView.openPaths = r;
};
ui_treeview_TreeView.restoreOpen = function(paths) {
	var paths1 = paths != null ? paths : ui_treeview_TreeView.openPaths;
	var el = ui_treeview_TreeView.element;
	var _g = 0;
	while(_g < paths1.length) {
		var dir = el.querySelector(".dir[" + "data-rel-path" + "=\"" + paths1[_g++].replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]");
		if(dir != null) {
			dir.classList.add("open");
			ui_treeview_TreeView.ensureThumbs(dir);
		}
	}
};
ui_treeview_TreeView.init = function() {
	ui_treeview_TreeView.element = document.querySelector(".treeview");
	if(ui_treeview_TreeView.element == null) {
		ui_treeview_TreeView.element = document.createElement("div");
	}
	ui_treeview_TreeView.thumbStyle = document.querySelector("#tree-thumbs");
	ui_treeview_TreeView.thumbSheet = ui_treeview_TreeView.thumbStyle.sheet;
	AceOOP.implement(ui_treeview_TreeView,ace.require("ace/lib/event_emitter").EventEmitter);
};
ui_treeview_TreeView._signal = function(eventName,e) {
	throw new js__$Boot_HaxeError("EventEmitter is not hooked for TreeView!");
};
var ui_treeview_TreeViewDnD = function() { };
$hxClasses["ui.treeview.TreeViewDnD"] = ui_treeview_TreeViewDnD;
ui_treeview_TreeViewDnD.__name__ = "ui.treeview.TreeViewDnD";
ui_treeview_TreeViewDnD.update = function(el,order) {
	if(ui_treeview_TreeViewDnD.currEl == el && ui_treeview_TreeViewDnD.currOrder == order) {
		return;
	}
	if(ui_treeview_TreeViewDnD.currEl != null) {
		var el1 = ui_treeview_TreeViewDnD.currEl;
		var cl = ui_treeview_TreeViewDnD.currClass;
		window.setTimeout(function() {
			el1.classList.remove(cl);
		},50);
	}
	ui_treeview_TreeViewDnD.currEl = el;
	ui_treeview_TreeViewDnD.currOrder = order;
	var tmp;
	switch(order) {
	case -1:
		tmp = "drop-before";
		break;
	case 1:
		tmp = "drop-after";
		break;
	default:
		tmp = "drop-into";
	}
	ui_treeview_TreeViewDnD.currClass = tmp;
	if(ui_treeview_TreeViewDnD.currEl != null) {
		ui_treeview_TreeViewDnD.currEl.classList.add(ui_treeview_TreeViewDnD.currClass);
	}
};
ui_treeview_TreeViewDnD.prefixOf = function(rel) {
	var mt = ui_treeview_TreeViewDnD.prefixOf_rx.exec(rel);
	if(mt != null) {
		return mt[1];
	} else {
		return "";
	}
};
ui_treeview_TreeViewDnD.hasType = function(e,t) {
	var dtTypes = e.dataTransfer.types;
	if(dtTypes.indexOf) {
		return dtTypes.indexOf(t) >= 0;
	} else {
		return dtTypes.contains(t);
	}
};
ui_treeview_TreeViewDnD.bind = function(el,rel) {
	var dir = el.classList.contains("header");
	var prefix = ui_treeview_TreeViewDnD.prefixOf(rel).toLowerCase();
	var ownType = "text/gmedit-rel-path" + "=" + rel.toLowerCase();
	var ownPrefix = "text/gmedit-rel-prefix" + "=" + prefix;
	var v2 = gml_Project.current.version == 2;
	if(v2 || ui_treeview_TreeViewDnD.rxCanDropTo.test(rel)) {
		var updateAuto = function(e) {
			var y = e.offsetY;
			var h = el.scrollHeight;
			var th = dir ? 0.25 : 0.35;
			if(!ui_treeview_TreeViewDnD.hasType(e,ownPrefix)) {
				ui_treeview_TreeViewDnD.update(null,0);
			} else if(y < h * th) {
				ui_treeview_TreeViewDnD.update(el,-1);
			} else if(y > h * (1 - th)) {
				ui_treeview_TreeViewDnD.update(el,1);
			} else {
				ui_treeview_TreeViewDnD.update(dir && !ui_treeview_TreeViewDnD.hasType(e,ownType) ? el : null,0);
			}
		};
		el.addEventListener("dragover",function(e1) {
			e1.preventDefault();
			updateAuto(e1);
			return;
		});
		el.addEventListener("dragleave",function(e2) {
			ui_treeview_TreeViewDnD.update(null,0);
			return;
		});
		var dropRel = function(dst,rel1,order) {
			var src = ui_treeview_TreeView.find(!rel1.endsWith("/"),{ rel : rel1});
			if(src == null) {
				return;
			}
			if(src.classList.contains("header")) {
				src = src.parentElement;
			}
			var root = ui_treeview_TreeView.element;
			var par = dst;
			while(par != null && par != root) {
				if(par == src) {
					return;
				}
				par = par.parentElement;
			}
			var d = ui_treeview_TreeViewItemMenus.getItemData(dst);
			var d2 = ui_treeview_TreeViewItemMenus.getItemData(src);
			var args = { prefix : d.prefix, plural : d.plural, single : d.single, chain : d.chain, last : d.last, tvDir : order != 0 ? dst.parentElement.parentElement : dst, tvRef : dst, srcChain : d2.chain, srcLast : d2.last, srcDir : src.parentElement.parentElement, srcRef : src, order : order};
			switch(gml_Project.current.version) {
			case 1:
				gmx_GmxManip.move(args);
				break;
			case 2:
				yy_YyManip.move(args);
				break;
			default:
			}
		};
		el.addEventListener("drop",function(e3) {
			updateAuto(e3);
			var dst1 = ui_treeview_TreeViewDnD.currEl;
			if(dst1 == null) {
				return;
			}
			if(dst1.classList.contains("header")) {
				dst1 = dst1.parentElement;
			}
			ui_treeview_TreeViewItemMenus.updatePrefix(dst1);
			var order1 = ui_treeview_TreeViewDnD.currOrder;
			ui_treeview_TreeViewDnD.update(null,0);
			if(order1 > 0 && dst1.classList.contains("dir") && dst1.classList.contains("open")) {
				var dstItems = dst1.treeItems;
				if(dstItems.children.length > 0) {
					dst1 = dstItems.children[0];
					order1 = -1;
				} else {
					order1 = 0;
				}
			}
			if(order1 != 0 && dst1.parentElement == ui_treeview_TreeView.element) {
				return;
			}
			var rel2 = e3.dataTransfer.getData("text/gmedit-rel-path");
			if(rel2 != null) {
				dropRel(dst1,rel2,order1);
				return;
			}
			return;
		});
	}
	if((v2 ? ui_treeview_TreeViewDnD.rxCanDrag2 : ui_treeview_TreeViewDnD.rxCanDrag).test(rel)) {
		el.setAttribute("draggable","true");
		el.addEventListener("dragstart",function(e4) {
			e4.dataTransfer.setData("text/gmedit-rel-path",rel);
			e4.dataTransfer.setData(ownType,"");
			e4.dataTransfer.setData("text/gmedit-rel-prefix",prefix);
			e4.dataTransfer.setData(ownPrefix,"");
			return;
		});
	}
};
var ui_treeview_TreeViewItemMenus = function() { };
$hxClasses["ui.treeview.TreeViewItemMenus"] = ui_treeview_TreeViewItemMenus;
ui_treeview_TreeViewItemMenus.__name__ = "ui.treeview.TreeViewItemMenus";
ui_treeview_TreeViewItemMenus.getItemData = function(el) {
	var par = el.parentElement;
	var root = ui_treeview_TreeView.element;
	var chain = [];
	while(par != null && par != root) {
		var d = par.getAttribute("data-label");
		if(d != null) {
			chain.unshift(d);
		}
		par = par.parentElement;
	}
	var name = el.getAttribute("data-ident");
	if(name == null) {
		name = el.getAttribute("data-label");
	}
	return { chain : chain, last : name, prefix : ui_treeview_TreeViewItemMenus.prefix, plural : ui_treeview_TreeViewItemMenus.prefix.substring(0,ui_treeview_TreeViewItemMenus.prefix.length - 1), single : ui_treeview_TreeViewItemMenus.prefix.substring(0,ui_treeview_TreeViewItemMenus.prefix.length - 2)};
};
ui_treeview_TreeViewItemMenus.updatePrefix = function(par) {
	var root = ui_treeview_TreeView.element;
	ui_treeview_TreeViewItemMenus.prefix = "unknown/";
	while(par != null && par != root) {
		if(par.classList.contains("dir")) {
			ui_treeview_TreeViewItemMenus.prefix = par.getAttribute("data-rel-path");
		}
		par = par.parentElement;
	}
	ui_treeview_TreeViewItemMenus.prefix = ui_treeview_TreeViewItemMenus.prefix.toLowerCase();
};
ui_treeview_TreeViewItemMenus.updateCreateMenu = function(dir) {
	ui_treeview_TreeViewItemMenus.updatePrefix(ui_treeview_TreeViewMenus.target);
	var v = gml_Project.current.version;
	switch(v) {
	case 1:case 2:
		var supported = ui_treeview_TreeViewItemMenus.prefix == "scripts/" ? true : v == 2;
		var _g1 = 0;
		var _g2 = ui_treeview_TreeViewMenus.items.manipOuter;
		while(_g1 < _g2.length) {
			var q = _g2[_g1];
			++_g1;
			q.visible = true;
			q.enabled = supported;
		}
		var nonRoot = ui_treeview_TreeViewMenus.target.getAttribute("data-rel-path").toLowerCase() != ui_treeview_TreeViewItemMenus.prefix;
		var _g3 = 0;
		var _g4 = ui_treeview_TreeViewMenus.items.manipNonRoot;
		while(_g3 < _g4.length) _g4[_g3++].enabled = supported && nonRoot;
		var _g5 = 0;
		var _g6 = ui_treeview_TreeViewMenus.items.manipDirOnly;
		while(_g5 < _g6.length) _g6[_g5++].enabled = supported && dir;
		break;
	default:
		var _g = 0;
		var _g11 = ui_treeview_TreeViewMenus.items.manipOuter;
		while(_g < _g11.length) _g11[_g++].visible = false;
	}
};
ui_treeview_TreeViewItemMenus.createImplTV = function(q) {
	var name = q.name;
	var nrel = q.tvDir.getAttribute("data-rel-path") + name;
	var ntv;
	if(q.mkdir) {
		ntv = ui_treeview_TreeView.makeAssetDir(name,nrel + "/");
		ntv.classList.add("open");
	} else {
		ntv = ui_treeview_TreeView.makeAssetItem(name,nrel,q.pj.fullPath(q.npath),"script");
	}
	var dir = q.tvDir;
	var ref = q.tvRef;
	switch(q.order) {
	case -1:
		dir.treeItems.insertBefore(ntv,ref);
		break;
	case 1:
		var after = ref.nextElementSibling;
		if(after != null) {
			dir.treeItems.insertBefore(ntv,after);
		} else {
			dir.treeItems.appendChild(ntv);
		}
		break;
	default:
		dir.treeItems.appendChild(ntv);
		dir.classList.add("open");
	}
	return ntv;
};
ui_treeview_TreeViewItemMenus.validate = function(s,tvDir,asDir) {
	if(asDir) {
		var _g = 0;
		var _g1 = tvDir.treeItems.children;
		while(_g < _g1.length) if(_g1[_g++].getAttribute("data-label") == s) {
			window.alert("Group already exists!");
			return false;
		}
	} else {
		if(!new RegExp("^[a-zA-Z_]\\w*$").test(s)) {
			window.alert("Name contains illegal characters!");
			return false;
		}
		if(ui_treeview_TreeView.find(true,{ ident : s}) != null) {
			window.alert("Item already exists!");
			return false;
		}
	}
	return true;
};
ui_treeview_TreeViewItemMenus.createImpl = function(z,order) {
	var d = ui_treeview_TreeViewItemMenus.getItemData(ui_treeview_TreeViewMenus.target);
	electron_DialogFallback.showPrompt("Name?","",function(s) {
		if(s == "" || s == null) {
			return;
		}
		var tvDir = order != 0 ? ui_treeview_TreeViewMenus.target.parentElement.parentElement : ui_treeview_TreeViewMenus.target;
		if(!ui_treeview_TreeViewItemMenus.validate(s,tvDir,z)) {
			return;
		}
		var args = { prefix : d.prefix, plural : d.plural, single : d.single, tvDir : tvDir, tvRef : ui_treeview_TreeViewMenus.target, chain : d.chain, last : d.last, name : s, order : order, mkdir : z};
		switch(gml_Project.current.version) {
		case 1:
			gmx_GmxManip.add(args);
			break;
		case 2:
			yy_YyManip.add(args);
			break;
		default:
			window.alert("Can't create an item for this version!");
		}
	});
};
ui_treeview_TreeViewItemMenus.removeImpl = function() {
	var d = ui_treeview_TreeViewItemMenus.getItemData(ui_treeview_TreeViewMenus.target);
	if(!window.confirm("Are you sure you want to delete " + d.last + "?")) {
		return;
	}
	var args = { prefix : d.prefix, plural : d.plural, single : d.single, chain : d.chain, last : d.last, tvDir : ui_treeview_TreeViewMenus.target.parentElement.parentElement, tvRef : ui_treeview_TreeViewMenus.target};
	switch(gml_Project.current.version) {
	case 1:
		gmx_GmxManip.remove(args);
		break;
	case 2:
		yy_YyManip.remove(args);
		break;
	default:
		window.alert("Can't remove an item for this version!");
	}
};
ui_treeview_TreeViewItemMenus.renameImpl = function() {
	var d = ui_treeview_TreeViewItemMenus.getItemData(ui_treeview_TreeViewMenus.target);
	electron_DialogFallback.showPrompt("New name?",d.last,function(s) {
		if(s == d.last || s == "" || s == null) {
			return;
		}
		var dir = ui_treeview_TreeViewMenus.target.classList.contains("dir");
		var tvDir = ui_treeview_TreeViewMenus.target.parentElement.parentElement;
		if(!ui_treeview_TreeViewItemMenus.validate(s,tvDir,dir)) {
			return;
		}
		var args = { prefix : d.prefix, plural : d.plural, single : d.single, chain : d.chain, last : d.last, tvDir : tvDir, tvRef : ui_treeview_TreeViewMenus.target, name : s};
		switch(gml_Project.current.version) {
		case 1:
			gmx_GmxManip.rename(args);
			break;
		case 2:
			yy_YyManip.rename(args);
			break;
		default:
			window.alert("Can't rename an item for this version!");
		}
	});
};
ui_treeview_TreeViewItemMenus.initCreateMenu = function() {
	var createMenu = new Electron_Menu();
	ui_treeview_TreeViewMenus.items.manipNonRoot.push(ui_treeview_TreeViewMenus.add(createMenu,{ label : "Item" + " before", click : function() {
		ui_treeview_TreeViewItemMenus.createImpl(false,-1);
	}}));
	ui_treeview_TreeViewMenus.items.manipDirOnly.push(ui_treeview_TreeViewMenus.add(createMenu,{ label : "Item" + " inside", click : function() {
		ui_treeview_TreeViewItemMenus.createImpl(false,0);
	}}));
	ui_treeview_TreeViewMenus.items.manipNonRoot.push(ui_treeview_TreeViewMenus.add(createMenu,{ label : "Item" + " after", click : function() {
		ui_treeview_TreeViewItemMenus.createImpl(false,1);
	}}));
	createMenu.append(new Electron_MenuItem({ type : "separator"}));
	ui_treeview_TreeViewMenus.items.manipNonRoot.push(ui_treeview_TreeViewMenus.add(createMenu,{ label : "Group" + " before", click : function() {
		ui_treeview_TreeViewItemMenus.createImpl(true,-1);
	}}));
	ui_treeview_TreeViewMenus.items.manipDirOnly.push(ui_treeview_TreeViewMenus.add(createMenu,{ label : "Group" + " inside", click : function() {
		ui_treeview_TreeViewItemMenus.createImpl(true,0);
	}}));
	ui_treeview_TreeViewMenus.items.manipNonRoot.push(ui_treeview_TreeViewMenus.add(createMenu,{ label : "Group" + " after", click : function() {
		ui_treeview_TreeViewItemMenus.createImpl(true,1);
	}}));
	var createItem = new Electron_MenuItem({ label : "Create", type : "submenu", submenu : createMenu});
	var removeItem = new Electron_MenuItem({ label : "Remove", click : ui_treeview_TreeViewItemMenus.removeImpl});
	var renameItem = new Electron_MenuItem({ label : "Rename", click : ui_treeview_TreeViewItemMenus.renameImpl});
	ui_treeview_TreeViewMenus.items.manipCreate = createItem;
	ui_treeview_TreeViewMenus.items.manipOuter = [createItem,removeItem,renameItem];
	ui_treeview_TreeViewMenus.items.manipNonRoot.push(removeItem);
};
ui_treeview_TreeViewItemMenus.update = function(dir) {
	ui_treeview_TreeViewItemMenus.updateCreateMenu(dir);
};
ui_treeview_TreeViewItemMenus.init = function() {
	ui_treeview_TreeViewItemMenus.initCreateMenu();
};
var ui_treeview_TreeViewMenus = function() { };
$hxClasses["ui.treeview.TreeViewMenus"] = ui_treeview_TreeViewMenus;
ui_treeview_TreeViewMenus.__name__ = "ui.treeview.TreeViewMenus";
ui_treeview_TreeViewMenus.expandAll = function() {
	var cl = ui_treeview_TreeViewMenus.target.classList;
	if(!cl.contains("open")) {
		cl.add("open");
	}
	var _g = 0;
	var _g1 = ui_treeview_TreeViewMenus.target.querySelectorAll(".dir");
	while(_g < _g1.length) {
		cl = _g1[_g++].classList;
		if(!cl.contains("open")) {
			cl.add("open");
		}
	}
};
ui_treeview_TreeViewMenus.collapseAll = function() {
	var cl = ui_treeview_TreeViewMenus.target.classList;
	if(cl.contains("open")) {
		cl.remove("open");
	}
	var _g = 0;
	var _g1 = ui_treeview_TreeViewMenus.target.querySelectorAll(".dir");
	while(_g < _g1.length) {
		cl = _g1[_g++].classList;
		if(cl.contains("open")) {
			cl.remove("open");
		}
	}
};
ui_treeview_TreeViewMenus.openAll = function() {
	var found = 0;
	var els = ui_treeview_TreeViewMenus.target.querySelectorAll(".item");
	if(els.length < 50 || Electron_Dialog.showMessageBox({ message : "Are you sure that you want to open " + els.length + " tabs?", buttons : ["Yes","No"], cancelId : 1}) == 0) {
		var _g = 0;
		while(_g < els.length) {
			window.setTimeout((function(el) {
				return function() {
					gml_file_GmlFile.open(el[0].innerText,el[0].getAttribute("data-full-path"));
				};
			})([els[_g++]]),found * 50);
			++found;
		}
	}
};
ui_treeview_TreeViewMenus.openCombined = function() {
	var items = [];
	var mpath = "";
	var _g = 0;
	var _g1 = ui_treeview_TreeViewMenus.target.querySelectorAll(".item[" + "data-kind" + "=\"script\"]");
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		var path = item.getAttribute("data-full-path");
		if(mpath != "") {
			mpath += "|";
		}
		mpath += path;
		items.push({ name : item.getAttribute("data-ident"), path : path});
	}
	if(items.length > 0) {
		gml_file_GmlFile.openTab(new gml_file_GmlFile(ui_treeview_TreeViewMenus.target.querySelector(".header").innerText,mpath,file_kind_gml_KGmlMultifile.inst,items));
	}
};
ui_treeview_TreeViewMenus.openYyShader = function(ext) {
	var name = ui_treeview_TreeViewMenus.target.getAttribute("data-ident") + "." + ext;
	var path = ui_treeview_TreeViewMenus.target.getAttribute("data-full-path");
	path = haxe_io_Path.withoutExtension(path) + "." + ext;
	gml_file_GmlFile.open(name,path);
};
ui_treeview_TreeViewMenus.removeFromRecentProjects = function() {
	ui_RecentProjects.remove(ui_treeview_TreeViewMenus.target.getAttribute("data-full-path"));
	ui_treeview_TreeViewMenus.target.parentElement.removeChild(ui_treeview_TreeViewMenus.target);
};
ui_treeview_TreeViewMenus.changeIcon = function(opt) {
	var pj = gml_Project.current;
	var itemPath = ui_treeview_TreeViewMenus.target.getAttribute("data-full-path");
	var def = pj.path != "" ? pj.dir : haxe_io_Path.directory(itemPath);
	var path;
	if(!opt.reset) {
		var files = Electron_Dialog.showOpenDialog({ title : "Hello", defaultPath : def, filters : [{ name : "Images", extensions : ["png"]},{ name : "All files", extensions : ["*"]}]});
		if(files == null || files[0] == null) {
			return;
		}
		path = files[0];
	} else {
		path = null;
	}
	if(pj.path != "") {
		ui_ProjectStyle.setItemThumb({ thumb : path, ident : ui_treeview_TreeViewMenus.target.getAttribute("data-ident"), kind : ui_treeview_TreeViewMenus.target.getAttribute("data-kind"), rel : ui_treeview_TreeViewMenus.target.getAttribute("data-rel-path"), suffix : opt.open ? ".open" : ""});
	} else {
		var th = itemPath + ".png";
		if(path != null) {
			if(Electron_FS.copyFileSync == null) {
				Electron_FS.writeFileSync(th,Electron_FS.readFileSync(path));
			} else {
				Electron_FS.copyFileSync(path,th);
			}
			ui_treeview_TreeView.setThumb(itemPath,"file:///" + th + "?v=" + new Date().getTime());
		} else {
			if(Electron_FS.existsSync(th)) {
				Electron_FS.unlinkSync(th);
			}
			ui_treeview_TreeView.resetThumb(itemPath);
		}
	}
};
ui_treeview_TreeViewMenus.openHere = function() {
	gml_file_GmlFile.open(ui_treeview_TreeViewMenus.target.title,ui_treeview_TreeViewMenus.target.getAttribute("data-full-path"),{ noExtern : true});
};
ui_treeview_TreeViewMenus.openExternal = function() {
	electron_FileWrap.openExternal(ui_treeview_TreeViewMenus.target.getAttribute("data-full-path"));
};
ui_treeview_TreeViewMenus.openDirectory = function() {
	electron_FileWrap.showItemInFolder(ui_treeview_TreeViewMenus.target.getAttribute("data-full-path"));
};
ui_treeview_TreeViewMenus.openObjectInfo = function() {
	gml_GmlObjectInfo.showFor(ui_treeview_TreeViewMenus.target.getAttribute("data-full-path"),ui_treeview_TreeViewMenus.target.getAttribute("data-ident"));
};
ui_treeview_TreeViewMenus.findReferences = function() {
	ui_GlobalSearch.findReferences(ui_treeview_TreeViewMenus.target.getAttribute("data-ident"));
};
ui_treeview_TreeViewMenus.showAPI = function() {
	gml_GmlExtensionAPI.showFor(ui_treeview_TreeViewMenus.target.getAttribute("data-full-path"),ui_treeview_TreeViewMenus.target.getAttribute("data-ident"));
};
ui_treeview_TreeViewMenus.showDirMenu = function(el,ev) {
	ui_treeview_TreeViewMenus.target = el;
	ui_treeview_TreeViewMenus.items.openAll.enabled = el.querySelector(".item") != null;
	ui_treeview_TreeViewMenus.items.openCombined.enabled = el.querySelector(".item[" + "data-kind" + "=\"script\"]") != null;
	ui_treeview_TreeViewMenus.items.changeOpenIcon.visible = true;
	ui_treeview_TreeViewMenus.items.resetOpenIcon.visible = true;
	ui_treeview_TreeViewMenus.items.openCustomCSS.visible = true;
	var tmp;
	switch(gml_Project.current.version) {
	case 1:case 2:
		tmp = el.getAttribute("data-rel-path").startsWith("Extensions/");
		break;
	default:
		tmp = false;
	}
	ui_treeview_TreeViewMenus.items.showAPI.visible = tmp;
	ui_treeview_TreeViewItemMenus.update(true);
	ui_treeview_TreeView._signal("dirMenu",{ element : el, event : ev});
	electron_MenuFallback.contextEvent = ev;
	ui_treeview_TreeViewMenus.dirMenu.popup(Electron_API != null ? Electron_API.remote.getCurrentWindow() : null,{ async : true});
};
ui_treeview_TreeViewMenus.showItemMenu = function(el,ev) {
	var z;
	ui_treeview_TreeViewMenus.target = el;
	var kind = el.getAttribute("data-kind");
	z = gml_GmlAPI.version == 2 && kind == "shader";
	ui_treeview_TreeViewMenus.items.shaderItems.forEach(function(q) {
		q.visible = z;
	});
	z = kind == "project";
	ui_treeview_TreeViewMenus.items.removeFromRecentProjects.visible = z;
	ui_treeview_TreeViewMenus.items.openCustomCSS.visible = !z;
	ui_treeview_TreeViewMenus.items.changeOpenIcon.visible = false;
	ui_treeview_TreeViewMenus.items.resetOpenIcon.visible = false;
	ui_treeview_TreeViewMenus.items.objectInfo.visible = kind == "object";
	var tmp = new EReg("^\\w+$","g");
	ui_treeview_TreeViewMenus.items.findReferences.enabled = tmp.match(el.getAttribute("data-ident"));
	ui_treeview_TreeViewItemMenus.update(false);
	ui_treeview_TreeView._signal("itemMenu",{ element : el, event : ev});
	electron_MenuFallback.contextEvent = ev;
	ui_treeview_TreeViewMenus.itemMenu.popup(Electron_API != null ? Electron_API.remote.getCurrentWindow() : null,{ async : true});
};
ui_treeview_TreeViewMenus.initIconMenu = function() {
	var iconMenu = new Electron_Menu();
	ui_treeview_TreeViewMenus.add(iconMenu,{ label : "Change icon", click : function() {
		ui_treeview_TreeViewMenus.changeIcon({ reset : false, open : false});
	}});
	ui_treeview_TreeViewMenus.add(iconMenu,{ label : "Reset icon", click : function() {
		ui_treeview_TreeViewMenus.changeIcon({ reset : true, open : false});
	}});
	ui_treeview_TreeViewMenus.items.changeOpenIcon = ui_treeview_TreeViewMenus.add(iconMenu,{ label : "Change \"open\" icon", click : function() {
		ui_treeview_TreeViewMenus.changeIcon({ reset : false, open : true});
	}});
	ui_treeview_TreeViewMenus.items.resetOpenIcon = ui_treeview_TreeViewMenus.add(iconMenu,{ label : "Reset \"open\" icon", click : function() {
		ui_treeview_TreeViewMenus.changeIcon({ reset : true, open : true});
	}});
	ui_treeview_TreeViewMenus.items.openCustomCSS = ui_treeview_TreeViewMenus.add(iconMenu,{ label : "Open custom CSS file", click : function() {
		var path = gml_Project.current.path + ".css";
		if(!Electron_FS.existsSync(path)) {
			Electron_FS.writeFileSync(path,"");
		}
		Electron_IPC.send("shell-open",path);
	}});
	return new Electron_MenuItem({ label : "Custom icon", type : "submenu", submenu : iconMenu});
};
ui_treeview_TreeViewMenus.add = function(m,o) {
	var r = new Electron_MenuItem(o);
	m.append(r);
	return r;
};
ui_treeview_TreeViewMenus.init = function() {
	ui_treeview_TreeViewMenus.items = new ui_treeview__$TreeViewMenus_TreeViewMenuData();
	var iconItem = ui_treeview_TreeViewMenus.initIconMenu();
	ui_treeview_TreeViewItemMenus.init();
	ui_treeview_TreeViewMenus.itemMenu = new Electron_Menu();
	var tmp = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ label : "Open vertex shader", click : function() {
		ui_treeview_TreeViewMenus.openYyShader("vsh");
	}});
	var tmp1 = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ label : "Open fragment shader", click : function() {
		ui_treeview_TreeViewMenus.openYyShader("fsh");
	}});
	ui_treeview_TreeViewMenus.items.shaderItems = [tmp,tmp1];
	ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ label : "Open here", click : ui_treeview_TreeViewMenus.openHere});
	ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ label : "Open externally", click : ui_treeview_TreeViewMenus.openExternal});
	if(Electron_API != null) {
		ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ label : "Show in directory", click : ui_treeview_TreeViewMenus.openDirectory});
	}
	var tmp2 = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ label : "Object information", click : ui_treeview_TreeViewMenus.openObjectInfo});
	ui_treeview_TreeViewMenus.items.objectInfo = tmp2;
	var tmp3 = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ label : "Find references", click : ui_treeview_TreeViewMenus.findReferences});
	ui_treeview_TreeViewMenus.items.findReferences = tmp3;
	var tmp4 = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.itemMenu,{ label : "Remove from Recent projects", click : ui_treeview_TreeViewMenus.removeFromRecentProjects});
	ui_treeview_TreeViewMenus.items.removeFromRecentProjects = tmp4;
	ui_treeview_TreeViewMenus.itemMenu.append(new Electron_MenuItem({ type : "separator"}));
	var _g = 0;
	var _g1 = ui_treeview_TreeViewMenus.items.manipOuter;
	while(_g < _g1.length) ui_treeview_TreeViewMenus.itemMenu.append(_g1[_g++]);
	ui_treeview_TreeViewMenus.itemMenu.append(iconItem);
	ui_treeview_TreeViewMenus.dirMenu = new Electron_Menu();
	ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.dirMenu,{ label : "Expand all", click : ui_treeview_TreeViewMenus.expandAll});
	ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.dirMenu,{ label : "Collapse all", click : ui_treeview_TreeViewMenus.collapseAll});
	var tmp5 = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.dirMenu,{ label : "Show API", click : ui_treeview_TreeViewMenus.showAPI});
	ui_treeview_TreeViewMenus.items.showAPI = tmp5;
	var tmp6 = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.dirMenu,{ label : "Open all", click : ui_treeview_TreeViewMenus.openAll});
	ui_treeview_TreeViewMenus.items.openAll = tmp6;
	var tmp7 = ui_treeview_TreeViewMenus.add(ui_treeview_TreeViewMenus.dirMenu,{ label : "Open combined view", click : ui_treeview_TreeViewMenus.openCombined});
	ui_treeview_TreeViewMenus.items.openCombined = tmp7;
	ui_treeview_TreeViewMenus.dirMenu.append(new Electron_MenuItem({ type : "separator"}));
	var _g2 = 0;
	var _g3 = ui_treeview_TreeViewMenus.items.manipOuter;
	while(_g2 < _g3.length) ui_treeview_TreeViewMenus.dirMenu.append(_g3[_g2++]);
	ui_treeview_TreeViewMenus.dirMenu.append(iconItem);
};
var ui_treeview__$TreeViewMenus_TreeViewMenuData = function() {
	this.manipNonRoot = [];
	this.manipDirOnly = [];
	this.manipOuter = [];
};
$hxClasses["ui.treeview._TreeViewMenus.TreeViewMenuData"] = ui_treeview__$TreeViewMenus_TreeViewMenuData;
ui_treeview__$TreeViewMenus_TreeViewMenuData.__name__ = "ui.treeview._TreeViewMenus.TreeViewMenuData";
ui_treeview__$TreeViewMenus_TreeViewMenuData.prototype = {
	__class__: ui_treeview__$TreeViewMenus_TreeViewMenuData
};
var yy_YyEvent = function() { };
$hxClasses["yy.YyEvent"] = yy_YyEvent;
yy_YyEvent.__name__ = "yy.YyEvent";
yy_YyEvent.toPath = function(type,numb,eid) {
	var ename = parsers_GmlEvent.t2sc[type];
	if(type == 4) {
		return ename + "_" + eid + ".gml";
	}
	return ename + "_" + numb + ".gml";
};
yy_YyEvent.toString = function(type,numb,oid) {
	var name = null;
	if(type == 4) {
		name = gml_Project.current.yyObjectNames[oid];
	}
	return parsers_GmlEvent.toString(type,numb,name);
};
yy_YyEvent.fromString = function(name) {
	var data = parsers_GmlEvent.fromString(name);
	if(data != null && data.name != null) {
		data.obj = gml_Project.current.yyObjectGUIDs[name];
	}
	return data;
};
var yy__$YyGUID_YyGUID_$Impl_$ = {};
$hxClasses["yy._YyGUID.YyGUID_Impl_"] = yy__$YyGUID_YyGUID_$Impl_$;
yy__$YyGUID_YyGUID_$Impl_$.__name__ = "yy._YyGUID.YyGUID_Impl_";
yy__$YyGUID_YyGUID_$Impl_$.create = function() {
	var result = "";
	var _g = 0;
	while(_g < 32) {
		var j = _g++;
		if(j == 8 || j == 12 || j == 16 || j == 20) {
			result += "-";
		}
		result += "0123456789abcdef".charAt(Math.floor(Math.random() * 16));
	}
	return result;
};
yy__$YyGUID_YyGUID_$Impl_$.createNum = function(count,pj) {
	var out = [];
	var taken = new haxe_ds_StringMap();
	if(pj != null) {
		var _g = 0;
		var _g1 = pj.resources;
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			var key = pair.Key;
			if(__map_reserved[key] != null) {
				taken.setReserved(key,true);
			} else {
				taken.h[key] = true;
			}
			var key1 = pair.Value.id;
			if(__map_reserved[key1] != null) {
				taken.setReserved(key1,true);
			} else {
				taken.h[key1] = true;
			}
		}
	}
	var _g2 = 0;
	while(_g2 < count) {
		++_g2;
		var id;
		while(true) {
			id = yy__$YyGUID_YyGUID_$Impl_$.create();
			if(!(__map_reserved[id] != null ? taken.existsReserved(id) : taken.h.hasOwnProperty(id))) {
				break;
			}
		}
		out.push(id);
	}
	return out;
};
var yy_YyLoader = function() { };
$hxClasses["yy.YyLoader"] = yy_YyLoader;
yy_YyLoader.__name__ = "yy.YyLoader";
yy_YyLoader.run = function(project) {
	var yyProject = project.readJsonFileSync(project.name);
	var resources = Object.create(null);
	project.yyResources = resources;
	var resourceGUIDs = Object.create(null);
	project.yyResourceGUIDs = resourceGUIDs;
	project.yySpriteURLs = Object.create(null);
	var views = Object.create(null);
	var roomViews = Object.create(null);
	var rootView = null;
	var rxName = gml_Project.rxName;
	var _g = 0;
	var _g1 = yyProject.resources;
	while(_g < _g1.length) {
		var res = _g1[_g];
		++_g;
		var key = res.Key;
		var val = res.Value;
		val.resourceName = val.resourcePath.replace(rxName.r,"$1");
		if(Object.prototype.hasOwnProperty.call(resources,key)) {
			console.error("Resource ID collision for " + key + "!" + "\nFirst path: " + resources[key].Value.resourcePath + "\nSecond path: " + val.resourcePath + "\nGMS2 will deny to load your project unless you fix this.");
		}
		resources[key] = res;
		if(val.resourceType == "GMFolder") {
			var view = project.readJsonFileSync(val.resourcePath);
			val.resourceName = view.folderName;
			if(view.isDefaultView) {
				rootView = view;
			}
			views[key] = view;
			if(val.resourcePath.endsWith("-room.yy")) {
				var path = val.resourcePath;
				var slash = path.lastIndexOf("\\");
				if(slash < 0) {
					slash = path.indexOf("/");
				}
				roomViews[path.substring(slash + 1,path.length - 8)] = view;
			}
		}
	}
	if(rootView == null) {
		return "Couldn't find a top-level view in project.";
	}
	parsers_GmlSeeker.start();
	gml_GmlAPI.gmlClear();
	gml_GmlAPI.extClear();
	var comp = gml_GmlAPI.gmlComp;
	var objectNames = Object.create(null);
	var objectGUIDs = Object.create(null);
	project.yyObjectNames = objectNames;
	project.yyObjectGUIDs = objectGUIDs;
	project.lambdaMap = Object.create(null);
	var scriptLambdas = project.properties.lambdaMode == 2;
	if(scriptLambdas) {
		parsers_GmlExtLambda.seekData = new parsers_GmlSeekData();
		parsers_GmlExtLambda.seekPath = project.fullPath("#lambdas");
	}
	var lz = ui_Preferences.current.lambdaMagic;
	var loadrec = null;
	loadrec = function(out,view1,path1) {
		var _g2 = 0;
		var _g3 = view1.children;
		while(_g2 < _g3.length) {
			var res1 = [resources[_g3[_g2++]]];
			if(res1[0] == null) {
				continue;
			}
			var val1 = res1[0].Value;
			var name;
			var rel = [];
			var type = val1.resourceType;
			var loadrec_dir = (function(rel1,res2) {
				return function(vdir,name1) {
					if(out == null) {
						loadrec(out,vdir,null);
						return;
					}
					rel1[0] = path1 + name1 + "/";
					if(name1 == "#gmedit-lambda") {
						project.lambdaView = res2[0].Value.resourcePath;
						var _g21 = 0;
						var _g31 = vdir.children;
						while(_g21 < _g31.length) {
							var res11 = resources[_g31[_g21++]];
							if(res11 == null) {
								continue;
							}
							project.lambdaMap[res11.Value.resourceName] = true;
						}
					}
					var dir = ui_treeview_TreeView.makeAssetDir(name1,rel1[0]);
					dir.setAttribute("data-yyid",res2[0].Key);
					var nextOut = dir.treeItems;
					if(path1 == "" && vdir.folderName == "rooms") {
						var ccs = ui_treeview_TreeView.makeAssetItem("roomCreationCodes",project.name,project.path,"roomccs");
						ccs.removeAttribute("data-thumb");
						ccs.yyOpenAs = file_kind_yy_KYyRoomCCs.inst;
						dir.treeItems.appendChild(ccs);
					}
					loadrec(nextOut,vdir,rel1[0]);
					out.appendChild(dir);
				};
			})(rel,res1);
			if(type == "GMFolder") {
				var vdir1 = views[res1[0].Key];
				name = vdir1.folderName;
				if(path1 == "") {
					if(name == "datafiles") {
						name = "Included Files";
					} else {
						name = name.charAt(0).toUpperCase() + name.substring(1);
					}
				}
				loadrec_dir(vdir1,name);
			} else {
				name = val1.resourceName;
				rel[0] = path1 + name;
				var full = project.fullPath(val1.resourcePath);
				resourceGUIDs[name] = res1[0].Key;
				switch(type) {
				case "GMFont":case "GMObject":case "GMPath":case "GMRoom":case "GMScript":case "GMShader":case "GMSound":case "GMSprite":case "GMTileSet":case "GMTimeline":
					var atype = type.substring(2).toLowerCase();
					gml_GmlAPI.gmlKind[name] = "asset." + atype;
					var next = { name : name, value : name, score : 0, meta : atype, doc : null};
					comp.push(next);
					gml_GmlAPI.gmlAssetComp[name] = next;
					break;
				}
				if(out == null) {
					continue;
				}
				switch(type) {
				case "GMExtension":
					var ext = electron_FileWrap.readJsonFileSync(full);
					var extDir = haxe_io_Path.directory(full);
					var extRel = path1 + ext.name + "/";
					var extEl = ui_treeview_TreeView.makeAssetDir(ext.name,extRel);
					extEl.setAttribute("data-full-path",full);
					extEl.setAttribute("data-ident",ext.name);
					extEl.setAttribute("data-yyid",res1[0].Key);
					var lm = lz && ext.name.toLowerCase() == "gmedit_lambda" ? project.lambdaMap : null;
					if(lm != null) {
						project.lambdaExt = full;
					}
					var _g22 = 0;
					var _g32 = ext.files;
					while(_g22 < _g32.length) {
						var file1 = _g32[_g22];
						++_g22;
						var fileName = file1.filename;
						var isGmlFile = haxe_io_Path.extension(fileName).toLowerCase() == "gml";
						var filePath = haxe_io_Path.join([extDir,fileName]);
						var fileItem = ui_treeview_TreeView.makeAssetItem(fileName,extRel + fileName,filePath,"extfile");
						extEl.treeItems.appendChild(fileItem);
						if(isGmlFile) {
							if(lm != null) {
								project.lambdaGml = filePath;
								parsers_GmlExtLambda.readDefs(filePath);
							} else {
								parsers_GmlSeeker.run(filePath,"",file_kind_gml_KGmlExtension.inst);
							}
							fileItem.yyOpenAs = file_kind_gml_KGmlExtension.inst;
						}
						if(lm != null) {
							var _g23 = 0;
							var _g33 = file1.functions;
							while(_g23 < _g33.length) lm[_g33[_g23++].name.replace(parsers_GmlExtLambda.rxlcPrefix,"__lf_")] = true;
						} else {
							var _g24 = 0;
							var _g34 = file1.functions;
							while(_g24 < _g34.length) {
								var func = _g34[_g24];
								++_g24;
								var name2 = func.name;
								var help = func.help;
								gml_GmlAPI.extKind[name2] = "extfunction";
								gml_GmlAPI.extArgc[name2] = func.argCount < 0 ? func.argCount : func.args.length;
								if(help != null && help != "" && !func.hidden) {
									gml_GmlAPI.extCompAdd({ name : name2, value : name2, score : 0, meta : "function", doc : help});
									gml_GmlAPI.extDoc[name2] = gml_GmlFuncDoc.parse(help);
									if(isGmlFile) {
										gml_GmlAPI.gmlLookupText += name2 + "\n";
									}
								}
								if(isGmlFile) {
									gml_GmlAPI.gmlLookup[name2] = { path : filePath, sub : name2, row : 0};
								}
							}
						}
						var _g25 = 0;
						var _g35 = file1.constants;
						while(_g25 < _g35.length) {
							var mcr = _g35[_g25];
							++_g25;
							var name3 = mcr.constantName;
							gml_GmlAPI.extKind[name3] = "extmacro";
							if(!mcr.hidden) {
								gml_GmlAPI.extCompAdd({ name : name3, value : name3, score : 0, meta : "macro", doc : mcr.value});
							}
						}
					}
					if(ext.name == "GMLive" && Object.prototype.hasOwnProperty.call(gml_GmlAPI.extKind,"live_init")) {
						project.hasGMLive = true;
					}
					out.appendChild(extEl);
					continue;
				case "GMIncludedFile":
					var loadrec1 = haxe_io_Path.withoutExtension(rel[0]);
					rel[0] = loadrec1;
					full = full.replace(yy_YyLoader.rxDatafiles,"datafiles$1");
					full = haxe_io_Path.withoutExtension(full);
					name = haxe_io_Path.withoutDirectory(full);
					break;
				case "GMNotes":
					var loadrec2 = haxe_io_Path.withoutExtension(rel[0]);
					rel[0] = loadrec2;
					var nx = haxe_io_Path.withoutExtension(full);
					full = nx + ".txt";
					name = haxe_io_Path.withoutDirectory(nx);
					break;
				case "GMObject":
					gml_GmlAPI.gmlLookupText += name + "\n";
					objectNames[res1[0].Key] = name;
					objectGUIDs[name] = res1[0].Key;
					parsers_GmlSeeker.run(full,null,file_kind_yy_KYyEvents.inst);
					break;
				case "GMScript":
					gml_GmlAPI.gmlLookupText += name + "\n";
					full = haxe_io_Path.withoutExtension(full) + ".gml";
					if(!scriptLambdas || !name.startsWith("__lf_")) {
						parsers_GmlSeeker.run(full,name,file_kind_gml_KGmlScript.inst);
					}
					break;
				case "GMShader":
					gml_GmlAPI.gmlLookupText += name + "\n";
					break;
				case "GMTimeline":
					gml_GmlAPI.gmlLookupText += name + "\n";
					break;
				default:
				}
				var item = ui_treeview_TreeView.makeAssetItem(name,rel[0],full,type.substring(2).toLowerCase());
				item.setAttribute("data-yyid",res1[0].Key);
				if(type == "GMSprite") {
					ui_treeview_TreeView.setThumbSprite(full,name,item);
				}
				out.appendChild(item);
				if(type == "GMRoom") {
					var vdir2 = roomViews[res1[0].Key];
					if(vdir2 != null) {
						loadrec_dir(vdir2,name);
					}
				}
			}
		}
	};
	ui_treeview_TreeView.saveOpen();
	ui_treeview_TreeView.clear();
	loadrec(ui_treeview_TreeView.element,rootView,"");
	ui_treeview_TreeView.restoreOpen();
	return null;
};
var yy_YyManip = function() { };
$hxClasses["yy.YyManip"] = yy_YyManip;
yy_YyManip.__name__ = "yy.YyManip";
yy_YyManip.resolve = function(q) {
	var pj = gml_Project.current;
	var py = q.py;
	if(py == null) {
		py = pj.readJsonFileSync(pj.name);
	}
	var vp = "views/" + q.tvDir.getAttribute("data-yyid") + ".yy";
	var vy = pj.readJsonFileSync(vp);
	var ri = q.tvRef.getAttribute("data-yyid");
	q.pj = pj;
	return { pj : pj, py : py, vp : vp, vy : vy, ri : ri};
};
yy_YyManip.add = function(args) {
	var d = yy_YyManip.resolve(args);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var py = d.py;
	var kind = args.single;
	var nix = yy__$YyGUID_YyGUID_$Impl_$.createNum(2,d.py);
	var ni = nix[0];
	var nType = "GM" + tools_NativeString.capitalize(args.single);
	var nBase;
	var nPath;
	var nDir;
	if(args.mkdir) {
		nBase = "views\\" + ni;
		nPath = nBase + ".yy";
		nDir = "views";
	} else {
		var nTop = args.plural;
		pj.mkdirSync(nTop);
		nDir = nTop + "\\" + args.name;
		pj.mkdirSync(nDir);
		nBase = nDir + "\\" + args.name;
		nPath = nBase + ".yy";
		args.npath = kind == "script" ? nBase + ".gml" : nPath;
	}
	var nJson;
	args.outGUID = ni;
	if(args.mkdir) {
		var nView = { id : ni, modelName : "GMFolder", mvc : "1.1", name : ni, children : [], filterType : nType, folderName : args.name, isDefaultView : false, localisedFolderName : ""};
		nType = "GMFolder";
		nJson = nView;
	} else {
		switch(kind) {
		case "object":
			nJson = { id : ni, modelName : "GMObject", mvc : "1.0", name : args.name, eventList : [], maskSpriteId : "00000000-0000-0000-0000-000000000000", overriddenProperties : null, parentObjectId : "00000000-0000-0000-0000-000000000000", persistent : false, physicsAngularDamping : 0.1, physicsDensity : 0.5, physicsFriction : 0.2, physicsGroup : 0, physicsKinematic : false, physicsLinearDamping : 0.1, physicsObject : false, physicsRestitution : 0.1, physicsSensor : false, physicsShape : 1, physicsShapePoints : null, physicsStartAwake : true, properties : [], solid : false, spriteId : "00000000-0000-0000-0000-000000000000", visible : true};
			break;
		case "script":
			var nyScr = { id : ni, modelName : "GMScript", mvc : "1.0", name : args.name, IsCompatibility : false, IsDnD : false};
			pj.writeTextFileSync(nBase + ".gml","");
			nJson = nyScr;
			break;
		case "shader":
			var nyShd = { id : ni, modelName : "GMShader", mvc : "1.0", name : args.name, type : 1};
			pj.writeTextFileSync(nBase + ".vsh",["attribute vec3 in_Position;                  // (x,y,z)","//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.","attribute vec4 in_Colour;                    // (r,g,b,a)","attribute vec2 in_TextureCoord;              // (u,v)","","varying vec2 v_vTexcoord;","varying vec4 v_vColour;","","void main()","{","    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);","    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;","    ","    v_vColour = in_Colour;","    v_vTexcoord = in_TextureCoord;","}"].join("\r\n"));
			pj.writeTextFileSync(nBase + ".fsh",["varying vec2 v_vTexcoord;","varying vec4 v_vColour;","","void main()","{","    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );","}"].join("\r\n"));
			nJson = nyShd;
			break;
		default:
			window.alert("No idea how to create type=`" + args.single + "`, sorry");
			return false;
		}
	}
	var res = { Key : ni, Value : { id : nix[1], resourcePath : StringTools.replace(nPath,"/","\\"), resourceType : nType}};
	if(args.pyBefore != null) {
		var i = py.resources.indexOf(args.pyBefore);
		if(i < 0) {
			i = 0;
		}
		py.resources.splice(i,0,res);
	} else {
		py.resources.push(res);
	}
	var ord = args.order;
	switch(ord) {
	case -1:case 1:
		var i1 = d.vy.children.indexOf(d.ri);
		if(i1 >= 0) {
			d.vy.children.splice(ord > 0 ? i1 + 1 : i1,0,ni);
		} else if(ord < 0) {
			d.vy.children.unshift(ni);
		} else {
			d.vy.children.push(ni);
		}
		break;
	default:
		d.vy.children.push(ni);
	}
	pj.writeTextFileSync(d.vp,tools_NativeString.yyJson(d.vy));
	var nJsonStr = tools_NativeString.yyJson(nJson);
	pj.writeTextFileSync(nPath,nJsonStr);
	if(args.py == null) {
		pj.writeTextFileSync(pj.name,tools_NativeString.yyJson(py));
	}
	ui_treeview_TreeViewItemMenus.createImplTV(args).setAttribute("data-yyid",ni);
	if(!args.mkdir) {
		switch(kind) {
		case "object":case "script":case "shader":
			var name = args.name;
			gml_GmlAPI.gmlComp.push({ name : name, value : name, score : 0, meta : kind, doc : null});
			gml_GmlAPI.gmlKind[args.name] = "asset." + kind;
			gml_GmlAPI.gmlLookup[args.name] = { path : args.npath, row : 0};
			gml_GmlAPI.gmlLookupText += args.name + "\n";
			var fk;
			switch(kind) {
			case "object":
				fk = file_kind_yy_KYyEvents.inst;
				break;
			case "shader":
				fk = null;
				break;
			default:
				fk = file_kind_gml_KGmlScript.inst;
			}
			if(fk != null) {
				parsers_GmlSeeker.runSync(pj.fullPath(args.npath),kind == "script" ? "" : nJsonStr,args.name,fk);
			}
			if(args.openFile != false) {
				gml_file_GmlFile.open(args.name,pj.fullPath(args.npath));
			}
			break;
		default:
			d.pj.reload();
		}
	}
	return true;
};
yy_YyManip.remove = function(q) {
	var d = yy_YyManip.resolve(q);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var res = d.py.resources;
	var removeDirRec = null;
	removeDirRec = function(path) {
		if(!pj.existsSync(path)) {
			return;
		}
		var _g1 = 0;
		var _g2 = pj.readdirSync(path);
		while(_g1 < _g2.length) {
			var pair = _g2[_g1];
			++_g1;
			if(pair.isDirectory) {
				removeDirRec(pair.relPath);
			} else {
				pj.unlinkSync(pair.relPath);
			}
		}
		pj.rmdirSync(path);
	};
	var removeItemRec = null;
	removeItemRec = function(id) {
		var path1 = null;
		var type = null;
		var _g11 = 0;
		var _g21 = res.length;
		while(_g11 < _g21) {
			var i = _g11++;
			var pair1 = res[i];
			if(pair1.Key == id) {
				res.splice(i,1);
				path1 = pair1.Value.resourcePath;
				type = pair1.Value.resourceType;
				break;
			}
		}
		if(path1 == null) {
			return true;
		}
		switch(type) {
		case "GMFolder":
			try {
				var _g3 = 0;
				var _g4 = pj.readJsonFileSync(path1).children;
				while(_g3 < _g4.length) removeItemRec(_g4[_g3++]);
				try {
					pj.unlinkSync(path1);
				} catch( _ ) {
				}
			} catch( x ) {
				console.log(((x) instanceof js__$Boot_HaxeError) ? x.val : x);
			}
			break;
		case "GMObject":case "GMScript":case "GMShader":case "GMSprite":
			var removeItemRec1 = haxe_io_Path.directory(path1);
			removeDirRec(removeItemRec1);
			break;
		default:
			window.alert("No idea how to remove type `" + type + "`, sorry");
			return false;
		}
		return true;
	};
	removeItemRec(d.ri);
	var pj1 = pj.name;
	var tmp = tools_NativeString.yyJson(d.py);
	pj.writeTextFileSync(pj1,tmp);
	if(HxOverrides.remove(d.vy.children,d.ri)) {
		var d1 = d.vp;
		var tmp1 = tools_NativeString.yyJson(d.vy);
		pj.writeTextFileSync(d1,tmp1);
	}
	pj.reload();
	return true;
};
yy_YyManip.rename = function(q) {
	var d = yy_YyManip.resolve(q);
	if(d == null) {
		return false;
	}
	var pair = null;
	var _g = 0;
	var _g1 = d.py.resources;
	while(_g < _g1.length) {
		var pair1 = _g1[_g];
		++_g;
		if(pair1.Key == d.ri) {
			pair = pair1.Value;
			break;
		}
	}
	if(pair == null) {
		return false;
	}
	var pj = d.pj;
	switch(pair.resourceType) {
	case "GMFolder":
		var vj = pj.readJsonFileSync(pair.resourcePath);
		vj.folderName = q.name;
		pj.writeTextFileSync(pair.resourcePath,tools_NativeString.yyJson(vj));
		break;
	case "GMObject":case "GMScript":case "GMShader":case "GMSprite":
		var path = pair.resourcePath;
		var dir = haxe_io_Path.directory(path);
		var ndir = haxe_io_Path.join([haxe_io_Path.directory(dir),q.name]);
		var rel = haxe_io_Path.withoutDirectory(path);
		pj.renameSync(dir,ndir);
		var curr_yy = haxe_io_Path.join([ndir,rel]);
		var next_yy = haxe_io_Path.join([ndir,q.name + ".yy"]);
		pair.resourcePath = next_yy;
		pj.renameSync(curr_yy,next_yy);
		var next_res = pj.readJsonFileSync(next_yy);
		next_res.name = q.name;
		pj.writeTextFileSync(next_yy,tools_NativeString.yyJson(next_res));
		var samename;
		switch(pair.resourceType) {
		case "GMScript":
			samename = ["gml"];
			break;
		case "GMShader":
			samename = ["fsh","vsh"];
			break;
		default:
			samename = null;
		}
		if(samename != null) {
			var _g3 = 0;
			while(_g3 < samename.length) {
				var sfx = "." + samename[_g3++];
				pj.renameSync(haxe_io_Path.withoutExtension(curr_yy) + sfx,haxe_io_Path.join([ndir,q.name + sfx]));
			}
		}
		break;
	default:
		window.alert("No idea how to rename type=" + pair.resourceType + ", sorry");
		return false;
	}
	pj.writeTextFileSync(pj.name,tools_NativeString.yyJson(d.py));
	pj.reload();
	return true;
};
yy_YyManip.move = function(q) {
	var d = yy_YyManip.resolve(q);
	if(d == null) {
		return false;
	}
	var pj = d.pj;
	var vy = d.vy;
	var sp = "views/" + q.srcDir.getAttribute("data-yyid") + ".yy";
	var sy = d.vp != sp ? pj.readJsonFileSync(sp) : vy;
	var si = q.srcRef.getAttribute("data-yyid");
	HxOverrides.remove(sy.children,si);
	switch(q.order) {
	case -1:
		var i = vy.children.indexOf(d.ri);
		if(i >= 0) {
			vy.children.splice(i,0,si);
		} else {
			vy.children.unshift(si);
		}
		break;
	case 1:
		var i1 = vy.children.indexOf(d.ri);
		if(i1 >= 0) {
			vy.children.splice(i1 + 1,0,si);
		} else {
			vy.children.push(si);
		}
		break;
	default:
		vy.children.push(si);
	}
	pj.writeTextFileSync(d.vp,tools_NativeString.yyJson(vy));
	if(vy != sy) {
		pj.writeTextFileSync(sp,tools_NativeString.yyJson(sy));
	}
	yy_YyManip.moveTV(q);
	return true;
};
yy_YyManip.moveTV = function(q) {
	q.srcRef.parentElement.removeChild(q.srcRef);
	switch(q.order) {
	case -1:
		tools_HtmlTools.insertBeforeSelf(q.tvRef,q.srcRef);
		break;
	case 1:
		tools_HtmlTools.insertAfterSelf(q.tvRef,q.srcRef);
		break;
	default:
		q.tvDir.treeItems.appendChild(q.srcRef);
	}
};
var yy__$YyObject_YyObject_$Impl_$ = {};
$hxClasses["yy._YyObject.YyObject_Impl_"] = yy__$YyObject_YyObject_$Impl_$;
yy__$YyObject_YyObject_$Impl_$.__name__ = "yy._YyObject.YyObject_Impl_";
yy__$YyObject_YyObject_$Impl_$.getCode = function(this1,objPath,extras) {
	var dir = haxe_io_Path.directory(objPath);
	var out = yy_YyObjectProperties.get(this1);
	if(ui_Preferences.current.eventOrder == 1) {
		var evOrder = Object.create(null);
		var evCount = 0;
		var _g = 0;
		var _g1 = this1.eventList;
		while(_g < _g1.length) evOrder[_g1[_g++].id] = evCount++;
		this1.eventList.sort(function(a,b) {
			var at = a.eventtype;
			var bt = b.eventtype;
			if(at != bt) {
				return at - bt;
			}
			if(at == 4) {
				return evOrder[a.id] - evOrder[b.id];
			} else {
				return a.enumb - b.enumb;
			}
		});
	}
	var _g2 = 0;
	var _g11 = this1.eventList;
	while(_g2 < _g11.length) {
		var ev = _g11[_g2];
		++_g2;
		var type = ev.eventtype;
		var numb = ev.enumb;
		var name = yy_YyEvent.toString(type,numb,ev.collisionObjectId);
		var full = haxe_io_Path.join([dir,yy_YyEvent.toPath(type,numb,ev.id)]);
		if(extras != null) {
			extras.push(new gml_file_GmlFileExtra(full));
		}
		var code;
		try {
			code = electron_FileWrap.readTextFileSync(full);
		} catch( x ) {
			console.warn("Missing event file: " + full);
			code = "";
		}
		if(out != "") {
			out += "\n\n";
		}
		var pair = parsers_GmlHeader.parse(code,2);
		out += "#event " + name;
		if(pair.name != null) {
			out += pair.name;
		}
		out += "\n" + pair.code;
	}
	return out;
};
yy__$YyObject_YyObject_$Impl_$.setCode = function(this1,objPath,gmlCode) {
	var dir = haxe_io_Path.directory(objPath);
	var sorted = ui_Preferences.current.eventOrder == 1;
	var eventData = parsers_GmlEvent.parse(gmlCode,2);
	if(eventData == null) {
		yy__$YyObject_YyObject_$Impl_$.errorText = parsers_GmlEvent.parseError;
		return false;
	}
	var errors = "";
	var i = 0;
	while(i < eventData.length) {
		var item = eventData[i];
		var idat = item.data;
		var tmp;
		if(idat.type != -1) {
			tmp = true;
		} else if(idat.numb != 1) {
			tmp = true;
		} else {
			var err = yy_YyObjectProperties.set(this1,item.code.join("\n"));
			if(err != null) {
				errors += err;
			}
			tmp = false;
		}
		if(tmp) {
			++i;
		} else {
			eventData.splice(i,1);
		}
	}
	var _g = 0;
	while(_g < eventData.length) {
		var idat1 = eventData[_g++].data;
		if(idat1.type == 4) {
			var obj = gml_Project.current.yyObjectGUIDs[idat1.name];
			if(obj == null) {
				errors += "Couldn't find object " + idat1.name + " for collision event.\n";
			} else {
				idat1.obj = obj;
			}
		} else {
			idat1.obj = "00000000-0000-0000-0000-000000000000";
		}
	}
	if(errors != "") {
		yy__$YyObject_YyObject_$Impl_$.errorText = errors;
		return false;
	}
	var oldList = this1.eventList;
	var oldMap = Object.create(null);
	var oldNames = [];
	var _g1 = 0;
	while(_g1 < oldList.length) {
		var ev = oldList[_g1];
		++_g1;
		var oldName = yy_YyEvent.toString(ev.eventtype,ev.enumb,ev.collisionObjectId);
		oldNames.push(oldName);
		oldMap[oldName] = ev;
	}
	var newList = [];
	var newMap = Object.create(null);
	var newNames = [];
	var _g2 = 0;
	while(_g2 < eventData.length) {
		var item1 = eventData[_g2];
		++_g2;
		var idat2 = item1.data;
		var name = yy_YyEvent.toString(idat2.type,idat2.numb,idat2.obj);
		newNames.push(name);
		newMap[name] = item1.code;
	}
	var _g3 = 0;
	var _g4 = oldList.length;
	while(_g3 < _g4) {
		var i1 = _g3++;
		if(Object.prototype.hasOwnProperty.call(newMap,oldNames[i1])) {
			if(sorted) {
				newList.push({ event : oldList[i1], code : newMap[oldNames[i1]].join("\r\n")});
			}
		} else {
			var ev1 = oldList[i1];
			var full = haxe_io_Path.join([dir,yy_YyEvent.toPath(ev1.eventtype,ev1.enumb,ev1.id)]);
			if(electron_FileWrap.existsSync(full)) {
				electron_FileWrap.unlinkSync(full);
			}
		}
	}
	var _g5 = 0;
	var _g6 = eventData.length;
	while(_g5 < _g6) {
		var i2 = _g5++;
		var name1 = newNames[i2];
		if(sorted && Object.prototype.hasOwnProperty.call(oldMap,name1)) {
			continue;
		}
		var item2 = eventData[i2];
		var idat3 = item2.data;
		var ev2 = sorted ? null : oldMap[name1];
		if(ev2 == null) {
			ev2 = { id : yy__$YyGUID_YyGUID_$Impl_$.create(), modelName : "GMEvent", mvc : "1.0", IsDnD : false, collisionObjectId : idat3.obj, eventtype : idat3.type, enumb : idat3.numb != null ? idat3.numb : 0, m_owner : this1.id};
		}
		newList.push({ event : ev2, code : item2.code.join("\r\n")});
	}
	this1.eventList = [];
	var _g7 = 0;
	while(_g7 < newList.length) {
		var item3 = newList[_g7];
		++_g7;
		var ev3 = item3.event;
		electron_FileWrap.writeTextFileSync(haxe_io_Path.join([dir,yy_YyEvent.toPath(ev3.eventtype,ev3.enumb,ev3.id)]),item3.code);
		this1.eventList.push(ev3);
	}
	return true;
};
yy__$YyObject_YyObject_$Impl_$.getParentJson = function(this1) {
	var parentName = gml_Project.current.yyObjectNames[this1.parentObjectId];
	if(parentName == null) {
		return null;
	}
	var el = ui_treeview_TreeView.element.querySelector(".item[" + "data-ident" + "=\"" + parentName.replace(tools_NativeString.escapeProp_1,"\\$1") + "\"]");
	if(el == null) {
		return null;
	}
	var path = el.getAttribute("data-full-path");
	if(!electron_FileWrap.existsSync(path)) {
		return null;
	}
	var json = electron_FileWrap.readJsonFileSync(path);
	json.path = path;
	return json;
};
yy__$YyObject_YyObject_$Impl_$.openEventInherited = function(full,edef) {
	var edata = yy_YyEvent.fromString(edef);
	if(edata == null) {
		return null;
	}
	var etype = edata.type;
	var enumb = edata.numb;
	var eobj = edata.obj;
	if(eobj == null) {
		eobj = "00000000-0000-0000-0000-000000000000";
	}
	var obj = electron_FileWrap.readJsonFileSync(full);
	var parentId = obj.parentObjectId;
	var tries = 1024;
	while(parentId != "00000000-0000-0000-0000-000000000000" && --tries >= 0) {
		obj = yy__$YyObject_YyObject_$Impl_$.getParentJson(obj);
		if(obj == null) {
			return null;
		}
		var _g = 0;
		var _g1 = obj.eventList;
		while(_g < _g1.length) {
			var event = _g1[_g];
			++_g;
			if(event.eventtype == etype && event.enumb == enumb && event.collisionObjectId == eobj) {
				return gml_file_GmlFile.open(obj.name,obj.path,{ def : edef});
			}
		}
		parentId = obj.parentObjectId;
	}
	return null;
};
yy__$YyObject_YyObject_$Impl_$.getInfo = function(this1,info) {
	var objName = this1.name;
	if(info == null) {
		info = new gml_GmlObjectInfo();
		info.objectName = objName;
		if(this1.spriteId != "00000000-0000-0000-0000-000000000000") {
			var res = gml_Project.current.yyResources[this1.spriteId];
			if(res != null) {
				info.spriteName = res.Value.resourceName;
			} else {
				info.spriteName = this1.spriteId;
			}
		} else {
			info.spriteName = "<undefined>";
		}
		info.visible = this1.visible;
		info.solid = this1.solid;
		info.persistent = this1.persistent;
	}
	var _g = 0;
	var _g1 = this1.eventList;
	while(_g < _g1.length) {
		var event = _g1[_g];
		++_g;
		var eid = yy_YyEvent.toString(event.eventtype,event.enumb,event.collisionObjectId);
		var elist = info.eventMap[eid];
		if(elist == null) {
			elist = [];
			info.eventList.push(eid);
			info.eventMap[eid] = elist;
		}
		elist.unshift(objName + "(" + eid + ")");
	}
	var parent = yy__$YyObject_YyObject_$Impl_$.getParentJson(this1);
	if(parent != null) {
		info.parents.unshift(parent.name);
		yy__$YyObject_YyObject_$Impl_$.getInfo(parent,info);
	}
	return info;
};
var yy_YyObjectPropertiesAssetFlag = function(f,s) {
	this.flag = f;
	this.name = s;
};
$hxClasses["yy.YyObjectPropertiesAssetFlag"] = yy_YyObjectPropertiesAssetFlag;
yy_YyObjectPropertiesAssetFlag.__name__ = "yy.YyObjectPropertiesAssetFlag";
yy_YyObjectPropertiesAssetFlag.prototype = {
	__class__: yy_YyObjectPropertiesAssetFlag
};
var yy_YyObjectProperties = function() { };
$hxClasses["yy.YyObjectProperties"] = yy_YyObjectProperties;
yy_YyObjectProperties.__name__ = "yy.YyObjectProperties";
yy_YyObjectProperties.get = function(o) {
	var out = "#event " + "properties" + " (no comments/etc. here are saved)";
	var addID = function(key,val) {
		out += "\n" + key + " = ";
		if(val != "00000000-0000-0000-0000-000000000000") {
			var res = gml_Project.current.yyResources[val];
			if(res != null) {
				out += res.Value.resourceName + ";";
			} else {
				out += "\"" + val + "\"; // amiss";
			}
		} else {
			out += "-1;";
		}
	};
	addID("parent_index",o.parentObjectId);
	if(o.spriteId != "00000000-0000-0000-0000-000000000000") {
		addID("sprite_index",o.spriteId);
	}
	if(o.maskSpriteId != "00000000-0000-0000-0000-000000000000") {
		addID("mask_index",o.maskSpriteId);
	}
	if(!o.visible) {
		out += "\n" + "visible" + " = " + Std.string(o.visible) + ";";
	}
	if(o.solid) {
		out += "\n" + "solid" + " = " + Std.string(o.solid) + ";";
	}
	if(o.persistent) {
		out += "\n" + "persistent" + " = " + Std.string(o.persistent) + ";";
	}
	out += "\n" + "uses_physics" + " = " + Std.string(o.physicsObject) + ";";
	if(o.physicsObject) {
		out += "\n" + "physics_density" + " = " + Std.string(o.physicsDensity) + ";";
		out += "\n" + "physics_restitution" + " = " + Std.string(o.physicsRestitution) + ";";
		out += "\n" + "physics_collision_group" + " = " + Std.string(o.physicsGroup) + ";";
		out += "\n" + "physics_linear_damping" + " = " + Std.string(o.physicsLinearDamping) + ";";
		out += "\n" + "physics_angular_damping" + " = " + Std.string(o.physicsAngularDamping) + ";";
		out += "\n" + "physics_sensor" + " = " + Std.string(o.physicsSensor) + ";";
		out += "\n" + "physics_start_awake" + " = " + Std.string(o.physicsStartAwake) + ";";
		out += "\n" + "physics_kinematic" + " = " + Std.string(o.physicsKinematic) + ";";
		out += "\n" + "physics_shape" + " = " + Std.string(o.physicsShape) + ";";
		var pts = [];
		if(o.physicsShapePoints != null) {
			var _g = 0;
			var _g1 = o.physicsShapePoints;
			while(_g < _g1.length) {
				var pt = _g1[_g];
				++_g;
				pts.push(pt.x + "," + pt.y);
			}
		}
		out += "\n" + "physics_shape_data" + " = " + Std.string("\"" + pts.join(";") + "\"") + ";";
	}
	if(o.properties != null) {
		var _g2 = 0;
		var _g11 = o.properties;
		while(_g2 < _g11.length) {
			var prop = _g11[_g2];
			++_g2;
			out += "\n" + prop.varName + ":";
			var printExpr = function(x) {
				if(yy_YyObjectProperties.rxLString.test(x)) {
					return x;
				} else if(yy_YyObjectProperties.rxJSONish.test(x)) {
					try {
						JSON.parse(x);
						return x;
					} catch( _ ) {
					}
				}
				var q = new parsers_GmlReader(x,2);
				q.skipVarExpr(2,-1);
				if(q.get_eof()) {
					return "(" + x + ")";
				} else {
					return "#" + JSON.stringify(x);
				}
			};
			switch(prop.varType) {
			case 0:case 1:
				out += prop.varType == 1 ? "int" : "real";
				if(prop.rangeEnabled) {
					out += "<" + prop.rangeMin + ", " + prop.rangeMax + ">";
				}
				out += " = " + prop.value;
				break;
			case 2:
				out += "string = " + JSON.stringify(prop.value);
				break;
			case 3:
				out += "bool = " + (prop.value == "True" ? "true" : "false");
				break;
			case 4:
				out += "expr = " + printExpr(prop.value);
				break;
			case 5:
				var flags = prop.resourceFilter;
				out += "asset";
				if(flags != 1023) {
					out += "<";
					var count = 0;
					var _g3 = 0;
					var _g12 = yy_YyObjectProperties.assetTypes;
					while(_g3 < _g12.length) {
						var pair = _g12[_g3];
						++_g3;
						if((flags & pair.flag) != 0) {
							flags &= ~pair.flag;
							if(count++ > 0) {
								out += ", ";
							}
							out += pair.name;
						}
					}
					if(flags != 0 || count == 0) {
						if(count++ > 0) {
							out += ", ";
						}
						out += flags;
					}
					out += ">";
				}
				out += " = " + prop.value;
				break;
			case 6:
				out += "list<";
				var sep = false;
				var _g4 = 0;
				var _g13 = prop.listItems;
				while(_g4 < _g13.length) {
					var item = _g13[_g4++];
					if(sep) {
						out += ", ";
					} else {
						sep = true;
					}
					out += printExpr(item);
				}
				out += "> = ";
				if(prop.multiselect) {
					out += "[";
					var q1 = new parsers_GmlReader(prop.value);
					var sep1 = false;
					while(q1.get_loop()) {
						var start = q1.pos;
						while(true) {
							q1.skipVarExpr(2,44);
							if(q1.get_loop()) {
								if(q1.source.charCodeAt(q1.pos) == 44) {
									break;
								} else {
									q1.pos += 1;
								}
							}
							if(!q1.get_loop()) {
								break;
							}
						}
						var expr = q1.source.substring(start,q1.pos);
						if(q1.get_loop() && q1.source.charCodeAt(q1.pos) == 44) {
							q1.pos += 1;
							if(q1.source.charCodeAt(q1.pos) == 32) {
								q1.pos += 1;
							}
						}
						if(sep1) {
							out += ", ";
						} else {
							sep1 = true;
						}
						out += printExpr(expr);
					}
					out += "]";
				} else {
					out += printExpr(prop.value);
				}
				break;
			case 7:
				out += "color = \"" + prop.value + "\"";
				break;
			default:
				var json = JSON.stringify(prop);
				if(json.includes("'")) {
					out += "unknown = " + JSON.stringify(json);
				} else {
					out += "unknown = @'" + json + "'";
				}
			}
			out += "; // " + prop.id;
		}
	}
	return out;
};
yy_YyObjectProperties.set = function(o,code) {
	var id = function(v,t) {
		var id1;
		var res;
		switch(v._hx_index) {
		case 0:
			if(v.f < 0) {
				return "00000000-0000-0000-0000-000000000000";
			} else {
				throw new js__$Boot_HaxeError("Can't assign numeric IDs aside of -1");
			}
			break;
		case 1:
			var _g2 = v.s;
			if(yy__$YyGUID_YyGUID_$Impl_$.test.test(_g2)) {
				id1 = _g2;
				res = gml_Project.current.yyResources[id1];
				if(res != null && res.Value.resourceType != t) {
					throw new js__$Boot_HaxeError("Wrong resource type - expected " + t + ", got " + res.Value.resourceType);
				}
				return id1;
			} else {
				throw new js__$Boot_HaxeError("Expected a GUID");
			}
			break;
		case 3:
			var _g = v.s;
			if(_g == "noone") {
				return "00000000-0000-0000-0000-000000000000";
			} else {
				id1 = gml_Project.current.yyResourceGUIDs[_g];
				if(id1 == null) {
					throw new js__$Boot_HaxeError("Could not find " + _g + " in the project");
				}
				res = gml_Project.current.yyResources[id1];
				if(res != null && res.Value.resourceType != t) {
					throw new js__$Boot_HaxeError("Wrong resource type - expected " + t + ", got " + res.Value.resourceType);
				}
				return id1;
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Expected an identifier, got " + $hxEnums[v.__enum__].__constructs__[v._hx_index]);
		}
	};
	var bool = function(v1) {
		switch(v1._hx_index) {
		case 0:
			switch(v1.f) {
			case 0:
				return false;
			case 1:
				return true;
			default:
				throw new js__$Boot_HaxeError("Expected a bool, got " + Std.string(v1));
			}
			break;
		case 3:
			switch(v1.s) {
			case "false":
				return false;
			case "true":
				return true;
			default:
				throw new js__$Boot_HaxeError("Expected a bool, got " + Std.string(v1));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Expected a bool, got " + Std.string(v1));
		}
	};
	var int = function(v2) {
		if(v2._hx_index == 0) {
			var _g1 = v2.f;
			if(_g1 % 1 != 0) {
				throw new js__$Boot_HaxeError("Expected an int, got " + Std.string(v2));
			}
			return _g1 | 0;
		} else {
			throw new js__$Boot_HaxeError("Expected an int, got " + Std.string(v2));
		}
	};
	var real = function(v3) {
		if(v3._hx_index == 0) {
			return v3.f;
		} else {
			throw new js__$Boot_HaxeError("Expected a number, got " + Std.string(v3));
		}
	};
	var string = function(v4) {
		if(v4._hx_index == 1) {
			return v4.s;
		} else {
			throw new js__$Boot_HaxeError("Expected a string, got " + Std.string(v4));
		}
	};
	var expr = function(v5) {
		switch(v5._hx_index) {
		case 0:
			return JSON.stringify(v5.f);
		case 1:
			return JSON.stringify(v5.s);
		case 2:
			return v5.s;
		case 3:
			return v5.s;
		default:
			throw new js__$Boot_HaxeError("Expected an expression, got " + Std.string(v5));
		}
	};
	var props = [];
	var error = parsers_GmlObjectProperties.parse(code,2,function(key,val) {
		try {
			switch(key) {
			case "mask_index":
				o.maskSpriteId = id(val,"GMSprite");
				break;
			case "parent_index":
				o.parentObjectId = id(val,"GMObject");
				break;
			case "persistent":
				o.persistent = bool(val);
				break;
			case "physics_angular_damping":
				o.physicsAngularDamping = real(val);
				break;
			case "physics_collision_group":
				o.physicsGroup = int(val);
				break;
			case "physics_density":
				o.physicsDensity = real(val);
				break;
			case "physics_kinematic":
				o.physicsKinematic = bool(val);
				break;
			case "physics_linear_damping":
				o.physicsLinearDamping = real(val);
				break;
			case "physics_restitution":
				o.physicsRestitution = real(val);
				break;
			case "physics_sensor":
				o.physicsSensor = bool(val);
				break;
			case "physics_shape":
				o.physicsShape = int(val);
				break;
			case "physics_shape_data":
				var sv;
				if(val._hx_index == 1) {
					sv = val.s;
				} else {
					throw new js__$Boot_HaxeError("Expected a data string");
				}
				var pts = sv.split(";");
				var orig = o.physicsShapePoints;
				var next = [];
				var proto = orig[0];
				var _g11 = 0;
				var _g21 = pts.length;
				while(_g11 < _g21) {
					var i = _g11++;
					var ptPair = pts[i].split(",");
					if(ptPair.length != 2) {
						throw new js__$Boot_HaxeError("Expected two coordinates for point " + i);
					}
					var ptX = parseFloat(ptPair[0]);
					if(isNaN(ptX)) {
						throw new js__$Boot_HaxeError("X coordinate for point " + i + " is not a valid number (" + ptPair[0] + ").");
					}
					var ptY = parseFloat(ptPair[1]);
					if(isNaN(ptY)) {
						throw new js__$Boot_HaxeError("Y coordinate for point " + i + " is not a valid number (" + ptPair[1] + ").");
					}
					var pt = orig[i];
					if(pt == null) {
						if(proto != null) {
							pt = Reflect.copy(proto);
							pt.id = yy__$YyGUID_YyGUID_$Impl_$.create();
							pt.x = ptX;
							pt.y = ptY;
						} else {
							pt = { id : yy__$YyGUID_YyGUID_$Impl_$.create(), modelName : "GMPoint", mvc : "1.0", x : ptX, y : ptY};
						}
					} else {
						pt.x = ptX;
						pt.y = ptY;
					}
					next.push(pt);
				}
				o.physicsShapePoints = next;
				break;
			case "physics_start_awake":
				o.physicsStartAwake = bool(val);
				break;
			case "solid":
				o.solid = bool(val);
				break;
			case "sprite_index":
				o.spriteId = id(val,"GMSprite");
				break;
			case "uses_physics":
				o.physicsObject = bool(val);
				break;
			case "visible":
				o.visible = bool(val);
				break;
			default:
				throw new js__$Boot_HaxeError("" + key + " is not a known property");
			}
			return null;
		} catch( x ) {
			return Std.string(((x) instanceof js__$Boot_HaxeError) ? x.val : x);
		}
	},function(name,type,guid,params,value) {
		try {
			if(guid == null) {
				var _g3 = 0;
				var _g12 = o.properties;
				while(_g3 < _g12.length) {
					var prop = _g12[_g3];
					++_g3;
					if(prop.varName == name) {
						guid = prop.id;
						break;
					}
				}
				if(guid == null) {
					guid = yy__$YyGUID_YyGUID_$Impl_$.create();
				}
			}
			switch(type) {
			case "asset":
				var flags = 0;
				if(params != null) {
					var _g4 = 0;
					while(_g4 < params.length) {
						var param = params[_g4];
						++_g4;
						switch(param._hx_index) {
						case 0:
							flags |= param.f | 0;
							break;
						case 3:
							var _g5 = param.s;
							var flag = yy_YyObjectProperties.assetTypeMap[_g5];
							if(flag == null) {
								throw new js__$Boot_HaxeError("" + _g5 + " is not a known asset type");
							}
							flags |= flag;
							break;
						default:
							throw new js__$Boot_HaxeError("Expected an asset type, got " + Std.string(param));
						}
					}
				} else {
					flags = 1023;
				}
				var asset;
				switch(value._hx_index) {
				case 0:
					asset = JSON.stringify(value.f);
					break;
				case 3:
					asset = value.s;
					break;
				default:
					throw new js__$Boot_HaxeError("Expected an asset, got " + Std.string(value));
				}
				props.push({ id : guid, modelName : "GMObjectProperty", mvc : "1.0", listItems : null, multiselect : false, rangeEnabled : false, rangeMax : 10, rangeMin : 0, resourceFilter : flags, value : asset, varName : name, varType : 5});
				break;
			case "bool":
				if(params != null) {
					throw new js__$Boot_HaxeError("String has no params");
				}
				var propProc = bool(value) ? "True" : "False";
				props.push({ id : guid, modelName : "GMObjectProperty", mvc : "1.0", listItems : null, multiselect : false, rangeEnabled : false, rangeMax : 10, rangeMin : 0, resourceFilter : 1023, value : propProc, varName : name, varType : 3});
				break;
			case "color":
				if(params != null) {
					throw new js__$Boot_HaxeError("String has no params");
				}
				var propProc1 = string(value);
				props.push({ id : guid, modelName : "GMObjectProperty", mvc : "1.0", listItems : null, multiselect : false, rangeEnabled : false, rangeMax : 10, rangeMin : 0, resourceFilter : 1023, value : propProc1, varName : name, varType : 7});
				break;
			case "expr":case "string":
				if(params != null) {
					throw new js__$Boot_HaxeError(type + " has no params");
				}
				var asExpr = type == "expr";
				var propProc2 = asExpr ? expr(value) : string(value);
				props.push({ id : guid, modelName : "GMObjectProperty", mvc : "1.0", listItems : null, multiselect : false, rangeEnabled : false, rangeMax : 10, rangeMin : 0, resourceFilter : 1023, value : propProc2, varName : name, varType : asExpr ? 4 : 2});
				break;
			case "list":
				if(params == null) {
					throw new js__$Boot_HaxeError("List requires option parameters");
				}
				var items = [];
				var _g6 = 0;
				while(_g6 < params.length) items.push(expr(params[_g6++]));
				var multi = false;
				var out = "";
				if(value._hx_index == 4) {
					var _g13 = value.a;
					multi = true;
					var sep = false;
					var _g14 = 0;
					while(_g14 < _g13.length) {
						var v6 = _g13[_g14++];
						if(sep) {
							out += ", ";
						} else {
							sep = true;
						}
						out += expr(v6);
					}
				} else {
					out = expr(value);
				}
				props.push({ id : guid, modelName : "GMObjectProperty", mvc : "1.0", listItems : items, multiselect : multi, rangeEnabled : false, rangeMax : 10, rangeMin : 0, resourceFilter : 1023, value : out, varName : name, varType : 6});
				break;
			case "int":case "real":
				var asInt = type == "int";
				var rangeEnabled = false;
				var rangeMin = 0.;
				var rangeMax = 10.;
				if(params != null) {
					if(params.length != 2) {
						throw new js__$Boot_HaxeError("Expected <min, max>");
					}
					rangeMin = asInt ? int(params[0]) : real(params[0]);
					rangeMax = asInt ? int(params[1]) : real(params[1]);
					rangeEnabled = true;
				}
				var propProc3 = JSON.stringify(asInt ? int(value) : real(value));
				props.push({ id : guid, modelName : "GMObjectProperty", mvc : "1.0", listItems : null, multiselect : false, rangeEnabled : rangeEnabled, rangeMax : rangeMax, rangeMin : rangeMin, resourceFilter : 1023, value : propProc3, varName : name, varType : asInt ? 1 : 0});
				break;
			case "unknown":
				if(value._hx_index == 1) {
					var propProc4 = JSON.parse(value.s);
					props.push(propProc4);
				} else {
					throw new js__$Boot_HaxeError("Expected a JSON string, got " + Std.string(value));
				}
				break;
			default:
				throw new js__$Boot_HaxeError("" + type + " is not a known type");
			}
			return null;
		} catch( x1 ) {
			return Std.string(((x1) instanceof js__$Boot_HaxeError) ? x1.val : x1);
		}
	});
	o.properties = props.length > 0 ? props : null;
	return error;
};
var yy_YyRooms = function() { };
$hxClasses["yy.YyRooms"] = yy_YyRooms;
yy_YyRooms.__name__ = "yy.YyRooms";
yy_YyRooms.getCCs = function(pjPath,pjd,extraFiles) {
	var pjDir = haxe_io_Path.directory(pjPath);
	var out = "";
	var _g = 0;
	var _g1 = pjd.resources;
	while(_g < _g1.length) {
		var res = _g1[_g++].Value;
		if(res.resourceType != "GMRoom") {
			continue;
		}
		try {
			var roomFull = tools_PathTools.ptJoin(pjDir,res.resourcePath);
			var roomCCrel = electron_FileWrap.readJsonFileSync(roomFull).creationCodeFile;
			if(roomCCrel == "") {
				continue;
			}
			var roomCCfull = haxe_io_Path.directory(roomFull);
			var roomCCfull1 = tools_PathTools.ptJoin(roomCCfull,roomCCrel);
			var roomName = haxe_io_Path.withoutExtension(haxe_io_Path.withoutDirectory(roomFull));
			if(out != "") {
				out += "\n\n";
			}
			out += "#target " + roomName + "\n" + electron_FileWrap.readTextFileSync(roomCCfull1);
			extraFiles.push(new gml_file_GmlFileExtra(roomCCfull1));
		} catch( _ ) {
		}
	}
	return out;
};
yy_YyRooms.parse = function(code) {
	var map = Object.create(null);
	var pairs = [];
	var q = new parsers_GmlReader(code,2);
	var start = 0;
	var name = null;
	var code1 = null;
	var flush = function(p) {
		code1 = q.source.substring(start,p).trimRight();
		if(name == null) {
			if(code1 != "") {
				yy_YyRooms.errorText = "There's code prior to first room creation code!\n" + code1;
				return true;
			}
		} else {
			if(Object.prototype.hasOwnProperty.call(map,name)) {
				yy_YyRooms.errorText = "Room creation code for " + name + " is defined twice!";
				return true;
			}
			map[name] = code1;
			pairs.push({ name : name, code : code1});
		}
		return false;
	};
	while(q.get_loop()) {
		var p1 = q.pos;
		var c = q.source.charCodeAt(q.pos++);
		switch(c) {
		case 35:
			var tmp;
			if((p1 == 0 || q.source.charCodeAt(p1 - 1) == 10) && HxOverrides.substr(q.source,p1 + 1,6) == "target") {
				var this1 = q.source.charCodeAt(p1 + 7);
				tmp = this1 == 32 || this1 == 9;
			} else {
				tmp = false;
			}
			if(tmp) {
				q.pos += 6;
				q.skipSpaces0();
				var nameStart = q.pos;
				q.skipIdent1();
				if(q.pos == nameStart) {
					continue;
				}
				if(flush(p1)) {
					return null;
				}
				name = q.source.substring(nameStart,q.pos);
				q.skipSpaces0();
				q.skipLineEnd();
				start = q.pos;
			}
			break;
		case 47:
			switch(q.source.charCodeAt(q.pos)) {
			case 42:
				q.pos += 1;
				q.skipComment();
				break;
			case 47:
				q.skipLine();
				break;
			default:
			}
			break;
		case 34:case 39:case 64:case 96:
			q.skipStringAuto(c,2);
			break;
		}
	}
	if(flush(q.pos)) {
		return null;
	}
	return { map : map, pairs : pairs};
};
yy_YyRooms.setCCs = function(pjPath,code,extraFiles) {
	var pjDir = haxe_io_Path.directory(pjPath);
	electron_FileWrap.readJsonFileSync(pjPath);
	var data = yy_YyRooms.parse(code);
	if(data == null) {
		return false;
	}
	var xi = extraFiles.length;
	var xmap = Object.create(null);
	while(--xi >= 0) {
		var xf = extraFiles[xi];
		var xrel = haxe_io_Path.withoutDirectory(xf.path);
		var dir = haxe_io_Path.directory(xf.path);
		var name = haxe_io_Path.withoutDirectory(dir);
		xmap[name] = true;
		if(Object.prototype.hasOwnProperty.call(data.map,name)) {
			continue;
		}
		try {
			var rmFull = tools_PathTools.ptJoin(dir,name + ".yy");
			var rmTxt = electron_FileWrap.readTextFileSync(rmFull);
			var what = new RegExp("(\"creationCodeFile\":\\s*\")" + xrel.replace(tools_NativeString.escapeRx_1,"\\$1") + "\"","g");
			rmTxt = rmTxt.replace(what,"$1\"");
			electron_FileWrap.writeTextFileSync(rmFull,rmTxt);
			electron_FileWrap.unlinkSync(xf.path);
		} catch( x ) {
			console.error("Error removing creation code for " + name + ":",((x) instanceof js__$Boot_HaxeError) ? x.val : x);
		}
		extraFiles.splice(xi,1);
	}
	var _g = 0;
	var _g1 = data.pairs;
	while(_g < _g1.length) {
		var pair = _g1[_g];
		++_g;
		var name1 = pair.name;
		var code1 = pair.code;
		var full = tools_PathTools.ptJoin(pjDir,"rooms",name1,"RoomCreationCode.gml");
		if(!Object.prototype.hasOwnProperty.call(xmap,name1)) {
			var rmFull1 = tools_PathTools.ptJoin(pjDir,"rooms",name1,name1 + ".yy");
			if(!electron_FileWrap.existsSync(rmFull1)) {
				yy_YyRooms.errorText = "Room " + name1 + " doesn't exist!";
				return false;
			}
			try {
				var rmTxt1 = electron_FileWrap.readTextFileSync(rmFull1);
				var what1 = /("creationCodeFile":\\s*")[^"]*"/g;
				rmTxt1 = rmTxt1.replace(what1,"$1RoomCreationCode.gml");
				electron_FileWrap.writeTextFileSync(rmFull1,rmTxt1);
			} catch( x1 ) {
				yy_YyRooms.errorText = "Error adding creation code for " + name1 + ":\n" + Std.string(((x1) instanceof js__$Boot_HaxeError) ? x1.val : x1);
				return false;
			}
			extraFiles.push(new gml_file_GmlFileExtra(full));
		}
		try {
			electron_FileWrap.writeTextFileSync(full,code1);
		} catch( x2 ) {
			yy_YyRooms.errorText = "Error saving code for " + name1 + ":\n" + Std.string(((x2) instanceof js__$Boot_HaxeError) ? x2.val : x2);
			return false;
		}
	}
	return true;
};
var yy_YySearcher = function() { };
$hxClasses["yy.YySearcher"] = yy_YySearcher;
yy_YySearcher.__name__ = "yy.YySearcher";
yy_YySearcher.run = function(pj,fn,done,opt) {
	var yyProject = pj.readJsonFileSync(pj.name);
	var rxName = gml_Project.rxName;
	var filesLeft = 1;
	var addError = function(s) {
		if(opt.errors != null) {
			opt.errors += "\n" + s;
		} else {
			opt.errors = s;
		}
	};
	var _g = 0;
	var _g1 = yyProject.resources;
	while(_g < _g1.length) {
		var res = _g1[_g++].Value;
		var resName = [];
		var resFull = [];
		switch(res.resourceType) {
		case "GMExtension":
			if(opt.checkExtensions) {
				var tmp = res.resourcePath.replace(rxName.r,"$1");
				resName[0] = tmp;
				if(opt.expandLambdas && resName[0] == "gmedit_lambda") {
					continue;
				}
				resFull[0] = res.resourcePath;
				filesLeft += 1;
				var resFull1 = resFull[0];
				var tmp1 = (function(resFull2) {
					return function(err,ext) {
						if(err != null) {
							if((filesLeft -= 1) <= 0) {
								done();
							}
							return;
						}
						var ext1 = electron_FileWrap.readJsonFileSync(resFull2[0]);
						var extDir = haxe_io_Path.directory(resFull2[0]);
						var _g2 = 0;
						var _g11 = ext1.files;
						while(_g2 < _g11.length) {
							var fileName = [_g11[_g2++].filename];
							if(haxe_io_Path.extension(fileName[0]).toLowerCase() != "gml") {
								continue;
							}
							var filePath = [haxe_io_Path.join([extDir,fileName[0]])];
							filesLeft += 1;
							var filePath1 = filePath[0];
							var tmp2 = (function(filePath2,fileName1) {
								return function(err1,code) {
									if(err1 != null) {
										if((filesLeft -= 1) <= 0) {
											done();
										}
										return;
									}
									var gml1 = fn(fileName1[0],filePath2[0],code);
									if(gml1 != null && gml1 != code) {
										electron_FileWrap.writeTextFileSync(filePath2[0],gml1);
									}
									if((filesLeft -= 1) <= 0) {
										done();
									}
								};
							})(filePath,fileName);
							pj.readTextFile(filePath1,tmp2);
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(resFull);
				pj.readJsonFile(resFull1,tmp1);
			}
			break;
		case "GMObject":
			if(opt.checkObjects) {
				var tmp3 = res.resourcePath.replace(rxName.r,"$1");
				resName[0] = tmp3;
				resFull[0] = res.resourcePath;
				filesLeft += 1;
				var resFull3 = resFull[0];
				var tmp4 = (function(resFull4,resName1) {
					return function(error,data) {
						if(error == null) {
							try {
								haxe_io_Path.directory(resFull4[0]);
								var obj = JSON.parse(data);
								var code1 = yy__$YyObject_YyObject_$Impl_$.getCode(obj,resFull4[0]);
								var gml11 = fn(resName1[0],resFull4[0],code1);
								if(gml11 != null && gml11 != code1) {
									if(!yy__$YyObject_YyObject_$Impl_$.setCode(obj,resFull4[0],gml11)) {
										addError("Failed to modify " + resName1[0] + ":\n" + yy__$YyObject_YyObject_$Impl_$.errorText);
									}
								}
							} catch( _ ) {
							}
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(resFull,resName);
				pj.readTextFile(resFull3,tmp4);
			}
			break;
		case "GMRoom":
			if(opt.checkRooms) {
				var tmp5 = "roomCreationCodes(" + res.resourcePath.replace(rxName.r,"$1") + ")";
				resName[0] = tmp5;
				var tmp6 = haxe_io_Path.directory(res.resourcePath) + "\\RoomCreationCode.gml";
				resFull[0] = tmp6;
				filesLeft += 1;
				var resFull5 = resFull[0];
				var tmp7 = (function(resFull6,resName2) {
					return function(error1,code2) {
						if(error1 == null) {
							var gml12 = fn(resName2[0],resFull6[0],code2);
							if(gml12 != null && gml12 != code2) {
								electron_FileWrap.writeTextFileSync(resFull6[0],gml12);
							}
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(resFull,resName);
				pj.readTextFile(resFull5,tmp7);
			}
			break;
		case "GMScript":
			if(opt.checkScripts) {
				var tmp8 = res.resourcePath.replace(rxName.r,"$1");
				resName[0] = tmp8;
				var tmp9 = haxe_io_Path.withoutExtension(res.resourcePath) + ".gml";
				resFull[0] = tmp9;
				filesLeft += 1;
				var resFull7 = resFull[0];
				var tmp10 = (function(resFull8,resName3) {
					return function(error2,code3) {
						if(error2 == null) {
							var gml13 = fn(resName3[0],resFull8[0],code3);
							if(gml13 != null && gml13 != code3) {
								electron_FileWrap.writeTextFileSync(resFull8[0],gml13);
							}
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(resFull,resName);
				pj.readTextFile(resFull7,tmp10);
			}
			break;
		case "GMShader":
			if(opt.checkShaders) {
				var tmp11 = res.resourcePath.replace(rxName.r,"$1");
				resName[0] = tmp11;
				var tmp12 = haxe_io_Path.withoutExtension(res.resourcePath);
				resFull[0] = tmp12;
				filesLeft += 2;
				var tmp13 = resFull[0] + "." + "fsh";
				var tmp14 = (function(resFull9,resName4) {
					return function(error3,code4) {
						if(error3 == null) {
							var gml14 = fn(resName4[0] + ("(" + "fragment" + ")"),resFull9[0],code4);
							if(gml14 != null && gml14 != code4) {
								electron_FileWrap.writeTextFileSync(resFull9[0],gml14);
							}
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(resFull,resName);
				pj.readTextFile(tmp13,tmp14);
				var tmp15 = resFull[0] + "." + "vsh";
				var tmp16 = (function(resFull10,resName5) {
					return function(error4,code5) {
						if(error4 == null) {
							var gml15 = fn(resName5[0] + ("(" + "vertex" + ")"),resFull10[0],code5);
							if(gml15 != null && gml15 != code5) {
								electron_FileWrap.writeTextFileSync(resFull10[0],gml15);
							}
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(resFull,resName);
				pj.readTextFile(tmp15,tmp16);
			}
			break;
		case "GMTimeline":
			if(opt.checkObjects) {
				var tmp17 = res.resourcePath.replace(rxName.r,"$1");
				resName[0] = tmp17;
				resFull[0] = res.resourcePath;
				filesLeft += 1;
				var resFull11 = resFull[0];
				var tmp18 = (function(resFull12,resName6) {
					return function(error5,data1) {
						if(error5 == null) {
							try {
								haxe_io_Path.directory(resFull12[0]);
								var tl = JSON.parse(data1);
								var code6 = yy__$YyTimeline_YyTimeline_$Impl_$.getCode(tl,resFull12[0]);
								var gml16 = fn(resName6[0],resFull12[0],code6);
								if(gml16 != null && gml16 != code6) {
									if(!yy__$YyTimeline_YyTimeline_$Impl_$.setCode(tl,resFull12[0],gml16)) {
										addError("Failed to modify " + resName6[0] + ":\n" + yy__$YyObject_YyObject_$Impl_$.errorText);
									}
								}
							} catch( _1 ) {
							}
						}
						if((filesLeft -= 1) <= 0) {
							done();
						}
					};
				})(resFull,resName);
				pj.readTextFile(resFull11,tmp18);
			}
			break;
		}
	}
	if((filesLeft -= 1) <= 0) {
		done();
	}
};
var yy__$YyTimeline_YyTimeline_$Impl_$ = {};
$hxClasses["yy._YyTimeline.YyTimeline_Impl_"] = yy__$YyTimeline_YyTimeline_$Impl_$;
yy__$YyTimeline_YyTimeline_$Impl_$.__name__ = "yy._YyTimeline.YyTimeline_Impl_";
yy__$YyTimeline_YyTimeline_$Impl_$.getMomentPath = function(time) {
	return "moment_" + time + ".gml";
};
yy__$YyTimeline_YyTimeline_$Impl_$.getCode = function(this1,objPath,extras) {
	var dir = haxe_io_Path.directory(objPath);
	var out = "";
	var _g = 0;
	var _g1 = this1.momentList;
	while(_g < _g1.length) {
		var time = _g1[_g++].moment;
		var full = haxe_io_Path.join([dir,yy__$YyTimeline_YyTimeline_$Impl_$.getMomentPath(time)]);
		if(extras != null) {
			extras.push(new gml_file_GmlFileExtra(full));
		}
		var code = electron_FileWrap.readTextFileSync(full);
		if(out != "") {
			out += "\n\n";
		}
		out += "#moment " + time;
		code = new EReg("^///\\s*@desc[ \t]+(.*)\r?\n","g").map(code,function(rx) {
			out += " " + rx.matched(1);
			return "";
		});
		out += "\n" + code.trimRight();
	}
	return out;
};
yy__$YyTimeline_YyTimeline_$Impl_$.setCode = function(this1,objPath,gmlCode) {
	var dir = haxe_io_Path.directory(objPath);
	var newData = parsers_GmlTimeline.parse(gmlCode,2);
	if(newData == null) {
		yy__$YyTimeline_YyTimeline_$Impl_$.errorText = parsers_GmlTimeline.parseError;
		return false;
	}
	var oldList = this1.momentList;
	var oldMap = [];
	var _g = 0;
	while(_g < oldList.length) {
		var mm = oldList[_g];
		++_g;
		oldMap[mm.moment] = mm;
	}
	var newList = [];
	var newMap = [];
	var _g1 = 0;
	while(_g1 < newData.length) {
		var item = newData[_g1];
		++_g1;
		var time = item.moment;
		var mm1 = oldMap[time];
		if(mm1 == null) {
			mm1 = { id : yy__$YyGUID_YyGUID_$Impl_$.create(), modelName : "GMMoment", mvc : "1.0", name : "", moment : time, evnt : { id : yy__$YyGUID_YyGUID_$Impl_$.create(), modelName : "GMEvent", mvc : "1.0", IsDnD : false, eventtype : 0, enumb : time, collisionObjectId : "00000000-0000-0000-0000-000000000000", m_owner : this1.id}};
		}
		newMap[time] = mm1;
		newList.push({ moment : mm1, code : item.code[0]});
	}
	var _g2 = 0;
	while(_g2 < oldList.length) {
		var mm2 = oldList[_g2];
		++_g2;
		if(newMap[mm2.moment] == null) {
			var full = haxe_io_Path.join([dir,yy__$YyTimeline_YyTimeline_$Impl_$.getMomentPath(mm2.moment)]);
			if(electron_FileWrap.existsSync(full)) {
				electron_FileWrap.unlinkSync(full);
			}
		}
	}
	this1.momentList = [];
	var _g3 = 0;
	while(_g3 < newList.length) {
		var item1 = newList[_g3];
		++_g3;
		var mm3 = item1.moment;
		electron_FileWrap.writeTextFileSync(haxe_io_Path.join([dir,yy__$YyTimeline_YyTimeline_$Impl_$.getMomentPath(mm3.moment)]),item1.code);
		this1.momentList.push(mm3);
	}
	return true;
};
var yy_YyZip = function(path,main,entries) {
	this.yyzFileMap = Object.create(null);
	this.yyzFileList = [];
	gml_Project.call(this,main);
	this.isVirtual = true;
	this.yyzFileList = entries;
	var _g = 0;
	while(_g < entries.length) {
		var entry = entries[_g];
		++_g;
		this.yyzFileMap[entry.path.replace(yy_YyZip.rxBackslash,"/")] = entry;
	}
};
$hxClasses["yy.YyZip"] = yy_YyZip;
yy_YyZip.__name__ = "yy.YyZip";
yy_YyZip.locateMain = function(entries) {
	var main = null;
	var mainDepth = 0;
	var _g = 0;
	while(_g < entries.length) {
		var path = entries[_g++].path;
		if(tools_PathTools.ptDetectProject(path) != 0) {
			var depth = tools_PathTools.ptDepth(path);
			if(main == null || depth < mainDepth) {
				main = path;
				mainDepth = depth;
			}
		}
	}
	return main;
};
yy_YyZip.open = function(path,bytes) {
	var fileName = null;
	try {
		var entries = [];
		var _g_head = haxe_zip_Reader.readZip(new haxe_io_BytesInput(bytes)).h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var file = new yy_YyZipFile(val.fileName);
			file.setBytes(val.data,val.compressed);
			entries.push(file);
		}
		var main = yy_YyZip.locateMain(entries);
		if(main == null) {
			window.alert("The archive contains no project files.");
			return false;
		}
		fileName = null;
		gml_Project.current = new yy_YyZip(path,main,entries);
		return true;
	} catch( e ) {
		console.log("Error processing YYZ (" + fileName + ")",((e) instanceof js__$Boot_HaxeError) ? e.val : e);
		return false;
	}
};
yy_YyZip.__super__ = gml_Project;
yy_YyZip.prototype = $extend(gml_Project.prototype,{
	existsSync: function(path) {
		return this.yyzFileMap[path.replace(yy_YyZip.rxBackslash,"/")] != null;
	}
	,unlinkSync: function(path) {
		path = path.replace(yy_YyZip.rxBackslash,"/");
		var file = this.yyzFileMap[path];
		if(file != null) {
			var this1 = this.yyzFileMap;
			delete this1[path];
			HxOverrides.remove(this.yyzFileList,file);
		}
	}
	,readTextFile: function(path,fn) {
		var file = this.yyzFileMap[path.replace(yy_YyZip.rxBackslash,"/")];
		if(file != null) {
			fn(null,file.getText());
		} else {
			fn(new Error("File not found: " + path),null);
		}
	}
	,readTextFileSync: function(path) {
		var file = this.yyzFileMap[path.replace(yy_YyZip.rxBackslash,"/")];
		if(file != null) {
			return file.getText();
		} else {
			throw new Error("File not found: " + path);
		}
	}
	,writeTextFileSync: function(path,text) {
		var fwpath = path.replace(yy_YyZip.rxBackslash,"/");
		var file = this.yyzFileMap[fwpath];
		if(file == null) {
			file = new yy_YyZipFile(fwpath);
			file.setText(text);
			this.yyzFileMap[fwpath] = file;
			this.yyzFileList.push(file);
		} else {
			file.setText(text);
		}
	}
	,readJsonFile: function(path,fn) {
		var file = this.yyzFileMap[path.replace(yy_YyZip.rxBackslash,"/")];
		if(file != null) {
			fn(null,JSON.parse(file.getText()));
		} else {
			fn(new Error("File not found: " + path),null);
		}
	}
	,readJsonFileSync: function(path) {
		var file = this.yyzFileMap[path.replace(yy_YyZip.rxBackslash,"/")];
		if(file != null) {
			return JSON.parse(file.getText());
		} else {
			throw new Error("File not found: " + path);
		}
	}
	,readGmxFile: function(path,fn) {
		var file = this.yyzFileMap[path.replace(yy_YyZip.rxBackslash,"/")];
		if(file != null) {
			fn(null,gmx_SfGmx.parse(file.getText()));
		} else {
			fn(new Error("File not found: " + path),null);
		}
	}
	,readGmxFileSync: function(path) {
		var file = this.yyzFileMap[path.replace(yy_YyZip.rxBackslash,"/")];
		if(file != null) {
			return gmx_SfGmx.parse(file.getText());
		} else {
			throw new Error("File not found: " + path);
		}
	}
	,getImageURL: function(path) {
		var file = this.yyzFileMap[path.replace(yy_YyZip.rxBackslash,"/")];
		if(file != null) {
			return file.getDataURL();
		} else {
			return null;
		}
	}
	,renameSync: function(prev,next) {
		prev = prev.replace(yy_YyZip.rxBackslash,"/");
		next = next.replace(yy_YyZip.rxBackslash,"/");
		var file = this.yyzFileMap[prev];
		if(file != null) {
			file.path = next;
			var this1 = this.yyzFileMap;
			delete this1[prev];
			this.yyzFileMap[next] = file;
		} else {
			var rx = new RegExp("^" + prev.replace(tools_NativeString.escapeRx_1,"\\$1") + "([/\\\\].+)$");
			var _g = 0;
			var _g1 = this.yyzFileList;
			while(_g < _g1.length) {
				var file1 = _g1[_g];
				++_g;
				var mt = rx.exec(file1.path);
				if(mt == null) {
					continue;
				}
				var this2 = this.yyzFileMap;
				var k = file1.path;
				delete this2[k];
				file1.path = next + mt[1];
				this.yyzFileMap[file1.path] = file1;
			}
		}
	}
	,readdirSync: function(path) {
		var out = [];
		var foundDirs = Object.create(null);
		var full = path.replace(yy_YyZip.rxBackslash,"/");
		var prefix = full != "" ? full + "/" : "";
		var prefixLen = prefix.length;
		var _g = 0;
		var _g1 = this.yyzFileList;
		while(_g < _g1.length) {
			var filePath = _g1[_g++].path;
			if(filePath.startsWith(prefix)) {
				if(haxe_io_Path.directory(filePath) == full) {
					var cut = haxe_io_Path.withoutDirectory(filePath);
					if(cut != "") {
						out.push({ fileName : cut, relPath : path + "/" + cut, fullPath : filePath, isDirectory : false});
					}
				} else {
					var cut1 = filePath.substring(prefixLen);
					var ofs = cut1.indexOf("/");
					if(ofs >= 0) {
						var dir = cut1.substring(0,ofs);
						if(!Object.prototype.hasOwnProperty.call(foundDirs,dir)) {
							foundDirs[dir] = true;
							out.push({ fileName : dir, relPath : path + "/" + dir, fullPath : path + "/" + dir, isDirectory : true});
						}
					}
				}
			}
		}
		return out;
	}
	,mkdirSync: function(path) {
	}
	,rmdirSync: function(path) {
	}
	,openExternal: function(path) {
	}
	,__class__: yy_YyZip
});
var yy_YyZipFile = function(path) {
	this.dataURL = null;
	this.compressed = false;
	this.path = path;
};
$hxClasses["yy.YyZipFile"] = yy_YyZipFile;
yy_YyZipFile.__name__ = "yy.YyZipFile";
yy_YyZipFile.prototype = {
	uncompress: function() {
		this.bytes = tools_BufferTools.inflate(this.bytes);
		this.compressed = false;
	}
	,getText: function() {
		if(this.text == null) {
			if(this.compressed) {
				this.uncompress();
			}
			this.text = this.bytes.toString();
		}
		return this.text;
	}
	,getDataURL: function() {
		if(this.bytes != null) {
			if(this.compressed) {
				this.uncompress();
			}
			return "data:" + (haxe_io_Path.extension(this.path).toLowerCase() == "png" ? "image/png" : "application/octet-stream") + ";base64," + tools_BufferTools.toBase64(this.bytes,0,this.bytes.length);
		} else {
			return "";
		}
	}
	,setBytes: function(b,isCompressed) {
		this.bytes = b;
		this.compressed = isCompressed;
		this.text = null;
		this.dataURL = null;
	}
	,setText: function(s) {
		this.text = s;
		this.bytes = null;
		this.compressed = false;
		this.dataURL = null;
	}
	,__class__: yy_YyZipFile
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
ace_AceSnippets.map = Object.create(null);
ace_AceStatusBar.emptyToken = { type : "", value : ""};
ace_AceStatusBar.canDocData = (function($this) {
	var $r;
	var d = Object.create(null);
	{
		d["asset.script"] = true;
		d["function"] = true;
		d["extfunction"] = true;
		d["glsl.function"] = true;
		d["hlsl.function"] = true;
		d["namespace"] = true;
		d["macro"] = true;
	}
	$r = d;
	return $r;
}(this));
ace_AceTooltips.spriteThumbs = Object.create(null);
ace_AceWrapCompleter.noItems = [];
electron_FileWrap.isMac = false;
electron_WindowsAccentColors.ready = false;
file_FileKind.map = Object.create(null);
file_kind_KGmx.inst = new file_kind_KGmx();
file_kind_KGmx.map = Object.create(null);
file_kind_KYy.inst = new file_kind_KYy();
file_kind_KYy.map = Object.create(null);
file_kind_gml_KGmlScript.inst = new file_kind_gml_KGmlScript();
file_kind_gml_KGmlExtension.inst = new file_kind_gml_KGmlExtension();
file_kind_gml_KGmlLambdas.inst = new file_kind_gml_KGmlLambdas();
file_kind_gml_KGmlMultifile.inst = new file_kind_gml_KGmlMultifile();
file_kind_gml_KGmlSearchResults.inst = new file_kind_gml_KGmlSearchResults();
file_kind_gml_KGmlSearchResults.nextId = 0;
file_kind_gmx_KGmxEvents.inst = new file_kind_gmx_KGmxEvents();
file_kind_gmx_KGmxExtensionAPI.inst = new file_kind_gmx_KGmxExtensionAPI();
file_kind_gmx_KGmxMoments.inst = new file_kind_gmx_KGmxMoments();
file_kind_gmx_KGmxSprite.inst = new file_kind_gmx_KGmxSprite();
file_kind_misc_KExtern.inst = new file_kind_misc_KExtern();
file_kind_misc_KGLSL.inst = new file_kind_misc_KGLSL();
file_kind_misc_KHLSL.inst = new file_kind_misc_KHLSL();
file_kind_misc_KJavaScript.inst = new file_kind_misc_KJavaScript();
file_kind_misc_KPlain.inst = new file_kind_misc_KPlain();
file_kind_misc_KPreferences.inst = new file_kind_misc_KPreferences();
file_kind_misc_KProjectProperties.inst = new file_kind_misc_KProjectProperties();
file_kind_misc_KSnippets.inst = new file_kind_misc_KSnippets();
file_kind_yy_KYyEvents.inst = new file_kind_yy_KYyEvents();
file_kind_yy_KYyExtensionAPI.inst = new file_kind_yy_KYyExtensionAPI();
file_kind_yy_KYyMoments.inst = new file_kind_yy_KYyMoments();
file_kind_yy_KYyRoomCCs.inst = new file_kind_yy_KYyRoomCCs();
file_kind_yy_KYyShader.inst = new file_kind_yy_KYyShader();
file_kind_yy_KYySprite.inst = new file_kind_yy_KYySprite();
gml_GmlAPI.version = 0;
gml_GmlAPI.kwList = ["globalvar","var","if","then","else","begin","end","for","while","do","until","repeat","switch","case","default","break","continue","with","exit","return","self","other","noone","all","global","local","mod","div","not","and","or","xor","enum","in","debugger","true","false"];
gml_GmlAPI.kwFlow = tools__$Dictionary_Dictionary_$Impl_$.fromKeys(("if|then|else|begin|end" + "|for|while|do|until|repeat|with|break|continue" + "|switch|case|default" + "|exit|return|wait" + "|enum|var|globalvar").split("|"),true);
gml_GmlAPI.scopeResetRx = new RegExp("^(?:#define|#event|#moment|#target)[ \t]+([\\w:]+)","");
gml_GmlAPI.ukSpelling = false;
gml_GmlAPI.stdDoc = Object.create(null);
gml_GmlAPI.stdComp = [];
gml_GmlAPI.stdKind = Object.create(null);
gml_GmlAPI.extDoc = Object.create(null);
gml_GmlAPI.extKind = Object.create(null);
gml_GmlAPI.extComp = [];
gml_GmlAPI.extArgc = Object.create(null);
gml_GmlAPI.extCompMap = Object.create(null);
gml_GmlAPI.gmlDoc = Object.create(null);
gml_GmlAPI.gmlKind = Object.create(null);
gml_GmlAPI.gmlComp = [];
gml_GmlAPI.gmlEnums = Object.create(null);
gml_GmlAPI.gmlEnumTypeComp = [];
gml_GmlAPI.gmlMacros = Object.create(null);
gml_GmlAPI.gmlMFuncs = Object.create(null);
gml_GmlAPI.gmlAssetIDs = Object.create(null);
gml_GmlAPI.gmlAssetComp = Object.create(null);
gml_GmlAPI.gmlGlobalFieldMap = Object.create(null);
gml_GmlAPI.gmlGlobalFieldComp = [];
gml_GmlAPI.gmlGlobalFullMap = Object.create(null);
gml_GmlAPI.gmlGlobalFullComp = [];
gml_GmlAPI.gmlInstFieldMap = Object.create(null);
gml_GmlAPI.gmlInstFieldComp = [];
gml_GmlAPI.gmlLookup = Object.create(null);
gml_GmlAPI.gmlLookupText = "";
gml_GmlAPI.lwArg0 = Object.create(null);
gml_GmlAPI.lwArg1 = Object.create(null);
gml_GmlAPI.lwConst = Object.create(null);
gml_GmlAPI.lwFlags = Object.create(null);
gml_GmlAPI.lwInst = Object.create(null);
gml_GmlFuncDoc.rxIsOpt = /^\s*(?:\[|\?|\.\.\.)/;
gml_GmlFuncDoc.fromCode_rx = new RegExp("\\bargument(?:" + "(\\d+)" + "|\\s*\\[\\s*(?:(\\d+)\\s*\\])?" + ")","g");
gml_GmlFuncDoc.fromCode_hasRet = new RegExp("\\breturn\\b\\s*[^;]");
gml_GmlFuncDoc.autogen_argi = (function($this) {
	var $r;
	var _g = [];
	{
		_g.push(new RegExp("\\bargument" + 0 + "\\b"));
		_g.push(new RegExp("\\bargument" + 1 + "\\b"));
		_g.push(new RegExp("\\bargument" + 2 + "\\b"));
		_g.push(new RegExp("\\bargument" + 3 + "\\b"));
		_g.push(new RegExp("\\bargument" + 4 + "\\b"));
		_g.push(new RegExp("\\bargument" + 5 + "\\b"));
		_g.push(new RegExp("\\bargument" + 6 + "\\b"));
		_g.push(new RegExp("\\bargument" + 7 + "\\b"));
		_g.push(new RegExp("\\bargument" + 8 + "\\b"));
		_g.push(new RegExp("\\bargument" + 9 + "\\b"));
		_g.push(new RegExp("\\bargument" + 10 + "\\b"));
		_g.push(new RegExp("\\bargument" + 11 + "\\b"));
		_g.push(new RegExp("\\bargument" + 12 + "\\b"));
		_g.push(new RegExp("\\bargument" + 13 + "\\b"));
		_g.push(new RegExp("\\bargument" + 14 + "\\b"));
		_g.push(new RegExp("\\bargument" + 15 + "\\b"));
	}
	$r = _g;
	return $r;
}(this));
gml_GmlFuncDoc.autogen_argoi = (function($this) {
	var $r;
	var _g = [];
	{
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 0 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 1 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 2 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 3 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 4 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 5 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 6 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 7 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 8 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 9 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 10 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 11 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 12 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 13 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 14 + "\\s*\\]"));
		_g.push(new RegExp("\\bargument\\s*\\[\\s*" + 15 + "\\s*\\]"));
	}
	$r = _g;
	return $r;
}(this));
gml_GmlFuncDoc.autogen_argo = new RegExp("\\bargument\\b");
gml_GmlImports.defaultMap = Object.create(null);
gml_GmlLocals.defaultMap = Object.create(null);
gml_Project.nameNode = document.querySelector("#project-name");
gml_Project.rxName = new EReg("^.+[/\\\\](\\w+)\\.\\w+$","g");
gmx_GmxAction.rxActionPre = new RegExp("^#action\\b");
gmx_GmxAction.rxActionSplit = new RegExp("^(\\w+\\b|\\{|\\}|//)\\s*(.*)$");
gmx_GmxEvent.rxHeader = new EReg("^////?(.*)","");
gmx_GmxLoader.assetTypes = ["sprite","background","sound","path","font","shader","timeline","script","object","room"];
gmx_GmxLoader.rxAssetName = new EReg("^.+[/\\\\](\\w+)(?:\\.[\\w.]+)?$","g");
gmx_GmxLoader.allConfigs = "All configurations";
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
parsers_GmlEvent.t2s = [];
parsers_GmlEvent.t2sc = [];
parsers_GmlEvent.s2t = Object.create(null);
parsers_GmlEvent.i2s = [];
parsers_GmlEvent.s2i = Object.create(null);
parsers_GmlEvent.comp = [];
parsers_GmlExtArgs.rxOpt = new RegExp("^var\\s+(\\w+)" + "(?:" + "/\\*[ \t]*:[ \t]*(\\w+(?:<.*?>)?)\\*/" + ")?" + "\\s*(?:" + (";\\s*if\\s\\(" + "\\s*argument_count\\s*>\\s*(\\d+)\\s*" + "\\)\\s*(\\w+)\\s*=" + "\\s*argument\\s*\\[\\s*(\\d+)\\s*\\]\\s*" + ";\\s*else\\s*(\\w+)\\s*=") + "|" + ("=" + "\\s*argument_count\\s*>\\s*(\\d+)\\s*" + "\\?\\s*" + "\\s*argument\\s*\\[\\s*(\\d+)\\s*\\]\\s*" + "\\:") + ")\\s*([^;]+);","g");
parsers_GmlExtArgs.rxHasOpt = new RegExp("(?:\\?|=|,\\s*$)");
parsers_GmlExtArgs.rxHasTail = new RegExp(",\\s*$");
parsers_GmlExtArgs.rxNotMagic = new RegExp("var\\s+\\w+\\s*=\\s*" + "argument(?:\\s*\\[\\s*\\d+\\s*\\]|\\d+)","g");
parsers_GmlExtArgs.argKeywords = (function($this) {
	var $r;
	var out = Object.create(null);
	out["argument"] = true;
	{
		out["argument" + 0] = true;
		out["argument" + 1] = true;
		out["argument" + 2] = true;
		out["argument" + 3] = true;
		out["argument" + 4] = true;
		out["argument" + 5] = true;
		out["argument" + 6] = true;
		out["argument" + 7] = true;
		out["argument" + 8] = true;
		out["argument" + 9] = true;
		out["argument" + 10] = true;
		out["argument" + 11] = true;
		out["argument" + 12] = true;
		out["argument" + 13] = true;
		out["argument" + 14] = true;
		out["argument" + 15] = true;
	}
	$r = out;
	return $r;
}(this));
parsers_GmlExtArgsDoc.rxGmDoc = new RegExp("^(///\\s*\\w*\\()(.*?)(\\).*)$");
parsers_GmlExtArgsDoc.rxAfter = new RegExp("^///\\s*@(?:func|function|description|desc)");
parsers_GmlExtArgsDoc.rxArg = new RegExp("^(///\\s*(@(?:arg|param|argument))\\s+(\\S+)\\s*)(.*)");
parsers_GmlExtCoroutines.keywordMap0 = Object.create(null);
parsers_GmlExtCoroutines.keywordMap1 = tools__$Dictionary_Dictionary_$Impl_$.fromKeys(["yield","label","goto"],"keyword");
parsers_GmlExtCoroutines.keywordMap = parsers_GmlExtCoroutines.keywordMap0;
parsers_GmlExtCoroutines.enabled = false;
parsers_GmlExtCoroutines.markRx = new RegExp("^#gmcr","m");
parsers_GmlExtImport.rxImport = new RegExp("^#import[ \t]+(?:" + "([\\w.]+\\*?)" + "(?:" + "[ \t]+(?:in|as)" + "[ \t]+(\\w+)" + "(?:([:\\.])(\\w+)?)?" + ")?" + "[ \t]*(?:[\r\n]|$)" + ")","");
parsers_GmlExtImport.rxImportFile = new RegExp("^#import[ \t]+(\"[^\"]*\"|'[^']*')","");
parsers_GmlExtImport.rxLocalType = new RegExp("^" + "/\\*[ \t]*:[ \t]*(\\w+(?:<.*?>)?)\\*/" + "$");
parsers_GmlExtImport.rxPeriod = new RegExp("\\.","g");
parsers_GmlExtImport.rxHasType = new RegExp("(?:\\w/\\*:|var.+?\\w:|#args.+?\\w:)","");
parsers_GmlExtImport.pre_needsCache = new RegExp("\n#(?:define|event|moment|target)\\b");
parsers_GmlExtImport.post_numImports = 0;
parsers_GmlExtImport.post_procIdent_p1 = 0;
parsers_GmlSeekData.map = Object.create(null);
parsers_GmlSeekData.blank = new parsers_GmlSeekData();
parsers_GmlExtLambda.seekData = new parsers_GmlSeekData();
parsers_GmlExtLambda.seekPath = "";
parsers_GmlExtLambda.rxlfPrefix = new RegExp("^__lf_");
parsers_GmlExtLambda.rxlcPrefix = new RegExp("^__lc_");
parsers_GmlExtLambda.rxLambdaArgsSp = new RegExp("^([ \t]*)([\\s\\S]*)([ \t]*)$");
parsers_GmlExtLambda.rxLambdaPre = new RegExp("^" + "(?:///.*\r?\n)?" + "(//!#lambda" + "([ \t]*)(\\$|\\w+)" + "([ \t]*)(?:\\(([ \t]*)\\$([ \t]*)\\))?" + ".*\r?\n)" + "(?:#args\\b[ \t]*(.+)\r?\n)?" + "([\\s\\S]*)$");
parsers_GmlExtLambda.rxLambdaDef = new RegExp("^/\\*!#lamdef (\\w+)\\*/");
parsers_GmlExtLambda.readDefs_rx = new RegExp("^///\\s*((" + "__lf_" + "\\w+).+)","gm");
parsers_GmlExtMFunc.magicRegex = "";
parsers_GmlExtMFunc.magicMap = parsers_GmlExtMFunc.__magicMap_init();
parsers_GmlHeader.rx1 = new RegExp("^///(.*)(?:\r?\n|$)");
parsers_GmlHeader.rx2 = new RegExp("^/// @(description|desc)?( .*)(?:\r?\n|$)");
parsers_GmlKeycode.comp = [];
parsers_GmlKeycode.names = parsers_GmlKeycode.initNames();
parsers_GmlKeycode.codes = parsers_GmlKeycode.initCodes(parsers_GmlKeycode.names);
parsers_GmlReader.rxVarType = new RegExp("^" + "/\\*[ \t]*:[ \t]*(\\w+(?:<.*?>)?)\\*/" + "$");
parsers_GmlSeeker.itemsLeft = 0;
parsers_GmlSeeker.itemQueue = [];
parsers_GmlSeeker.jsDoc_full = new RegExp("^///\\s*" + "(?:@desc(?:ription)?\\s+)?" + "\\w*[ \t]*(\\(.+)");
parsers_GmlSeeker.jsDoc_param = new RegExp("^///\\s*" + "@(?:arg|param|argument)\\s+" + "(?:\\{.*?\\}\\s*)?" + "(\\S+(?:\\s+=.+)?)");
parsers_GmlSeeker.gmlDoc_full = new RegExp("^\\s*\\w*\\s*\\(.*\\)");
parsers_GmlSeeker.parseConst_rx10 = new RegExp("^-?\\d+$");
parsers_GmlSeeker.parseConst_rx16 = new RegExp("^(?:0x|\\$)([0-9a-fA-F]+)$");
parsers_GmlSeeker.localType = new RegExp("^/\\*[ \t]*:[ \t]*(\\w+)\\*/$");
parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__isUnOp = parsers_linter__$GmlLinterKind_GmlLinterKindSet_$Impl_$._new([21,22]);
parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__isBinOp = parsers_linter__$GmlLinterKind_GmlLinterKindSet_$Impl_$._new([21,22,23,24,25,26,11,12,13,15,14,16,27,28,29,30,31,17,18,19]);
parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__isSetOp = parsers_linter__$GmlLinterKind_GmlLinterKindSet_$Impl_$._new([10]);
parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__isStat = parsers_linter__$GmlLinterKind_GmlLinterKindSet_$Impl_$._new([9,41,33,34]);
parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__canCall = parsers_linter__$GmlLinterKind_GmlLinterKindSet_$Impl_$._new([4,42]);
parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__noSemico = parsers_linter__$GmlLinterKind_GmlLinterKindSet_$Impl_$._new([37,51,63,65,64,67,56,70,73,71,7,8]);
parsers_linter__$GmlLinterKind_GmlLinterKind_$Impl_$.__canPostfix = parsers_linter__$GmlLinterKind_GmlLinterKindSet_$Impl_$._new([4,42,43]);
parsers_linter__$GmlLinterPrefs_GmlLinterPrefs_$Impl_$.defValue = { onLoad : true, onSave : true, requireSemicolons : false, requireParentheses : false, noSingleEquals : false};
ui_Sidebar.list = [];
ui_Sidebar.map = Object.create(null);
plugins_PluginAPI.sidebar = ui_Sidebar;
plugins_PluginAPI.aceTools = ace_AceTools;
plugins_PluginManager.pluginMap = Object.create(null);
plugins_PluginManager.pluginDir = Object.create(null);
plugins_PluginManager.registerMap = Object.create(null);
plugins_PluginManager.ready = false;
shaders_ShaderHighlight.nextKind = 1;
tools_Base64.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
tools_NativeString.trimTrailBreak_1 = new RegExp("^([\\s\\S]*?)(\r?\n)?$","g");
tools_NativeString.escapeRx_1 = new RegExp("([.*+?^" + "()|[\\]\\/\\\\])","g");
tools_NativeString.escapeProp_1 = new RegExp("([\"\\\\])","g");
tools_NativeString.yyJson_1 = new RegExp("([ \t]+)(\".*\": )\\[\\]","g");
tools_NativeString.yyJson_2 = new RegExp("\\n","g");
tools_PathTools.ptJoin = Reflect.makeVarArgs(function(args) {
	return haxe_io_Path.join(args);
});
tools_StringBuilder.formatCache = new haxe_ds_StringMap();
tools_StringBuilder.formatMap = tools_StringBuilder.formatInit();
ui_ChromeTabs.pathHistory = [];
ui_ChromeTabs.attrContext = "data-context";
ui_CommandPalette.lookupText = "";
ui_CommandPalette.lookupMap = new haxe_ds_StringMap();
ui_CommandPalette.lookupList = [];
ui_GMLive.rxLive = new RegExp("if\\b\\s*\\(" + "\\b(?:live_call|live_call_ext|live_defcall|live_defcall_ext)","");
ui_GMLive.attr = "data-gmlive";
ui_GlobalLookup.pool = [];
ui_GlobalLookup.current = "";
ui_GlobalSeachData.sync_rx = new RegExp("// in @\\[(.+):(\\d+)\\]:\r?\n(.*)","g");
ui_Preferences.path = "user-preferences";
ui_Theme.elements = [];
ui_Theme.current = "default";
ui_WelcomePage.lwText = ["/*","Hello!","","Double-click the top panel to add a code tab.","Ctrl+Enter or F5 to run your code.","","Also check out Help in the main menu.","","Try copying the following to a new code tab for a test:","*/","// init","trace(\"hi!\");","frame = 0;","","#define step","// step event code","frame += delta_time/1000000;","","#define draw","// draw event code","scr_show(\"hi!\");","","#define scr_show","// define scripts like this","draw_text(10, 10 + sin(frame / 0.7) * 3, argument0);"].join("\n");
ui_liveweb_LiveWeb.isReady = false;
ui_preferences_PrefLinter.selectOpts = ["inherit","on","off"];
ui_preferences_PrefLinter.selectVals = [undefined,true,false];
ui_project_ProjectProperties.dir = "#config";
ui_project_ProjectProperties.path = "#config" + "/properties.json";
ui_treeview_TreeView.thumbMap = Object.create(null);
ui_treeview_TreeView.openPaths = [];
ui_treeview_TreeViewDnD.currOrder = 0;
ui_treeview_TreeViewDnD.rxCanDropTo = new RegExp("^scripts[\\\\/]","i");
ui_treeview_TreeViewDnD.rxCanDrag = new RegExp("^scripts[\\\\/]" + ".+","i");
ui_treeview_TreeViewDnD.rxCanDrag2 = new RegExp("^[^\\\\/]+[\\\\/].","");
ui_treeview_TreeViewDnD.prefixOf_rx = new RegExp("^([^\\\\/]+)[\\\\/]","");
yy__$YyGUID_YyGUID_$Impl_$.test = new RegExp("^" + "[0-9a-fA-F]" + "{8}-" + "[0-9a-fA-F]" + "{4}-" + "[0-9a-fA-F]" + "{4}-" + "[0-9a-fA-F]" + "{4}-" + "[0-9a-fA-F]" + "{12}" + "$");
yy_YyLoader.rxDatafiles = new RegExp("\\bdatafiles_yy([\\\\/])");
yy_YyObjectProperties.propertyList = ["parent_index","sprite_index","mask_index","visible","solid","persistent","uses_physics","physics_density","physics_restitution","physics_collision_group","physics_linear_damping","physics_angular_damping","physics_sensor","physics_start_awake","physics_kinematic","physics_shape","physics_shape_data"];
yy_YyObjectProperties.typeList = ["unknown","real","int","string","bool","expr","asset","list","color"];
yy_YyObjectProperties.assetTypes = [new yy_YyObjectPropertiesAssetFlag(1,"tileset"),new yy_YyObjectPropertiesAssetFlag(2,"sprite"),new yy_YyObjectPropertiesAssetFlag(4,"sound"),new yy_YyObjectPropertiesAssetFlag(8,"path"),new yy_YyObjectPropertiesAssetFlag(16,"script"),new yy_YyObjectPropertiesAssetFlag(32,"shader"),new yy_YyObjectPropertiesAssetFlag(64,"font"),new yy_YyObjectPropertiesAssetFlag(128,"timeline"),new yy_YyObjectPropertiesAssetFlag(256,"object"),new yy_YyObjectPropertiesAssetFlag(512,"room")];
yy_YyObjectProperties.assetTypeMap = (function($this) {
	var $r;
	var dict = Object.create(null);
	{
		var _g = 0;
		var _g1 = yy_YyObjectProperties.assetTypes;
		while(_g < _g1.length) {
			var pair = _g1[_g];
			++_g;
			dict[pair.name] = pair.flag;
		}
	}
	$r = dict;
	return $r;
}(this));
yy_YyObjectProperties.rxLString = new RegExp("^(?:@'[^']*?'|@\"[^\"]*?\")$");
yy_YyObjectProperties.rxJSONish = new RegExp("^[-\\d.\"]");
yy_YyZip.rxBackslash = new RegExp("\\\\","g");
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
